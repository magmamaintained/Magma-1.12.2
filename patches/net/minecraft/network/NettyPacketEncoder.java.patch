--- ../src-base/minecraft/net/minecraft/network/NettyPacketEncoder.java
+++ ../src-work/minecraft/net/minecraft/network/NettyPacketEncoder.java
@@ -4,6 +4,8 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToByteEncoder;
 import java.io.IOException;
+
+import net.minecraft.network.login.server.SPacketLoginSuccess;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
@@ -37,12 +39,15 @@
                 LOGGER.debug(RECEIVED_PACKET_MARKER, "OUT: [{}:{}] {}", p_encode_1_.channel().attr(NetworkManager.PROTOCOL_ATTRIBUTE_KEY).get(), integer, p_encode_2_.getClass().getName());
             }
 
-            if (integer == null)
+            if (integer == null && !(p_encode_2_ instanceof SPacketLoginSuccess))
             {
                 throw new IOException("Can't serialize unregistered packet");
             }
             else
             {
+                //Forcibly updates the packet id when it's a SPacketLoginSuccess because sometimes it's not looked up properly
+                if(p_encode_2_ instanceof SPacketLoginSuccess) integer = 2;
+
                 PacketBuffer packetbuffer = new PacketBuffer(p_encode_3_);
                 packetbuffer.writeVarInt(integer.intValue());
 
@@ -54,7 +59,32 @@
                 {
                     throw throwable; // Forge: throw this instead of logging it, to prevent corrupt packets from being sent to the client where they are much harder to debug.
                 }
+
+                // Paper start
+                int packetLength = p_encode_3_.readableBytes();
+                if (packetLength > MAX_PACKET_SIZE) {
+                    throw new PacketTooLargeException(p_encode_2_, packetLength);
+                }
+                // Paper end
+
             }
         }
+
+
     }
+
+    // Paper start
+    private static int MAX_PACKET_SIZE = 2097152;
+    public static class PacketTooLargeException extends RuntimeException {
+        private final Packet<?> packet;
+        PacketTooLargeException(Packet<?> packet, int packetLength) {
+            super("PacketTooLarge - " + packet.getClass().getSimpleName() + " is " + packetLength +". Max is " + MAX_PACKET_SIZE);
+            this.packet = packet;
+        }
+
+        public Packet<?> getPacket() {
+            return packet;
+        }
+    }
+    // Paper end
 }
