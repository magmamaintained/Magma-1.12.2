--- ../src-base/minecraft/net/minecraft/network/NetworkManager.java
+++ ../src-work/minecraft/net/minecraft/network/NetworkManager.java
@@ -74,15 +74,26 @@
         }
     };
     private final EnumPacketDirection direction;
-    private final Queue<NetworkManager.InboundHandlerTuplePacketListener> outboundPacketsQueue = Queues.<NetworkManager.InboundHandlerTuplePacketListener>newConcurrentLinkedQueue();
+    private final Queue<InboundHandlerTuplePacketListener> outboundPacketsQueue = Queues.<InboundHandlerTuplePacketListener>newConcurrentLinkedQueue();
     private final ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();
-    private Channel channel;
-    private SocketAddress socketAddress;
+    public Channel channel;
+    // Spigot Start // PAIL
+    public SocketAddress socketAddress;
+    public java.util.UUID spoofedUUID;
+    public com.mojang.authlib.properties.Property[] spoofedProfile;
+    // Spigot End
+    public boolean preparing = true; // Spigot
     private INetHandler packetListener;
     private ITextComponent terminationReason;
     private boolean isEncrypted;
     private boolean disconnected;
 
+    // Paper start - NetworkClient implementation
+    public int protocolVersion;
+    public java.net.InetSocketAddress virtualHost;
+    private static boolean enableExplicitFlush = Boolean.getBoolean("paper.explicit-flush");
+    // Paper end
+
     public NetworkManager(EnumPacketDirection packetDirection)
     {
         this.direction = packetDirection;
@@ -98,6 +109,7 @@
         super.channelActive(p_channelActive_1_);
         this.channel = p_channelActive_1_.channel();
         this.socketAddress = this.channel.remoteAddress();
+        this.preparing = false; // Spigot
 
         try
         {
@@ -123,6 +135,15 @@
 
     public void exceptionCaught(ChannelHandlerContext p_exceptionCaught_1_, Throwable p_exceptionCaught_2_) throws Exception
     {
+        // Paper start
+        if (p_exceptionCaught_2_ instanceof io.netty.handler.codec.EncoderException && p_exceptionCaught_2_.getCause() instanceof NettyPacketEncoder.PacketTooLargeException) {
+            if (((NettyPacketEncoder.PacketTooLargeException) p_exceptionCaught_2_.getCause()).getPacket().packetTooLarge(this)) {
+                return;
+            } else {
+                p_exceptionCaught_2_ = p_exceptionCaught_2_.getCause();
+            }
+        }
+        // Paper end
         TextComponentTranslation textcomponenttranslation;
 
         if (p_exceptionCaught_2_ instanceof TimeoutException)
@@ -173,7 +194,7 @@
 
             try
             {
-                this.outboundPacketsQueue.add(new NetworkManager.InboundHandlerTuplePacketListener(packetIn, new GenericFutureListener[0]));
+                this.outboundPacketsQueue.add(new InboundHandlerTuplePacketListener(packetIn, new GenericFutureListener[0]));
             }
             finally
             {
@@ -195,7 +216,7 @@
 
             try
             {
-                this.outboundPacketsQueue.add(new NetworkManager.InboundHandlerTuplePacketListener(packetIn, (GenericFutureListener[])ArrayUtils.add(listeners, 0, listener)));
+                this.outboundPacketsQueue.add(new InboundHandlerTuplePacketListener(packetIn, (GenericFutureListener[])ArrayUtils.add(listeners, 0, listener)));
             }
             finally
             {
@@ -265,7 +286,7 @@
             {
                 while (!this.outboundPacketsQueue.isEmpty())
                 {
-                    NetworkManager.InboundHandlerTuplePacketListener networkmanager$inboundhandlertuplepacketlistener = this.outboundPacketsQueue.poll();
+                    InboundHandlerTuplePacketListener networkmanager$inboundhandlertuplepacketlistener = this.outboundPacketsQueue.poll();
                     this.dispatchPacket(networkmanager$inboundhandlertuplepacketlistener.packet, networkmanager$inboundhandlertuplepacketlistener.futureListeners);
                 }
             }
@@ -287,7 +308,7 @@
 
         if (this.channel != null)
         {
-            this.channel.flush();
+            if (enableExplicitFlush) this.channel.eventLoop().execute(() -> this.channel.flush()); // Paper - we don't need to explicit flush here, but allow opt in incase issues are found to a better version
         }
     }
 
@@ -298,9 +319,12 @@
 
     public void closeChannel(ITextComponent message)
     {
+        this.preparing = false; // Spigot
         if (this.channel.isOpen())
         {
-            this.channel.close().awaitUninterruptibly();
+            // We can't wait as this may be called from an event loop.
+            // this.channel.close().awaitUninterruptibly();
+            this.channel.close();
             this.terminationReason = message;
         }
     }
@@ -410,7 +434,7 @@
             }
             else
             {
-                this.channel.pipeline().addBefore("decoder", "decompress", new NettyCompressionDecoder(threshold));
+                this.channel.pipeline().addAfter("splitter", "decompress", new NettyCompressionDecoder(threshold));
             }
 
             if (this.channel.pipeline().get("compress") instanceof NettyCompressionEncoder)
@@ -476,4 +500,12 @@
                 this.futureListeners = inFutureListeners;
             }
         }
+
+    // Spigot Start
+    public SocketAddress getRawAddress()
+    {
+        return this.channel.remoteAddress();
+    }
+    // Spigot End
+
 }
