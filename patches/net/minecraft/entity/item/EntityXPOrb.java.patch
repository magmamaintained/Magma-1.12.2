--- ../src-base/minecraft/net/minecraft/entity/item/EntityXPOrb.java
+++ ../src-work/minecraft/net/minecraft/entity/item/EntityXPOrb.java
@@ -3,6 +3,7 @@
 import net.minecraft.block.material.Material;
 import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
+import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.MoverType;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Enchantments;
@@ -15,6 +16,11 @@
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.v1_12_R1.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory;
+import org.bukkit.entity.ExperienceOrb.SpawnReason;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
 
 public class EntityXPOrb extends Entity
 {
@@ -26,9 +32,59 @@
     private EntityPlayer closestPlayer;
     private int xpTargetColor;
 
-    public EntityXPOrb(World worldIn, double x, double y, double z, int expValue)
-    {
+    // Paper start
+    public java.util.UUID sourceEntityId;
+    public java.util.UUID triggerEntityId;
+    public org.bukkit.entity.ExperienceOrb.SpawnReason spawnReason = org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN;
+
+    private void loadPaperNBT(NBTTagCompound nbttagcompound) {
+        if (!nbttagcompound.hasKey("Paper.ExpData", 10)) { // 10 = compound
+            return;
+        }
+        NBTTagCompound comp = nbttagcompound.getCompoundTag("Paper.ExpData");
+        if (comp.hasUniqueId("source")) {
+            this.sourceEntityId = comp.getUUID("source");
+        }
+        if (comp.hasUniqueId("trigger")) {
+            this.triggerEntityId = comp.getUUID("trigger");
+        }
+        if (comp.hasKey("reason")) {
+            String reason = comp.getString("reason");
+            try {
+                spawnReason = org.bukkit.entity.ExperienceOrb.SpawnReason.valueOf(reason);
+            } catch (Exception e) {
+                this.world.getServer().getLogger().warning("Invalid spawnReason set for experience orb: " + e.getMessage() + " - " + reason);
+            }
+        }
+    }
+    private void savePaperNBT(NBTTagCompound nbttagcompound) {
+        NBTTagCompound comp = new NBTTagCompound();
+        if (sourceEntityId != null) {
+            comp.setUUID("source", sourceEntityId);
+        }
+        if (triggerEntityId != null) {
+            comp.setUUID("trigger", triggerEntityId);
+        }
+        if (spawnReason != null && spawnReason != org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN) {
+            comp.setString("reason", spawnReason.name());
+        }
+        nbttagcompound.setTag("Paper.ExpData", comp);
+    }
+
+    public EntityXPOrb(World world, double d0, double d1, double d2, int i, org.bukkit.entity.ExperienceOrb.SpawnReason reason, Entity triggerId) {
+        this(world, d0, d1, d2, i, reason, triggerId, null);
+    }
+
+    public EntityXPOrb(World worldIn, double x, double y, double z, int expValue) {
+        this(worldIn, x, y, z, expValue, SpawnReason.CUSTOM, null, null);
+    }
+
+    public EntityXPOrb(World worldIn, double x, double y, double z, int expValue, org.bukkit.entity.ExperienceOrb.SpawnReason reason, Entity triggerId, Entity sourceId) {
         super(worldIn);
+        this.sourceEntityId = sourceId != null ? sourceId.getUniqueID() : null;
+        this.triggerEntityId = triggerId != null ? triggerId.getUniqueID() : null;
+        this.spawnReason = reason != null ? reason : org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN;
+        // Paper end
         this.setSize(0.5F, 0.5F);
         this.setPosition(x, y, z);
         this.rotationYaw = (float)(Math.random() * 360.0D);
@@ -74,6 +130,7 @@
     public void onUpdate()
     {
         super.onUpdate();
+        EntityPlayer prevTarget = this.closestPlayer;// CraftBukkit - store old target
 
         if (this.delayBeforeCanPickup > 0)
         {
@@ -117,19 +174,30 @@
 
         if (this.closestPlayer != null)
         {
-            double d1 = (this.closestPlayer.posX - this.posX) / 8.0D;
-            double d2 = (this.closestPlayer.posY + (double)this.closestPlayer.getEyeHeight() / 2.0D - this.posY) / 8.0D;
-            double d3 = (this.closestPlayer.posZ - this.posZ) / 8.0D;
-            double d4 = Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3);
-            double d5 = 1.0D - d4;
+            // CraftBukkit start
+            boolean cancelled = false;
+            if (this.closestPlayer != prevTarget) {
+                EntityTargetLivingEntityEvent event = CraftEventFactory.callEntityTargetLivingEvent(this, closestPlayer, EntityTargetEvent.TargetReason.CLOSEST_PLAYER);
+                EntityLivingBase target = event.getTarget() == null ? null : ((CraftLivingEntity) event.getTarget()).getHandle();
+                closestPlayer = target instanceof EntityPlayer ? (EntityPlayer) target : null;
+                cancelled = event.isCancelled();
+            }
 
-            if (d5 > 0.0D)
-            {
-                d5 = d5 * d5;
-                this.motionX += d1 / d4 * d5 * 0.1D;
-                this.motionY += d2 / d4 * d5 * 0.1D;
-                this.motionZ += d3 / d4 * d5 * 0.1D;
+            if (!cancelled && closestPlayer != null) {
+                double d1 = (this.closestPlayer.posX - this.posX) / 8.0D;
+                double d2 = (this.closestPlayer.posY + (double) this.closestPlayer.getEyeHeight() / 2.0D - this.posY) / 8.0D;
+                double d3 = (this.closestPlayer.posZ - this.posZ) / 8.0D;
+                double d4 = Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3);
+                double d5 = 1.0D - d4;
+
+                if (d5 > 0.0D) {
+                    d5 = d5 * d5;
+                    this.motionX += d1 / d4 * d5 * 0.1D;
+                    this.motionY += d2 / d4 * d5 * 0.1D;
+                    this.motionZ += d3 / d4 * d5 * 0.1D;
+                }
             }
+            // CraftBukkit end
         }
 
         this.move(MoverType.SELF, this.motionX, this.motionY, this.motionZ);
@@ -195,14 +263,16 @@
     {
         compound.setShort("Health", (short)this.xpOrbHealth);
         compound.setShort("Age", (short)this.xpOrbAge);
-        compound.setShort("Value", (short)this.xpValue);
+        compound.setInteger("Value", this.xpValue); // Paper - save as Integer
+        savePaperNBT(compound); // Paper
     }
 
     public void readEntityFromNBT(NBTTagCompound compound)
     {
         this.xpOrbHealth = compound.getShort("Health");
         this.xpOrbAge = compound.getShort("Age");
-        this.xpValue = compound.getShort("Value");
+        this.xpValue = compound.getInteger("Value"); // Paper - save as Integer
+        loadPaperNBT(compound); // Paper
     }
 
     public void onCollideWithPlayer(EntityPlayer entityIn)
@@ -220,13 +290,17 @@
                 {
                     float ratio = itemstack.getItem().getXpRepairRatio(itemstack);
                     int i = Math.min(roundAverage(this.xpValue * ratio), itemstack.getItemDamage());
-                    this.xpValue -= roundAverage(i / ratio);
-                    itemstack.setItemDamage(itemstack.getItemDamage() - i);
+                    org.bukkit.event.player.PlayerItemMendEvent event = CraftEventFactory.callPlayerItemMendEvent(entityIn, this, itemstack, i);
+                    i = event.getRepairAmount();
+                    if (!event.isCancelled()) {
+                        this.xpValue -= roundAverage(i / ratio);
+                        itemstack.setItemDamage(itemstack.getItemDamage() - i);
+                    }
                 }
 
                 if (this.xpValue > 0)
                 {
-                    entityIn.addExperience(this.xpValue);
+                    entityIn.addExperience(CraftEventFactory.callPlayerExpChangeEvent(entityIn, this).getAmount()); // CraftBukkit - this.value -> event.getAmount() // Paper - supply experience orb object
                 }
 
                 this.setDead();
@@ -234,11 +308,13 @@
         }
     }
 
+    public int durToXp(int i) { return durabilityToXp(i); } // Paper OBFHELPER
     private int durabilityToXp(int durability)
     {
         return durability / 2;
     }
 
+    public int xpToDur(int i) { return xpToDurability(i); } // Paper OBFHELPER
     private int xpToDurability(int xp)
     {
         return xp * 2;
@@ -296,6 +372,24 @@
 
     public static int getXPSplit(int expValue)
     {
+        // CraftBukkit start
+        if (expValue > 162670129) return expValue - 100000;
+        if (expValue > 81335063) return 81335063;
+        if (expValue > 40667527) return 40667527;
+        if (expValue > 20333759) return 20333759;
+        if (expValue > 10166857) return 10166857;
+        if (expValue > 5083423) return 5083423;
+        if (expValue > 2541701) return 2541701;
+        if (expValue > 1270849) return 1270849;
+        if (expValue > 635413) return 635413;
+        if (expValue > 317701) return 317701;
+        if (expValue > 158849) return 158849;
+        if (expValue > 79423) return 79423;
+        if (expValue > 39709) return 39709;
+        if (expValue > 19853) return 19853;
+        if (expValue > 9923) return 9923;
+        if (expValue > 4957) return 4957;
+        // CraftBukkit end
         if (expValue >= 2477)
         {
             return 2477;
