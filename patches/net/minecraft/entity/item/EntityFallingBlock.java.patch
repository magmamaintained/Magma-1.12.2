--- ../src-base/minecraft/net/minecraft/entity/item/EntityFallingBlock.java
+++ ../src-work/minecraft/net/minecraft/entity/item/EntityFallingBlock.java
@@ -1,12 +1,12 @@
 package net.minecraft.entity.item;
 
 import com.google.common.collect.Lists;
+import java.util.ArrayList;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockAnvil;
 import net.minecraft.block.BlockFalling;
-import net.minecraft.block.ITileEntityProvider;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.crash.CrashReportCategory;
@@ -24,6 +24,7 @@
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.datafix.DataFixer;
+import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.RayTraceResult;
@@ -31,6 +32,7 @@
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory;
 
 public class EntityFallingBlock extends Entity
 {
@@ -38,7 +40,7 @@
     public int fallTime;
     public boolean shouldDropItem = true;
     private boolean dontSetBlock;
-    private boolean hurtEntities;
+    public boolean hurtEntities;
     private int fallHurtMax = 40;
     private float fallHurtAmount = 2.0F;
     public NBTTagCompound tileEntityData;
@@ -114,7 +116,7 @@
             {
                 BlockPos blockpos = new BlockPos(this);
 
-                if (this.world.getBlockState(blockpos).getBlock() == block)
+                if (this.world.getBlockState(blockpos).getBlock() == block && !CraftEventFactory.callEntityChangeBlockEvent(this, blockpos, Blocks.AIR, 0).isCancelled())
                 {
                     this.world.setBlockToAir(blockpos);
                 }
@@ -132,6 +134,15 @@
 
             this.move(MoverType.SELF, this.motionX, this.motionY, this.motionZ);
 
+            // Paper start - Configurable EntityFallingBlock height nerf
+            if (this.world.paperConfig.fallingBlockHeightNerf != 0 && this.posX > this.world.paperConfig.fallingBlockHeightNerf) {
+                if (this.shouldDropItem && this.world.getGameRules().getBoolean("doEntityDrops")) {
+                    this.dropItem(new ItemStack(block, 1, block.damageDropped(this.fallTile)), 0.0F);
+                }
+                this.setDead();
+            }
+            // Paper end
+
             if (!this.world.isRemote)
             {
                 BlockPos blockpos1 = new BlockPos(this);
@@ -166,11 +177,10 @@
                 {
                     IBlockState iblockstate = this.world.getBlockState(blockpos1);
 
-                    if (this.world.isAirBlock(new BlockPos(this.posX, this.posY - 0.009999999776482582D, this.posZ))) //Forge: Don't indent below.
-                    if (!flag1 && BlockFalling.canFallThrough(this.world.getBlockState(new BlockPos(this.posX, this.posY - 0.009999999776482582D, this.posZ))))
-                    {
+                    if (!isOnGround()) {
                         this.onGround = false;
-                        return;
+//                        return; // CraftBukkit
+                        if (this.world.paperConfig.altFallingBlockOnGround) return; // Paper
                     }
 
                     this.motionX *= 0.699999988079071D;
@@ -185,10 +195,20 @@
                         {
                             if (this.world.mayPlace(block, blockpos1, true, EnumFacing.UP, this) && (flag1 || !BlockFalling.canFallThrough(this.world.getBlockState(blockpos1.down()))) && this.world.setBlockState(blockpos1, this.fallTile, 3))
                             {
+                                // CraftBukkit start
+                                if (CraftEventFactory.callEntityChangeBlockEvent(this, blockpos1, this.fallTile.getBlock(), this.fallTile.getBlock().getMetaFromState(this.fallTile)).isCancelled()) {
+                                    return;
+                                }
+                                this.world.setBlockState(blockpos1, this.fallTile, 3);
                                 if (block instanceof BlockFalling)
                                 {
                                     ((BlockFalling)block).onEndFalling(this.world, blockpos1, this.fallTile, iblockstate);
                                 }
+                                // CraftBukkit end
+                                if (block instanceof BlockFalling)
+                                {
+                                    ((BlockFalling)block).onEndFalling(this.world, blockpos1, this.fallTile, iblockstate);
+                                }
 
                                 if (this.tileEntityData != null && block.hasTileEntity(this.fallTile))
                                 {
@@ -232,6 +252,28 @@
         }
     }
 
+    // Paper start
+    private boolean isOnGround() {
+        BlockPos where = new BlockPos(this.posX, this.posY - 0.009999999776482582D, this.posZ);
+        boolean cannotMoveThrough = !BlockFalling.canMoveThrough(this.world.getBlockState(where));
+        if (!this.world.paperConfig.altFallingBlockOnGround) return cannotMoveThrough;
+        if (cannotMoveThrough) {
+            return true;
+        }
+        IBlockState blockData = this.world.getBlockState(where.down());
+        if (BlockFalling.canMoveThrough(blockData)) {
+            return false;
+        }
+        List<AxisAlignedBB> list = new ArrayList<>();
+        addCollisions(blockData, getEntityWorld(), where, this.getEntityBoundingBox(), list, this);
+        return list.size() > 0;
+    }
+    // OBFHELPER
+    private void addCollisions(IBlockState blockData, World world, BlockPos where, AxisAlignedBB collider, List<AxisAlignedBB> list, Entity entity) {
+        blockData.addCollisionBoxToList(world, where, collider, list, entity, false);
+    }
+    // Paper end
+
     public void fall(float distance, float damageMultiplier)
     {
         Block block = this.fallTile.getBlock();
@@ -248,7 +290,9 @@
 
                 for (Entity entity : list)
                 {
+                    CraftEventFactory.entityDamage = this; // CraftBukkit
                     entity.attackEntityFrom(damagesource, (float)Math.min(MathHelper.floor((float)i * this.fallHurtAmount), this.fallHurtMax));
+                    CraftEventFactory.entityDamage = null; // CraftBukkit
                 }
 
                 if (flag && (double)this.rand.nextFloat() < 0.05000000074505806D + (double)i * 0.05D)
@@ -308,6 +352,13 @@
             this.fallTile = Block.getBlockById(compound.getByte("Tile") & 255).getStateFromMeta(i);
         }
 
+        // Paper start - Block FallingBlocks with Command Blocks
+        final Block b = this.fallTile.getBlock();
+        if (this.world.paperConfig.filterNBTFromSpawnEgg && (b == Blocks.COMMAND_BLOCK || b == Blocks.REPEATING_COMMAND_BLOCK || b == Blocks.CHAIN_COMMAND_BLOCK)) {
+            this.fallTile = Blocks.STONE.getDefaultState();
+        }
+        // Paper end
+
         this.fallTime = compound.getInteger("Time");
         Block block = this.fallTile.getBlock();
 
@@ -336,6 +387,16 @@
         {
             this.fallTile = Blocks.SAND.getDefaultState();
         }
+
+        // Paper start - Try and load origin location from the old NBT tags for backwards compatibility
+        if (compound.hasKey("SourceLoc_x")) {
+            int srcX = compound.getInteger("SourceLoc_x");
+            int srcY = compound.getInteger("SourceLoc_y");
+            int srcZ = compound.getInteger("SourceLoc_z");
+            origin = new org.bukkit.Location(world.getWorld(), srcX, srcY, srcZ);
+        }
+        // Paper end
+
     }
 
     public void setHurtEntities(boolean p_145806_1_)
