--- ../src-base/minecraft/net/minecraft/entity/item/EntityItem.java
+++ ../src-work/minecraft/net/minecraft/entity/item/EntityItem.java
@@ -1,5 +1,6 @@
 package net.minecraft.entity.item;
 
+import com.destroystokyo.paper.HopperPusher;
 import javax.annotation.Nullable;
 import net.minecraft.block.material.Material;
 import net.minecraft.entity.Entity;
@@ -13,7 +14,9 @@
 import net.minecraft.network.datasync.DataParameter;
 import net.minecraft.network.datasync.DataSerializers;
 import net.minecraft.network.datasync.EntityDataManager;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.stats.StatList;
+import net.minecraft.tileentity.TileEntityHopper;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.datafix.DataFixer;
 import net.minecraft.util.datafix.FixTypes;
@@ -26,13 +29,31 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.entity.EntityPickupItemEvent;
+import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
+import org.bukkit.event.player.PlayerPickupItemEvent;
+import org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory;
 
-public class EntityItem extends Entity
+// Paper start - implement HopperPusher
+public class EntityItem extends Entity implements HopperPusher
 {
+
+    @Override
+    public boolean acceptItem(TileEntityHopper hopper) {
+        return TileEntityHopper.putDropInInventory(null, hopper, this);
+    }
+
+    @Override
+    public World getWorld() {
+        return world;
+    }
+    // Paper end
+
     private static final Logger LOGGER = LogManager.getLogger();
     private static final DataParameter<ItemStack> ITEM = EntityDataManager.<ItemStack>createKey(EntityItem.class, DataSerializers.ITEM_STACK);
     private int age;
-    private int pickupDelay;
+    public int pickupDelay;
+    public boolean canMobPickup = true; // Paper
     private int health;
     private String thrower;
     private String owner;
@@ -43,6 +64,8 @@
      */
     public int lifespan = 6000;
 
+    private int lastTick = MinecraftServer.currentTick - 1; // CraftBukkit
+
     public EntityItem(World worldIn, double x, double y, double z)
     {
         super(worldIn);
@@ -60,7 +83,7 @@
     {
         this(worldIn, x, y, z);
         this.setItem(stack);
-        this.lifespan = (stack.getItem() == null ? 6000 : stack.getItem().getEntityLifespan(stack, worldIn));
+        this.lifespan = (stack.getItem() == null ? world.spigotConfig.itemDespawnRate : stack.getItem().getEntityLifespan(stack, worldIn)); // Spigot
     }
 
     protected boolean canTriggerWalking()
@@ -92,12 +115,14 @@
         else
         {
             super.onUpdate();
+            if (tryPutInHopper()) return; // Paper
+            // CraftBukkit start - Use wall time for pickup and despawn timers
+            int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+            if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
+            if (this.age != -32768) this.age += elapsedTicks;
+            this.lastTick = MinecraftServer.currentTick;
+            // CraftBukkit end
 
-            if (this.pickupDelay > 0 && this.pickupDelay != 32767)
-            {
-                --this.pickupDelay;
-            }
-
             this.prevPosX = this.posX;
             this.prevPosY = this.posY;
             this.prevPosZ = this.posZ;
@@ -156,10 +181,12 @@
                 this.motionY *= -0.5D;
             }
 
+            /* Craftbukkit start - moved up
             if (this.age != -32768)
             {
                 ++this.age;
             }
+            // Craftbukkit end */
 
             this.handleWaterMovement();
 
@@ -180,6 +207,12 @@
 
             if (!this.world.isRemote && this.age >= lifespan)
             {
+                // CraftBukkit start - fire ItemDespawnEvent
+                if (CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
+                    this.age = 0;
+                    return;
+                }
+                // CraftBukkit end
                 int hook = net.minecraftforge.event.ForgeEventFactory.onItemExpire(this, item);
                 if (hook < 0) this.setDead();
                 else          this.lifespan += hook;
@@ -191,9 +224,39 @@
         }
     }
 
+    // Spigot start - copied from above
+    @Override
+    public void inactiveTick() {
+        if (tryPutInHopper()) return; // Paper
+        // CraftBukkit start - Use wall time for pickup and despawn timers
+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+        if (this.pickupDelay != 32767) this.pickupDelay -= elapsedTicks;
+        if (this.age != -32768) this.age += elapsedTicks;
+        this.lastTick = MinecraftServer.currentTick;
+        // CraftBukkit end
+
+        if (!this.world.isRemote && this.age >= world.spigotConfig.itemDespawnRate) { // Spigot
+            // CraftBukkit start - fire ItemDespawnEvent
+            if (CraftEventFactory.callItemDespawnEvent(this).isCancelled()) {
+                this.age = 0;
+                return;
+            }
+            // CraftBukkit end
+            this.setDead();
+        }
+    }
+    // Spigot end
+
     private void searchForOtherItemsNearby()
     {
-        for (EntityItem entityitem : this.world.getEntitiesWithinAABB(EntityItem.class, this.getEntityBoundingBox().grow(0.5D, 0.0D, 0.5D)))
+        // Paper start - avoid item merge if stack size above max stack size
+        ItemStack stack = getItem();
+        if (stack.getCount() >= stack.getMaxStackSize()) return;
+        // Paper end
+        // Spigot start
+        double radius = world.spigotConfig.itemMerge;
+        for (EntityItem entityitem : this.world.getEntitiesWithinAABB(EntityItem.class, this.getEntityBoundingBox().grow(radius, radius, radius)))
+            // Spigot end
         {
             this.combineItems(entityitem);
         }
@@ -248,11 +311,14 @@
                     }
                     else
                     {
-                        itemstack1.grow(itemstack.getCount());
-                        other.pickupDelay = Math.max(other.pickupDelay, this.pickupDelay);
-                        other.age = Math.min(other.age, this.age);
-                        other.setItem(itemstack1);
-                        this.setDead();
+                        // Spigot start
+                        if (CraftEventFactory.callItemMergeEvent(other, this).isCancelled()) return false;
+                        itemstack.grow(itemstack1.getCount());
+                        this.pickupDelay = Math.max(other.pickupDelay, this.pickupDelay);
+                        this.age = Math.min(other.age, this.age);
+                        this.setItem(itemstack);
+                        other.setDead();
+                        // Spigot end
                         return true;
                     }
                 }
@@ -314,6 +380,11 @@
         }
         else
         {
+            // CraftBukkit start
+            if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount)) {
+                return false;
+            }
+            // CraftBukkit end
             this.markVelocityChanged();
             this.health = (int)((float)this.health - amount);
 
@@ -393,6 +464,56 @@
             Item item = itemstack.getItem();
             int i = itemstack.getCount();
 
+            // CraftBukkit start - fire PlayerPickupItemEvent
+            int canHold = entityIn.inventory.canHold(itemstack);
+            int remaining = i - canHold;
+            boolean flyAtPlayer = false; // Paper
+
+            // Paper start
+            if (this.pickupDelay <= 0) {
+                PlayerAttemptPickupItemEvent attemptEvent = new PlayerAttemptPickupItemEvent((org.bukkit.entity.Player) entityIn.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+                this.world.getServer().getPluginManager().callEvent(attemptEvent);
+                flyAtPlayer = attemptEvent.getFlyAtPlayer();
+                if (attemptEvent.isCancelled()) {
+                    if (flyAtPlayer) {
+                        entityIn.onItemPickup(this, i);
+                    }
+                    return;
+                }
+            }
+            // Paper end
+
+            if (this.pickupDelay <= 0 && canHold > 0) {
+                itemstack.setCount(canHold);
+                // Call legacy event
+                PlayerPickupItemEvent playerEvent = new PlayerPickupItemEvent((org.bukkit.entity.Player) entityIn.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+                playerEvent.setCancelled(!entityIn.canPickUpLoot);
+                this.world.getServer().getPluginManager().callEvent(playerEvent);
+                flyAtPlayer = playerEvent.getFlyAtPlayer(); // Paper
+                if (playerEvent.isCancelled()) {
+                    // Paper Start
+                    if (flyAtPlayer) {
+                        entityIn.onItemPickup(this, i);
+                    }
+                    // Paper End
+                    return;
+                }
+
+                // Call newer event afterwards
+                EntityPickupItemEvent entityEvent = new EntityPickupItemEvent((org.bukkit.entity.Player) entityIn.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+                entityEvent.setCancelled(!entityIn.canPickUpLoot);
+                this.world.getServer().getPluginManager().callEvent(entityEvent);
+                if (entityEvent.isCancelled()) {
+                    return;
+                }
+
+                itemstack.setCount(canHold + remaining);
+
+                // Possibly < 0; fix here so we do not have to modify code below
+                this.pickupDelay = 0;
+            }
+            // CraftBukkit end
+
             int hook = net.minecraftforge.event.ForgeEventFactory.onItemPickup(this, entityIn);
             if (hook < 0) return;
             ItemStack clone = itemstack.copy();
@@ -401,6 +522,11 @@
             {
                 clone.setCount(clone.getCount() - this.getItem().getCount());
                 net.minecraftforge.fml.common.FMLCommonHandler.instance().firePlayerItemPickupEvent(entityIn, this, clone);
+                // Paper Start
+                if (flyAtPlayer) {
+                    entityIn.onItemPickup(this, i);
+                }
+                // Paper End
 
                 if (itemstack.isEmpty())
                 {
