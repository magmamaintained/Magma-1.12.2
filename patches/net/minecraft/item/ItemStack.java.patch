--- ../src-base/minecraft/net/minecraft/item/ItemStack.java
+++ ../src-work/minecraft/net/minecraft/item/ItemStack.java
@@ -9,7 +9,7 @@
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
-import net.minecraft.block.Block;
+import net.minecraft.block.*;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.util.ITooltipFlag;
 import net.minecraft.enchantment.Enchantment;
@@ -49,17 +49,20 @@
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.v1_12_R1.util.CraftMagicNumbers;
+import org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_12_R1.inventory.CraftItemStack;
 
 public final class ItemStack implements net.minecraftforge.common.capabilities.ICapabilitySerializable<NBTTagCompound>
 {
     public static final ItemStack EMPTY = new ItemStack((Item)null);
     public static final DecimalFormat DECIMALFORMAT = new DecimalFormat("#.##");
-    private int stackSize;
+    public int stackSize;
     private int animationsToGo;
-    private final Item item;
+    public Item item;
     private NBTTagCompound stackTagCompound;
     private boolean isEmpty;
-    int itemDamage;
+    int itemDamage; public void setDamage(int i) { this.itemDamage = i; } // Paper - OBFHELPER
     private EntityItemFrame itemFrame;
     private Block canDestroyCacheBlock;
     private boolean canDestroyCacheResult;
@@ -70,6 +73,22 @@
     private net.minecraftforge.common.capabilities.CapabilityDispatcher capabilities;
     private NBTTagCompound capNBT;
 
+    // Paper start
+    private static final java.util.Comparator<NBTTagCompound> enchantSorter = java.util.Comparator.comparingInt(o -> o.getShort("id"));
+    private void processEnchantOrder(NBTTagCompound tag) {
+        if (tag == null || !tag.hasKey("ench", 9)) {
+            return;
+        }
+        NBTTagList list = tag.getTagList("ench", 10);
+        if (list.tagCount() < 2) {
+            return;
+        }
+        try {
+            list.sort(enchantSorter); // Paper
+        } catch (Exception ignored) {}
+    }
+    // Paper end
+
     public ItemStack(Block blockIn)
     {
         this(blockIn, 1);
@@ -119,23 +138,33 @@
 
     public ItemStack(NBTTagCompound compound)
     {
+        this.load(compound);
+
+        this.updateEmptyState();
+        this.forgeInit();
+    }
+
+    public void load(NBTTagCompound compound)
+    {
         this.capNBT = compound.hasKey("ForgeCaps") ? compound.getCompoundTag("ForgeCaps") : null;
         this.item = compound.hasKey("id", 8) ? Item.getByNameOrId(compound.getString("id")) : Items.AIR; //Forge fix tons of NumberFormatExceptions that are caused by deserializing EMPTY ItemStacks.
         this.stackSize = compound.getByte("Count");
-        this.itemDamage = Math.max(0, compound.getShort("Damage"));
+        // CraftBukkit start - Route through setData for filtering
+        // this.itemDamage = Math.max(0, compound.getShort("Damage"));
+        this.setItemDamage(compound.getShort("Damage"));
 
         if (compound.hasKey("tag", 10))
         {
-            this.stackTagCompound = compound.getCompoundTag("tag");
-
+            // CraftBukkit start - make defensive copy as this data may be coming from the save thread
+            // this.stackTagCompound = compound.getCompoundTag("tag");
+            this.stackTagCompound = compound.getCompoundTag("tag").copy();
+            processEnchantOrder(this.stackTagCompound); // Paper
             if (this.item != null)
             {
-                this.item.updateItemStackNBT(compound);
+                // this.item.updateItemStackNBT(compound);
+                this.item.updateItemStackNBT(this.stackTagCompound);
             }
         }
-
-        this.updateEmptyState();
-        this.forgeInit();
     }
 
     public boolean isEmpty()
@@ -160,6 +189,7 @@
             return true;
         }
     }
+    // Paper end
 
     public static void registerFixes(DataFixer fixer)
     {
@@ -185,11 +215,10 @@
     {
         if (!worldIn.isRemote) return net.minecraftforge.common.ForgeHooks.onPlaceItemIntoWorld(this, playerIn, worldIn, pos, side, hitX, hitY, hitZ, hand);
         EnumActionResult enumactionresult = this.getItem().onItemUse(playerIn, worldIn, pos, hand, side, hitX, hitY, hitZ);
-
         if (enumactionresult == EnumActionResult.SUCCESS)
         {
-            playerIn.addStat(StatList.getObjectUseStats(this.item));
-        }
+                playerIn.addStat(StatList.getObjectUseStats(this.item));
+            }
 
         return enumactionresult;
     }
@@ -231,7 +260,8 @@
 
         if (this.stackTagCompound != null)
         {
-            nbt.setTag("tag", this.stackTagCompound);
+            // nbt.setTag("tag", this.stackTagCompound);
+            nbt.setTag("tag", this.stackTagCompound.copy()); // CraftBukkit - make defensive copy, data is going to another thread
         }
 
         if (this.capabilities != null)
@@ -274,11 +304,13 @@
         return this.getItem().getHasSubtypes();
     }
 
+    public boolean hasDamage() { return isItemDamaged(); } // Paper OBFHELPER
     public boolean isItemDamaged()
     {
         return this.isItemStackDamageable() && getItem().isDamaged(this);
     }
 
+    public int getDamage() { return getItemDamage(); } // Paper OBFHELPER
     public int getItemDamage()
     {
         return getItem().getDamage(this);
@@ -291,6 +323,26 @@
 
     public void setItemDamage(int meta)
     {
+        // CraftBukkit start - Filter out data for items that shouldn't have it
+        // The crafting system uses this value for a special purpose so we have to allow it
+        if (meta == 32767) {
+            getItem().setDamage(this, meta);
+            return;
+        }
+
+        // Is this a block?
+        if (CraftMagicNumbers.getBlock(CraftMagicNumbers.getId(this.getItem())) != Blocks.AIR) {
+            // If vanilla doesn't use data on it don't allow any
+            if (!(this.getHasSubtypes() || this.getItem().isDamageable())) {
+                meta = 0;
+            }
+        }
+
+        // Filter invalid plant data
+        if (CraftMagicNumbers.getBlock(CraftMagicNumbers.getId(this.getItem())) == Blocks.DOUBLE_PLANT && (meta > 5 || meta < 0)) {
+            meta = 0;
+        }
+        // CraftBukkit end
         getItem().setDamage(this, meta);
     }
 
@@ -322,6 +374,19 @@
 
                 amount -= j;
 
+                // Spigot start
+                if (damager != null) {
+                    CraftItemStack item = CraftItemStack.asCraftMirror(this);
+                    org.bukkit.event.player.PlayerItemDamageEvent event = new org.bukkit.event.player.PlayerItemDamageEvent(damager.getBukkitEntity(), item, amount);
+                    org.bukkit.Bukkit.getServer().getPluginManager().callEvent(event);
+                    if (amount != event.getDamage() || event.isCancelled()) {
+                        event.getPlayer().updateInventory();
+                    }
+                    if (event.isCancelled()) return false;
+                    amount = event.getDamage();
+                }
+                // Spigot end
+
                 if (amount <= 0)
                 {
                     return false;
@@ -347,6 +412,11 @@
                 if (this.attemptDamageItem(amount, entityIn.getRNG(), entityIn instanceof EntityPlayerMP ? (EntityPlayerMP)entityIn : null))
                 {
                     entityIn.renderBrokenItemStack(this);
+                    // CraftBukkit start - Check for item breaking
+                    if (this.stackSize == 1 && entityIn instanceof EntityPlayer) {
+                        CraftEventFactory.callPlayerItemBreakEvent((EntityPlayer) entityIn, this);
+                    }
+                    // CraftBukkit end
                     this.shrink(1);
 
                     if (entityIn instanceof EntityPlayer)
@@ -533,6 +603,7 @@
         this.getItem().onCreated(this, worldIn, playerIn);
     }
 
+    public int getItemUseMaxDuration() { return getMaxItemUseDuration(); } // Paper - OBFHELPER
     public int getMaxItemUseDuration()
     {
         return this.getItem().getMaxItemUseDuration(this);
@@ -592,9 +663,22 @@
         return this.stackTagCompound != null ? this.stackTagCompound.getTagList("ench", 10) : new NBTTagList();
     }
 
+    // Paper start - (this is just a good no conflict location)
+    public org.bukkit.inventory.ItemStack asBukkitMirror() {
+        return CraftItemStack.asCraftMirror(this);
+    }
+    public org.bukkit.inventory.ItemStack asBukkitCopy() {
+        return CraftItemStack.asCraftMirror(this.copy());
+    }
+    public static ItemStack fromBukkitCopy(org.bukkit.inventory.ItemStack itemstack) {
+        return CraftItemStack.asNMSCopy(itemstack);
+    }
+    // Paper end
+
     public void setTagCompound(@Nullable NBTTagCompound nbt)
     {
         this.stackTagCompound = nbt;
+        processEnchantOrder(this.stackTagCompound); // Paper
     }
 
     public String getDisplayName()
@@ -931,6 +1015,7 @@
         nbttagcompound.setShort("id", (short)Enchantment.getEnchantmentID(ench));
         nbttagcompound.setShort("lvl", (short)((byte)level));
         nbttaglist.appendTag(nbttagcompound);
+        processEnchantOrder(nbttagcompound); // Paper
     }
 
     public boolean isItemEnchanted()
@@ -983,6 +1068,14 @@
 
     public void setRepairCost(int cost)
     {
+        // CraftBukkit start - remove RepairCost tag when 0 (SPIGOT-3945)
+        if (cost == 0) {
+            if (this.hasTagCompound()) {
+                this.stackTagCompound.removeTag("RepairCost");
+            }
+            return;
+        }
+        // CraftBukkit end
         if (!this.hasTagCompound())
         {
             this.stackTagCompound = new NBTTagCompound();
@@ -1043,6 +1136,14 @@
         nbttaglist.appendTag(nbttagcompound);
     }
 
+    @Deprecated
+    public void setItem(Item item) {
+        this.item = item;
+        // Update delegate as well
+        this.delegate = item.delegate;
+        this.setItemDamage(this.getItemDamage()); // CraftBukkit - Set data again to ensure it is filtered properly
+    }
+
     public ITextComponent getTextComponent()
     {
         TextComponentString textcomponentstring = new TextComponentString(this.getDisplayName());
@@ -1280,4 +1381,16 @@
     {
         return this.isEmpty() || this.getItem().doesSneakBypassUse(this, world, pos, player);
     }
+
+    // Spigot start
+    public static boolean fastMatches(ItemStack itemstack, ItemStack itemstack1) {
+        if (itemstack == null && itemstack1 == null) {
+            return true;
+        }
+        if (itemstack != null && itemstack1 != null) {
+            return itemstack.stackSize == itemstack1.stackSize && itemstack.item == itemstack1.item && itemstack.itemDamage == itemstack1.itemDamage;
+        }
+        return false;
+    }
+    // Spigot end
 }
