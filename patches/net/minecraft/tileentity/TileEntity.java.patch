--- ../src-base/minecraft/net/minecraft/tileentity/TileEntity.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntity.java
@@ -1,5 +1,7 @@
 package net.minecraft.tileentity;
 
+import co.aikar.timings.MinecraftTimings;
+import co.aikar.timings.Timing;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockJukebox;
@@ -16,26 +18,58 @@
 import net.minecraft.util.registry.RegistryNamespaced;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.world.World;
+import net.minecraft.world.chunk.Chunk;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.inventory.InventoryHolder;
+import org.magmafoundation.magma.utils.KeyedObject;
 
-public abstract class TileEntity implements net.minecraftforge.common.capabilities.ICapabilitySerializable<NBTTagCompound>
+public abstract class TileEntity implements net.minecraftforge.common.capabilities.ICapabilitySerializable<NBTTagCompound>, KeyedObject // Paper
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final RegistryNamespaced < ResourceLocation, Class <? extends TileEntity >> REGISTRY = new RegistryNamespaced < ResourceLocation, Class <? extends TileEntity >> ();
-    protected World world;
+    public World world;
     protected BlockPos pos = BlockPos.ORIGIN;
     protected boolean tileEntityInvalid;
     private int blockMetadata = -1;
     protected Block blockType;
+    public Timing tickTimer = MinecraftTimings.getTileEntityTimings(this); // Paper
+    public boolean isLoadingStructure = false; // Paper
 
+    static boolean IGNORE_TILE_UPDATES = false; // Paper
+
     public static void register(String id, Class <? extends TileEntity > clazz)
     {
         REGISTRY.putObject(new ResourceLocation(id), clazz);
     }
 
+    // Paper start
+    private java.lang.ref.WeakReference<Chunk> currentChunk = null;
+    public Chunk getCurrentChunk() {
+        final Chunk chunk = currentChunk != null ? currentChunk.get() : world.getChunkIfLoaded(pos.getX() >> 4, pos.getZ() >> 4);
+        return chunk != null && chunk.isLoaded() ? chunk : null;
+    }
+    public void setCurrentChunk(Chunk chunk) {
+        this.currentChunk = chunk != null ? new java.lang.ref.WeakReference<>(chunk) : null;
+    }
+    private String tileEntityKeyString = null;
+    private ResourceLocation tileEntityKey = getMinecraftKey();
+    @Override
+    public ResourceLocation getMinecraftKey() {
+        if (tileEntityKey == null) {
+            tileEntityKey = getKey(this.getClass());
+            tileEntityKeyString = tileEntityKey != null ? tileEntityKey.toString() : null;
+        }
+        return tileEntityKey;
+    }
+    @Override
+    public String getMinecraftKeyString() {
+        getMinecraftKey(); // Try to load if it doesn't exists.
+        return tileEntityKeyString;
+    }
+
     @Nullable
     public static ResourceLocation getKey(Class <? extends TileEntity > clazz)
     {
@@ -154,6 +188,7 @@
     {
         if (this.world != null)
         {
+            if (IGNORE_TILE_UPDATES) return; // Paper
             IBlockState iblockstate = this.world.getBlockState(this.pos);
             this.blockMetadata = iblockstate.getBlock().getMetaFromState(iblockstate);
             this.world.markChunkDirty(this.pos, this);
@@ -243,7 +278,12 @@
 
         if (this.world != null)
         {
-            CrashReportCategory.addBlockInfo(reportCategory, this.pos, this.getBlockType(), this.getBlockMetadata());
+            // Paper start - Prevent TileEntity and Entity crashes
+            Block block = this.getBlockType();
+            if (block != null) {
+                CrashReportCategory.addBlockInfo(reportCategory, this.pos, this.getBlockType(), this.getBlockMetadata());
+            }
+            // Paper end
             reportCategory.addDetail("Actual block type", new ICrashReportDetail<String>()
             {
                 public String call() throws Exception
@@ -315,7 +355,7 @@
      * @param net The NetworkManager the packet originated from
      * @param pkt The data packet
      */
-    public void onDataPacket(net.minecraft.network.NetworkManager net, net.minecraft.network.play.server.SPacketUpdateTileEntity pkt)
+    public void onDataPacket(net.minecraft.network.NetworkManager net, SPacketUpdateTileEntity pkt)
     {
     }
 
@@ -531,4 +571,19 @@
         register("shulker_box", TileEntityShulkerBox.class);
         register("bed", TileEntityBed.class);
     }
+
+    // Paper start
+
+    @Nullable
+    public InventoryHolder getOwner() {
+        return getOwner(true);
+    }
+
+    public InventoryHolder getOwner(boolean useSnapshot) {
+        // Paper end
+        if (world == null) return null;
+        org.bukkit.block.BlockState state = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()).getState(useSnapshot);
+        if (state instanceof InventoryHolder) return (InventoryHolder) state;
+        return null;
+    }
 }
