--- ../src-base/minecraft/net/minecraft/server/management/PlayerChunkMap.java
+++ ../src-work/minecraft/net/minecraft/server/management/PlayerChunkMap.java
@@ -1,18 +1,24 @@
 package net.minecraft.server.management;
 
-import com.google.common.base.Predicate;
-import com.google.common.collect.AbstractIterator;
-import com.google.common.collect.ComparisonChain;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
-import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
-import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
+
 import javax.annotation.Nullable;
+
+import co.aikar.timings.Timing;
+import com.google.common.base.Predicate;
+import com.google.common.collect.AbstractIterator;
+import com.google.common.collect.ComparisonChain;
+import com.google.common.collect.Lists;
+import io.netty.util.internal.ConcurrentSet;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
@@ -21,446 +27,502 @@
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
 
-public class PlayerChunkMap
-{
-    private static final Predicate<EntityPlayerMP> NOT_SPECTATOR = new Predicate<EntityPlayerMP>()
-    {
-        public boolean apply(@Nullable EntityPlayerMP p_apply_1_)
-        {
-            return p_apply_1_ != null && !p_apply_1_.isSpectator();
-        }
-    };
-    private static final Predicate<EntityPlayerMP> CAN_GENERATE_CHUNKS = new Predicate<EntityPlayerMP>()
-    {
-        public boolean apply(@Nullable EntityPlayerMP p_apply_1_)
-        {
-            return p_apply_1_ != null && (!p_apply_1_.isSpectator() || p_apply_1_.getServerWorld().getGameRules().getBoolean("spectatorsGenerateChunks"));
-        }
-    };
-    private final WorldServer world;
-    private final List<EntityPlayerMP> players = Lists.<EntityPlayerMP>newArrayList();
-    private final Long2ObjectMap<PlayerChunkMapEntry> entryMap = new Long2ObjectOpenHashMap<PlayerChunkMapEntry>(4096);
-    private final Set<PlayerChunkMapEntry> dirtyEntries = Sets.<PlayerChunkMapEntry>newHashSet();
-    private final List<PlayerChunkMapEntry> pendingSendToPlayers = Lists.<PlayerChunkMapEntry>newLinkedList();
-    private final List<PlayerChunkMapEntry> entriesWithoutChunks = Lists.<PlayerChunkMapEntry>newLinkedList();
-    private final List<PlayerChunkMapEntry> entries = Lists.<PlayerChunkMapEntry>newArrayList();
-    private int playerViewRadius;
-    private long previousTotalWorldTime;
-    private boolean sortMissingChunks = true;
-    private boolean sortSendToPlayers = true;
+import org.spigotmc.AsyncCatcher; // TacoSpigot
 
-    public PlayerChunkMap(WorldServer serverWorld)
-    {
-        this.world = serverWorld;
-        this.setPlayerViewRadius(serverWorld.getMinecraftServer().getPlayerList().getViewDistance());
-    }
+public class PlayerChunkMap {
+	private static final Predicate<EntityPlayerMP> NOT_SPECTATOR = new Predicate<EntityPlayerMP>() {
+		public boolean apply(@Nullable EntityPlayerMP p_apply_1_) {
+			return p_apply_1_ != null && !p_apply_1_.isSpectator();
+		}
+	};
+	private static final Predicate<EntityPlayerMP> CAN_GENERATE_CHUNKS = new Predicate<EntityPlayerMP>() {
+		public boolean apply(@Nullable EntityPlayerMP p_apply_1_) {
+			return p_apply_1_ != null && (!p_apply_1_.isSpectator() || p_apply_1_.getServerWorld().getGameRules().getBoolean("spectatorsGenerateChunks"));
+		}
+	};
+	private final WorldServer world;
+	// TacoSpigot start - catch async access
+	private final List<EntityPlayerMP> players = AsyncCatcher.catchAsyncUsage(Lists.newArrayList(), "list access PlayerChunkMap.players");
+	private final Long2ObjectMap<PlayerChunkMapEntry> entryMap = new Long2ObjectOpenHashMap<PlayerChunkMapEntry>(4096);
+	private final Set<PlayerChunkMapEntry> dirtyEntries = AsyncCatcher.catchAsyncUsage(new ConcurrentSet<>(), "list access PlayerChunkMap.dirtyEntries");
+	private final List<PlayerChunkMapEntry> pendingSendToPlayers = AsyncCatcher.catchAsyncUsage(Lists.<PlayerChunkMapEntry>newLinkedList(), "list access PlayerChunkMap.pendingSendToPlayers");
+	private final List<PlayerChunkMapEntry> entriesWithoutChunks = AsyncCatcher.catchAsyncUsage(Lists.<PlayerChunkMapEntry>newLinkedList(), "list access PlayerChunkMap.entriesWithoutChunks");
+	private final List<PlayerChunkMapEntry> entries = AsyncCatcher.catchAsyncUsage(Lists.<PlayerChunkMapEntry>newArrayList(), "list access PlayerChunkMap.entries");
+	// TacoSpigot end
+	private int playerViewRadius;
 
-    public WorldServer getWorldServer()
-    {
-        return this.world;
-    }
+	public int getViewDistance() {
+		return playerViewRadius;
+	} // Paper OBFHELPER
 
-    public Iterator<Chunk> getChunkIterator()
-    {
-        final Iterator<PlayerChunkMapEntry> iterator = this.entries.iterator();
-        return new AbstractIterator<Chunk>()
-        {
-            protected Chunk computeNext()
-            {
-                while (true)
-                {
-                    if (iterator.hasNext())
-                    {
-                        PlayerChunkMapEntry playerchunkmapentry = iterator.next();
-                        Chunk chunk = playerchunkmapentry.getChunk();
+	private long previousTotalWorldTime;
+	private boolean sortMissingChunks = true;
+	private boolean sortSendToPlayers = true;
 
-                        if (chunk == null)
-                        {
-                            continue;
-                        }
+	public PlayerChunkMap(WorldServer serverWorld) {
+		this.world = serverWorld;
+		this.setPlayerViewRadius(serverWorld.spigotConfig.viewDistance); // Spigot
+	}
 
-                        if (!chunk.isLightPopulated() && chunk.isTerrainPopulated())
-                        {
-                            return chunk;
-                        }
+	public WorldServer getWorldServer() {
+		return this.world;
+	}
 
-                        if (!chunk.wasTicked())
-                        {
-                            return chunk;
-                        }
+	public Iterator<Chunk> getChunkIterator() {
+		final Iterator<PlayerChunkMapEntry> iterator = this.entries.iterator();
+		return new AbstractIterator<Chunk>() {
+			protected Chunk computeNext() {
+				while (true) {
+					if (iterator.hasNext()) {
+						PlayerChunkMapEntry playerchunkmapentry = iterator.next();
+						Chunk chunk = playerchunkmapentry.getChunk();
 
-                        if (!playerchunkmapentry.hasPlayerMatchingInRange(128.0D, PlayerChunkMap.NOT_SPECTATOR))
-                        {
-                            continue;
-                        }
+						if (chunk == null) {
+							continue;
+						}
 
-                        return chunk;
-                    }
+						if (!chunk.isLightPopulated() && chunk.isTerrainPopulated()) {
+							return chunk;
+						}
 
-                    return (Chunk)this.endOfData();
-                }
-            }
-        };
-    }
+						if (!chunk.wasTicked()) {
+							return chunk;
+						}
 
-    public void tick()
-    {
-        long i = this.world.getTotalWorldTime();
+						if (!playerchunkmapentry.hasPlayerMatchingInRange(128.0D, PlayerChunkMap.NOT_SPECTATOR)) {
+							continue;
+						}
 
-        if (i - this.previousTotalWorldTime > 8000L)
-        {
-            this.previousTotalWorldTime = i;
+						return chunk;
+					}
 
-            for (int j = 0; j < this.entries.size(); ++j)
-            {
-                PlayerChunkMapEntry playerchunkmapentry = this.entries.get(j);
-                playerchunkmapentry.update();
-                playerchunkmapentry.updateChunkInhabitedTime();
-            }
-        }
+					return (Chunk) this.endOfData();
+				}
+			}
+		};
+	}
 
-        if (!this.dirtyEntries.isEmpty())
-        {
-            for (PlayerChunkMapEntry playerchunkmapentry2 : this.dirtyEntries)
-            {
-                playerchunkmapentry2.update();
-            }
+	public void tick() {
+		long i = this.world.getTotalWorldTime();
 
-            this.dirtyEntries.clear();
-        }
+		if (i - this.previousTotalWorldTime > 8000L) {
+			try (Timing ignored = world.timings.doChunkMapUpdate.startTiming()) { // Paper
+				this.previousTotalWorldTime = i;
 
-        if (this.sortMissingChunks && i % 4L == 0L)
-        {
-            this.sortMissingChunks = false;
-            Collections.sort(this.entriesWithoutChunks, new Comparator<PlayerChunkMapEntry>()
-            {
-                public int compare(PlayerChunkMapEntry p_compare_1_, PlayerChunkMapEntry p_compare_2_)
-                {
-                    return ComparisonChain.start().compare(p_compare_1_.getClosestPlayerDistance(), p_compare_2_.getClosestPlayerDistance()).result();
-                }
-            });
-        }
+				for (int j = 0; j < this.entries.size(); ++j) {
+					PlayerChunkMapEntry playerchunkmapentry = this.entries.get(j);
+					playerchunkmapentry.update();
+					playerchunkmapentry.updateChunkInhabitedTime();
+				}
+			}
+		} // Paper timing
 
-        if (this.sortSendToPlayers && i % 4L == 2L)
-        {
-            this.sortSendToPlayers = false;
-            Collections.sort(this.pendingSendToPlayers, new Comparator<PlayerChunkMapEntry>()
-            {
-                public int compare(PlayerChunkMapEntry p_compare_1_, PlayerChunkMapEntry p_compare_2_)
-                {
-                    return ComparisonChain.start().compare(p_compare_1_.getClosestPlayerDistance(), p_compare_2_.getClosestPlayerDistance()).result();
-                }
-            });
-        }
+		if (!this.dirtyEntries.isEmpty()) {
+			try (Timing ignored = world.timings.doChunkMapToUpdate.startTiming()) { // Paper
+				for (PlayerChunkMapEntry playerchunkmapentry2 : this.dirtyEntries) {
+					playerchunkmapentry2.update();
+				}
 
-        if (!this.entriesWithoutChunks.isEmpty())
-        {
-            long l = System.nanoTime() + 50000000L;
-            int k = 49;
-            Iterator<PlayerChunkMapEntry> iterator = this.entriesWithoutChunks.iterator();
+				this.dirtyEntries.clear();
+			} // Paper timing
+		}
 
-            while (iterator.hasNext())
-            {
-                PlayerChunkMapEntry playerchunkmapentry1 = iterator.next();
+		if (this.sortMissingChunks && i % 4L == 0L) {
+			this.sortMissingChunks = false;
+			try (Timing ignored = world.timings.doChunkMapSortMissing.startTiming()) { // Paper
+				Collections.sort(this.entriesWithoutChunks, new Comparator<PlayerChunkMapEntry>() {
+					public int compare(PlayerChunkMapEntry p_compare_1_, PlayerChunkMapEntry p_compare_2_) {
+						return ComparisonChain.start().compare(p_compare_1_.getClosestPlayerDistance(), p_compare_2_.getClosestPlayerDistance()).result();
+					}
+				});
+			} // Paper timing
+		}
 
-                if (playerchunkmapentry1.getChunk() == null)
-                {
-                    boolean flag = playerchunkmapentry1.hasPlayerMatching(CAN_GENERATE_CHUNKS);
+		if (this.sortSendToPlayers && i % 4L == 2L) {
+			this.sortSendToPlayers = false;
+			try (Timing ignored = world.timings.doChunkMapSortSendToPlayers.startTiming()) { // Paper
+				Collections.sort(this.pendingSendToPlayers, new Comparator<PlayerChunkMapEntry>() {
+					public int compare(PlayerChunkMapEntry p_compare_1_, PlayerChunkMapEntry p_compare_2_) {
+						return ComparisonChain.start().compare(p_compare_1_.getClosestPlayerDistance(), p_compare_2_.getClosestPlayerDistance()).result();
+					}
+				});
+			} // Paper timing
+		}
 
-                    if (playerchunkmapentry1.providePlayerChunk(flag))
-                    {
-                        iterator.remove();
+		if (!this.entriesWithoutChunks.isEmpty()) {
+			long l = System.nanoTime() + 25000000L;
+			int k = 49;
+			Iterator<PlayerChunkMapEntry> iterator = this.entriesWithoutChunks.iterator();
 
-                        if (playerchunkmapentry1.sendToPlayers())
-                        {
-                            this.pendingSendToPlayers.remove(playerchunkmapentry1);
-                        }
+			while (iterator.hasNext()) {
+				PlayerChunkMapEntry playerchunkmapentry1 = iterator.next();
 
-                        --k;
+				if (playerchunkmapentry1.getChunk() == null) {
+					boolean flag = playerchunkmapentry1.hasPlayerMatching(CAN_GENERATE_CHUNKS);
 
-                        if (k < 0 || System.nanoTime() > l)
-                        {
-                            break;
-                        }
-                    }
-                }
-            }
-        }
+					if (playerchunkmapentry1.providePlayerChunk(flag)) {
+						iterator.remove();
 
-        if (!this.pendingSendToPlayers.isEmpty())
-        {
-            int i1 = 81;
-            Iterator<PlayerChunkMapEntry> iterator1 = this.pendingSendToPlayers.iterator();
+						if (playerchunkmapentry1.sendToPlayers()) {
+							this.pendingSendToPlayers.remove(playerchunkmapentry1);
+						}
 
-            while (iterator1.hasNext())
-            {
-                PlayerChunkMapEntry playerchunkmapentry3 = iterator1.next();
+						--k;
 
-                if (playerchunkmapentry3.sendToPlayers())
-                {
-                    iterator1.remove();
-                    --i1;
+						if (k < 0 || System.nanoTime() > l) {
+							break;
+						}
+					}
+				} else {
+					// CraftBukkit - SPIGOT-2891: remove once chunk has been provided
+					iterator.remove();
+				}
+			}
+		}
 
-                    if (i1 < 0)
-                    {
-                        break;
-                    }
-                }
-            }
-        }
+		if (!this.pendingSendToPlayers.isEmpty()) {
+			int i1 = 81;
+			try (Timing ignored = world.timings.doChunkMapPendingSendToPlayers.startTiming()) { // Paper
+				Iterator<PlayerChunkMapEntry> iterator1 = this.pendingSendToPlayers.iterator();
 
-        if (this.players.isEmpty())
-        {
-            WorldProvider worldprovider = this.world.provider;
+				while (iterator1.hasNext()) {
+					PlayerChunkMapEntry playerchunkmapentry3 = iterator1.next();
 
-            if (!worldprovider.canRespawnHere())
-            {
-                this.world.getChunkProvider().queueUnloadAll();
-            }
-        }
-    }
+					if (playerchunkmapentry3.sendToPlayers()) {
+						iterator1.remove();
+						--i1;
 
-    public boolean contains(int chunkX, int chunkZ)
-    {
-        long i = getIndex(chunkX, chunkZ);
-        return this.entryMap.get(i) != null;
-    }
+						if (i1 < 0) {
+							break;
+						}
+					}
+				}
+			} // Paper timing
+		}
 
-    @Nullable
-    public PlayerChunkMapEntry getEntry(int x, int z)
-    {
-        return (PlayerChunkMapEntry)this.entryMap.get(getIndex(x, z));
-    }
+		if (this.players.isEmpty()) {
+			try (Timing ignored = world.timings.doChunkMapUnloadChunks.startTiming()) { // Paper
+				WorldProvider worldprovider = this.world.provider;
 
-    private PlayerChunkMapEntry getOrCreateEntry(int chunkX, int chunkZ)
-    {
-        long i = getIndex(chunkX, chunkZ);
-        PlayerChunkMapEntry playerchunkmapentry = (PlayerChunkMapEntry)this.entryMap.get(i);
+				if (!worldprovider.canRespawnHere() && !this.world.disableLevelSaving) // Paper - respect saving disabled setting
+				{
+					this.world.getChunkProvider().queueUnloadAll();
+				}
+			} // Paper timing
+		}
+	}
 
-        if (playerchunkmapentry == null)
-        {
-            playerchunkmapentry = new PlayerChunkMapEntry(this, chunkX, chunkZ);
-            this.entryMap.put(i, playerchunkmapentry);
-            this.entries.add(playerchunkmapentry);
+	public boolean contains(int chunkX, int chunkZ) {
+		long i = getIndex(chunkX, chunkZ);
+		return this.entryMap.get(i) != null;
+	}
 
-            if (playerchunkmapentry.getChunk() == null)
-            {
-                this.entriesWithoutChunks.add(playerchunkmapentry);
-            }
+	@Nullable
+	public PlayerChunkMapEntry getEntry(int x, int z) {
+		return (PlayerChunkMapEntry) this.entryMap.get(getIndex(x, z));
+	}
 
-            if (!playerchunkmapentry.sendToPlayers())
-            {
-                this.pendingSendToPlayers.add(playerchunkmapentry);
-            }
-        }
+	private PlayerChunkMapEntry getOrCreateEntry(int chunkX, int chunkZ) {
+		long i = getIndex(chunkX, chunkZ);
+		PlayerChunkMapEntry playerchunkmapentry = (PlayerChunkMapEntry) this.entryMap.get(i);
 
-        return playerchunkmapentry;
-    }
+		if (playerchunkmapentry == null) {
+			playerchunkmapentry = new PlayerChunkMapEntry(this, chunkX, chunkZ);
+			this.entryMap.put(i, playerchunkmapentry);
+			this.entries.add(playerchunkmapentry);
 
-    public void markBlockForUpdate(BlockPos pos)
-    {
-        int i = pos.getX() >> 4;
-        int j = pos.getZ() >> 4;
-        PlayerChunkMapEntry playerchunkmapentry = this.getEntry(i, j);
+			if (playerchunkmapentry.getChunk() == null) {
+				this.entriesWithoutChunks.add(playerchunkmapentry);
+			}
 
-        if (playerchunkmapentry != null)
-        {
-            playerchunkmapentry.blockChanged(pos.getX() & 15, pos.getY(), pos.getZ() & 15);
-        }
-    }
+			if (!playerchunkmapentry.sendToPlayers()) {
+				this.pendingSendToPlayers.add(playerchunkmapentry);
+			}
+		}
 
-    public void addPlayer(EntityPlayerMP player)
-    {
-        int i = (int)player.posX >> 4;
-        int j = (int)player.posZ >> 4;
-        player.managedPosX = player.posX;
-        player.managedPosZ = player.posZ;
+		return playerchunkmapentry;
+	}
 
-        for (int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k)
-        {
-            for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l)
-            {
-                this.getOrCreateEntry(k, l).addPlayer(player);
-            }
-        }
+	public final boolean isChunkInUse(int x, int z) {
+		PlayerChunkMapEntry pi = getEntry(x, z);
+		if (pi != null) {
+			return (pi.players.size() > 0);
+		}
+		return false;
+	}
 
-        this.players.add(player);
-        this.markSortPending();
-    }
+	public void markBlockForUpdate(BlockPos pos) {
+		int i = pos.getX() >> 4;
+		int j = pos.getZ() >> 4;
+		PlayerChunkMapEntry playerchunkmapentry = this.getEntry(i, j);
 
-    public void removePlayer(EntityPlayerMP player)
-    {
-        int i = (int)player.managedPosX >> 4;
-        int j = (int)player.managedPosZ >> 4;
+		if (playerchunkmapentry != null) {
+			playerchunkmapentry.blockChanged(pos.getX() & 15, pos.getY(), pos.getZ() & 15);
+		}
+	}
 
-        for (int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k)
-        {
-            for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l)
-            {
-                PlayerChunkMapEntry playerchunkmapentry = this.getEntry(k, l);
+	public void addPlayer(EntityPlayerMP player) {
+		int i = (int) player.posX >> 4;
+		int j = (int) player.posZ >> 4;
+		player.managedPosX = player.posX;
+		player.managedPosZ = player.posZ;
 
-                if (playerchunkmapentry != null)
-                {
-                    playerchunkmapentry.removePlayer(player);
-                }
-            }
-        }
+		List<ChunkPos> chunkList = new LinkedList<>();
 
-        this.players.remove(player);
-        this.markSortPending();
-    }
+		for (int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k) {
+			for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l) {
+				// this.getOrCreateEntry(k, l).addPlayer(player);
+				chunkList.add(new ChunkPos(k, l));
+			}
+		}
 
-    private boolean overlaps(int x1, int z1, int x2, int z2, int radius)
-    {
-        int i = x1 - x2;
-        int j = z1 - z2;
+		Collections.sort(chunkList, new ChunkCoordComparator(player));
+		for (ChunkPos pair : chunkList) {
+			this.getOrCreateEntry(pair.x, pair.z).addPlayer(player);
+		}
 
-        if (i >= -radius && i <= radius)
-        {
-            return j >= -radius && j <= radius;
-        }
-        else
-        {
-            return false;
-        }
-    }
+		this.players.add(player);
+		this.markSortPending();
+	}
 
-    public void updateMovingPlayer(EntityPlayerMP player)
-    {
-        int i = (int)player.posX >> 4;
-        int j = (int)player.posZ >> 4;
-        double d0 = player.managedPosX - player.posX;
-        double d1 = player.managedPosZ - player.posZ;
-        double d2 = d0 * d0 + d1 * d1;
+	public void removePlayer(EntityPlayerMP player) {
+		int i = (int) player.managedPosX >> 4;
+		int j = (int) player.managedPosZ >> 4;
 
-        if (d2 >= 64.0D)
-        {
-            int k = (int)player.managedPosX >> 4;
-            int l = (int)player.managedPosZ >> 4;
-            int i1 = this.playerViewRadius;
-            int j1 = i - k;
-            int k1 = j - l;
+		for (int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k) {
+			for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l) {
+				PlayerChunkMapEntry playerchunkmapentry = this.getEntry(k, l);
 
-            if (j1 != 0 || k1 != 0)
-            {
-                for (int l1 = i - i1; l1 <= i + i1; ++l1)
-                {
-                    for (int i2 = j - i1; i2 <= j + i1; ++i2)
-                    {
-                        if (!this.overlaps(l1, i2, k, l, i1))
-                        {
-                            this.getOrCreateEntry(l1, i2).addPlayer(player);
-                        }
+				if (playerchunkmapentry != null) {
+					playerchunkmapentry.removePlayer(player);
+				}
+			}
+		}
 
-                        if (!this.overlaps(l1 - j1, i2 - k1, i, j, i1))
-                        {
-                            PlayerChunkMapEntry playerchunkmapentry = this.getEntry(l1 - j1, i2 - k1);
+		this.players.remove(player);
+		this.markSortPending();
+	}
 
-                            if (playerchunkmapentry != null)
-                            {
-                                playerchunkmapentry.removePlayer(player);
-                            }
-                        }
-                    }
-                }
+	private boolean overlaps(int x1, int z1, int x2, int z2, int radius) {
+		int i = x1 - x2;
+		int j = z1 - z2;
 
-                player.managedPosX = player.posX;
-                player.managedPosZ = player.posZ;
-                this.markSortPending();
-            }
-        }
-    }
+		if (i >= -radius && i <= radius) {
+			return j >= -radius && j <= radius;
+		} else {
+			return false;
+		}
+	}
 
-    public boolean isPlayerWatchingChunk(EntityPlayerMP player, int chunkX, int chunkZ)
-    {
-        PlayerChunkMapEntry playerchunkmapentry = this.getEntry(chunkX, chunkZ);
-        return playerchunkmapentry != null && playerchunkmapentry.containsPlayer(player) && playerchunkmapentry.isSentToPlayers();
-    }
+	public void updateMovingPlayer(EntityPlayerMP player) {
+		int i = (int) player.posX >> 4;
+		int j = (int) player.posZ >> 4;
+		double d0 = player.managedPosX - player.posX;
+		double d1 = player.managedPosZ - player.posZ;
+		double d2 = d0 * d0 + d1 * d1;
 
-    public void setPlayerViewRadius(int radius)
-    {
-        radius = MathHelper.clamp(radius, 3, 32);
+		if (d2 >= 64.0D) {
+			int k = (int) player.managedPosX >> 4;
+			int l = (int) player.managedPosZ >> 4;
+			int i1 = this.playerViewRadius;
+			int j1 = i - k;
+			int k1 = j - l;
 
-        if (radius != this.playerViewRadius)
-        {
-            int i = radius - this.playerViewRadius;
+			List<ChunkPos> chunksToLoad = new LinkedList<>();
 
-            for (EntityPlayerMP entityplayermp : Lists.newArrayList(this.players))
-            {
-                int j = (int)entityplayermp.posX >> 4;
-                int k = (int)entityplayermp.posZ >> 4;
+			if (j1 != 0 || k1 != 0) {
+				for (int l1 = i - i1; l1 <= i + i1; ++l1) {
+					for (int i2 = j - i1; i2 <= j + i1; ++i2) {
+						if (!this.overlaps(l1, i2, k, l, i1)) {
+							// this.getOrCreateEntry(l1, i2).addPlayer(player);
+							chunksToLoad.add(new ChunkPos(l1, i2));
+						}
 
-                if (i > 0)
-                {
-                    for (int j1 = j - radius; j1 <= j + radius; ++j1)
-                    {
-                        for (int k1 = k - radius; k1 <= k + radius; ++k1)
-                        {
-                            PlayerChunkMapEntry playerchunkmapentry = this.getOrCreateEntry(j1, k1);
+						if (!this.overlaps(l1 - j1, i2 - k1, i, j, i1)) {
+							PlayerChunkMapEntry playerchunkmapentry = this.getEntry(l1 - j1, i2 - k1);
 
-                            if (!playerchunkmapentry.containsPlayer(entityplayermp))
-                            {
-                                playerchunkmapentry.addPlayer(entityplayermp);
-                            }
-                        }
-                    }
-                }
-                else
-                {
-                    for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l)
-                    {
-                        for (int i1 = k - this.playerViewRadius; i1 <= k + this.playerViewRadius; ++i1)
-                        {
-                            if (!this.overlaps(l, i1, j, k, radius))
-                            {
-                                this.getOrCreateEntry(l, i1).removePlayer(entityplayermp);
-                            }
-                        }
-                    }
-                }
-            }
+							if (playerchunkmapentry != null) {
+								playerchunkmapentry.removePlayer(player);
+							}
+						}
+					}
+				}
 
-            this.playerViewRadius = radius;
-            this.markSortPending();
-        }
-    }
+				player.managedPosX = player.posX;
+				player.managedPosZ = player.posZ;
+				this.markSortPending();
+				// CraftBukkit start - send nearest chunks first
+				Collections.sort(chunksToLoad, new ChunkCoordComparator(player));
+				for (ChunkPos pair : chunksToLoad) {
+					this.getOrCreateEntry(pair.x, pair.z).addPlayer(player);
+				}
+				// CraftBukkit end
+			}
+		}
+	}
 
-    private void markSortPending()
-    {
-        this.sortMissingChunks = true;
-        this.sortSendToPlayers = true;
-    }
+	public boolean isPlayerWatchingChunk(EntityPlayerMP player, int chunkX, int chunkZ) {
+		PlayerChunkMapEntry playerchunkmapentry = this.getEntry(chunkX, chunkZ);
+		return playerchunkmapentry != null && playerchunkmapentry.containsPlayer(player) && playerchunkmapentry.isSentToPlayers();
+	}
 
-    public static int getFurthestViewableBlock(int distance)
-    {
-        return distance * 16 - 16;
-    }
+	public void setPlayerViewRadius(int radius) {
+		radius = MathHelper.clamp(radius, 3, 32);
 
-    private static long getIndex(int p_187307_0_, int p_187307_1_)
-    {
-        return (long)p_187307_0_ + 2147483647L | (long)p_187307_1_ + 2147483647L << 32;
-    }
+		if (radius != this.playerViewRadius) {
+			int i = radius - this.playerViewRadius;
 
-    public void entryChanged(PlayerChunkMapEntry entry)
-    {
-        this.dirtyEntries.add(entry);
-    }
+			for (EntityPlayerMP entityplayermp : Lists.newArrayList(this.players)) {
+				int j = (int) entityplayermp.posX >> 4;
+				int k = (int) entityplayermp.posZ >> 4;
 
-    public void removeEntry(PlayerChunkMapEntry entry)
-    {
-        ChunkPos chunkpos = entry.getPos();
-        long i = getIndex(chunkpos.x, chunkpos.z);
-        entry.updateChunkInhabitedTime();
-        this.entryMap.remove(i);
-        this.entries.remove(entry);
-        this.dirtyEntries.remove(entry);
-        this.pendingSendToPlayers.remove(entry);
-        this.entriesWithoutChunks.remove(entry);
-        Chunk chunk = entry.getChunk();
+				if (i > 0) {
+					for (int j1 = j - radius; j1 <= j + radius; ++j1) {
+						for (int k1 = k - radius; k1 <= k + radius; ++k1) {
+							PlayerChunkMapEntry playerchunkmapentry = this.getOrCreateEntry(j1, k1);
 
-        if (chunk != null)
-        {
-            this.getWorldServer().getChunkProvider().queueUnload(chunk);
-        }
-    }
+							if (!playerchunkmapentry.containsPlayer(entityplayermp)) {
+								playerchunkmapentry.addPlayer(entityplayermp);
+							}
+						}
+					}
+				} else {
+					for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l) {
+						for (int i1 = k - this.playerViewRadius; i1 <= k + this.playerViewRadius; ++i1) {
+							if (!this.overlaps(l, i1, j, k, radius)) {
+								this.getOrCreateEntry(l, i1).removePlayer(entityplayermp);
+							}
+						}
+					}
+				}
+			}
+
+			this.playerViewRadius = radius;
+			this.markSortPending();
+		}
+	}
+
+	public void setViewDistance(EntityPlayerMP entityplayer, int i) {
+		this.setViewDistance(entityplayer, i, true);
+	}
+
+	public void setViewDistance(EntityPlayerMP entityplayer, int i, boolean markSort) {
+		i = MathHelper.clamp(i, 3, 32);
+		int oldViewDistance = entityplayer.getViewDistance();
+		if (i != oldViewDistance) {
+			int j = i - oldViewDistance;
+			int k = (int) entityplayer.posX >> 4;
+			int l = (int) entityplayer.posZ >> 4;
+			int i1;
+			int j1;
+			if (j > 0) {
+				for (i1 = k - i; i1 <= k + i; ++i1) {
+					for (j1 = l - i; j1 <= l + i; ++j1) {
+						PlayerChunkMapEntry playerchunk = this.getOrCreateEntry(i1, j1);
+						if (!playerchunk.containsPlayer(entityplayer)) {
+							playerchunk.addPlayer(entityplayer);
+						}
+					}
+				}
+			} else {
+				for (i1 = k - oldViewDistance; i1 <= k + oldViewDistance; ++i1) {
+					for (j1 = l - oldViewDistance; j1 <= l + oldViewDistance; ++j1) {
+						if (!this.overlaps(i1, j1, k, l, i)) {
+							this.getOrCreateEntry(i1, j1).removePlayer(entityplayer);
+						}
+					}
+				}
+
+				if (markSort) {
+					this.markSortPending();
+				}
+			}
+		}
+
+	}
+
+	private void markSortPending() {
+		this.sortMissingChunks = true;
+		this.sortSendToPlayers = true;
+	}
+
+	public static int getFurthestViewableBlock(int distance) {
+		return distance * 16 - 16;
+	}
+
+	private static long getIndex(int p_187307_0_, int p_187307_1_) {
+		return (long) p_187307_0_ + 2147483647L | (long) p_187307_1_ + 2147483647L << 32;
+	}
+
+	public void entryChanged(PlayerChunkMapEntry entry) {
+		this.dirtyEntries.add(entry);
+	}
+
+	public void updateViewDistance(EntityPlayerMP player, final int distanceIn) {
+		int oldViewDistance = player.getViewDistance();
+		int toSet;
+		int playerViewDistance = toSet = MathHelper.clamp(distanceIn, 3, 32);
+		if (distanceIn < 0) {
+			playerViewDistance = -1;
+			toSet = this.world.getPlayerChunkMap().getViewDistance();
+		}
+		if (toSet != oldViewDistance) {
+			this.setViewDistance(player, toSet);
+			player.setViewDistance(playerViewDistance);
+		}
+	}
+
+	public void removeEntry(PlayerChunkMapEntry entry) {
+		ChunkPos chunkpos = entry.getPos();
+		long i = getIndex(chunkpos.x, chunkpos.z);
+		entry.updateChunkInhabitedTime();
+		this.entryMap.remove(i);
+		this.entries.remove(entry);
+		this.dirtyEntries.remove(entry);
+		this.pendingSendToPlayers.remove(entry);
+		this.entriesWithoutChunks.remove(entry);
+	}
+
+	// CraftBukkit start - Sorter to load nearby chunks first
+	private static class ChunkCoordComparator implements java.util.Comparator<ChunkPos> {
+		private int x;
+		private int z;
+
+		public ChunkCoordComparator(EntityPlayer entityplayer) {
+			x = (int) entityplayer.posX >> 4;
+			z = (int) entityplayer.posZ >> 4;
+		}
+
+		public int compare(ChunkPos a, ChunkPos b) {
+			if (a.equals(b)) {
+				return 0;
+			}
+
+			// Subtract current position to set center point
+			int ax = a.x - this.x;
+			int az = a.z - this.z;
+			int bx = b.x - this.x;
+			int bz = b.z - this.z;
+
+			int result = ((ax - bx) * (ax + bx)) + ((az - bz) * (az + bz));
+			if (result != 0) {
+				return result;
+			}
+
+			if (ax < 0) {
+				if (bx < 0) {
+					return bz - az;
+				} else {
+					return -1;
+				}
+			} else {
+				if (bx < 0) {
+					return 1;
+				} else {
+					return az - bz;
+				}
+			}
+		}
+	}
+	// CraftBukkit end
 }
