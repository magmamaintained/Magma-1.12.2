--- ../src-base/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
+++ ../src-work/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.gen;
 
+import co.aikar.timings.Timing;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
@@ -24,18 +25,22 @@
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraft.world.chunk.storage.IChunkLoader;
+
+import net.minecraftforge.common.DimensionManager;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.world.ChunkUnloadEvent;
+import org.magmafoundation.magma.configuration.MagmaConfig;
 
 public class ChunkProviderServer implements IChunkProvider
 {
     private static final Logger LOGGER = LogManager.getLogger();
-    private final Set<Long> droppedChunksSet = Sets.<Long>newHashSet();
+    public final Set<Long> droppedChunksSet = Sets.<Long>newHashSet();
     public final IChunkGenerator chunkGenerator;
     public final IChunkLoader chunkLoader;
     public final Long2ObjectMap<Chunk> id2ChunkMap = new Long2ObjectOpenHashMap<Chunk>(8192);
     public final WorldServer world;
-    private final Set<Long> loadingChunks = com.google.common.collect.Sets.newHashSet();
+    private final Set<Long> loadingChunks = Sets.newHashSet();
 
     public ChunkProviderServer(WorldServer worldObjIn, IChunkLoader chunkLoaderIn, IChunkGenerator chunkGeneratorIn)
     {
@@ -83,6 +88,10 @@
         return chunk;
     }
 
+    public Chunk getChunkIfLoaded(int x, int z) {
+        return id2ChunkMap.get(ChunkPos.asLong(x, z));
+    }
+
     @Nullable
     public Chunk loadChunk(int x, int z)
     {
@@ -92,6 +101,12 @@
     @Nullable
     public Chunk loadChunk(int x, int z, @Nullable Runnable runnable)
     {
+        return getChunkAt(x, z, runnable, true);
+    }
+
+
+    public Chunk getChunkAt(int x, int z, Runnable runnable, boolean generate)
+    {
         Chunk chunk = this.getLoadedChunk(x, z);
         if (chunk == null)
         {
@@ -104,9 +119,9 @@
 
                 if (chunk != null)
                 {
-                this.id2ChunkMap.put(ChunkPos.asLong(x, z), chunk);
-                chunk.onLoad();
-                chunk.populate(this, this.chunkGenerator);
+                    this.id2ChunkMap.put(ChunkPos.asLong(x, z), chunk);
+                    chunk.onLoad();
+                    chunk.populateCB(this, this.chunkGenerator, false);
                 }
 
                 loadingChunks.remove(pos);
@@ -123,6 +138,8 @@
                     return null;
                 }
             }
+        } else if (chunk == null && generate) {
+            chunk = provideChunk(x, z);
         }
 
         // If we didn't load the chunk async and have a callback run it now
@@ -136,6 +153,7 @@
 
         if (chunk == null)
         {
+            world.timings.syncChunkLoadTimer.startTiming();
             long i = ChunkPos.asLong(x, z);
 
             try
@@ -154,7 +172,8 @@
 
             this.id2ChunkMap.put(i, chunk);
             chunk.onLoad();
-            chunk.populate(this, this.chunkGenerator);
+            chunk.populateCB(this, this.chunkGenerator, true);
+            world.timings.syncChunkLoadTimer.stopTiming();
         }
 
         return chunk;
@@ -196,7 +215,7 @@
 
     private void saveChunkData(Chunk chunkIn)
     {
-        try
+        try (Timing timed = world.timings.chunkSaveData.startTiming()) // Paper
         {
             chunkIn.setLastSaveTime(this.world.getTotalWorldTime());
             this.chunkLoader.saveChunk(this.world, chunkIn);
@@ -266,17 +285,16 @@
 
                     if (chunk != null && chunk.unloadQueued)
                     {
-                        chunk.onUnload();
-                        net.minecraftforge.common.ForgeChunkManager.putDormantChunk(ChunkPos.asLong(chunk.x, chunk.z), chunk);
-                        this.saveChunkData(chunk);
-                        this.saveChunkExtraData(chunk);
-                        this.id2ChunkMap.remove(olong);
+                        if (!unloadChunk(chunk, true)) {
+                            continue;
+                        }
                         ++i;
                     }
                 }
             }
 
-            if (this.id2ChunkMap.isEmpty()) net.minecraftforge.common.DimensionManager.unloadWorld(this.world.provider.getDimension());
+            int dim = this.world.provider.getDimension();
+            if (this.id2ChunkMap.isEmpty() && !DimensionManager.isBukkitDimension(dim)) DimensionManager.unloadWorld(dim);
 
             this.chunkLoader.chunkTick();
         }
@@ -284,6 +302,39 @@
         return false;
     }
 
+    // CraftBukkit start
+    public boolean unloadChunk(Chunk chunk, boolean save) {
+        ChunkUnloadEvent event = new ChunkUnloadEvent(chunk.bukkitChunk, save);
+        this.world.getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return false;
+        }
+        save = event.isSaveChunk();
+
+        // Update neighbor counts
+        for (int x = -2; x < 3; x++) {
+            for (int z = -2; z < 3; z++) {
+                if (x == 0 && z == 0) {
+                    continue;
+                }
+
+                Chunk neighbor = this.getChunkIfLoaded(chunk.x + x, chunk.z + z);
+                if (neighbor != null) {
+                    neighbor.setNeighborUnloaded(-x, -z);
+                    chunk.setNeighborUnloaded(x, z);
+                }
+            }
+        }
+        // Moved from unloadChunks above
+        chunk.onUnload();
+        net.minecraftforge.common.ForgeChunkManager.putDormantChunk(ChunkPos.asLong(chunk.x, chunk.z), chunk);
+        this.saveChunkData(chunk);
+        this.saveChunkExtraData(chunk);
+        this.id2ChunkMap.remove(chunk.chunkKey);
+        return true;
+    }
+    // CraftBukkit end
+
     public boolean canSave()
     {
         return !this.world.disableLevelSaving;
