--- ../src-base/minecraft/net/minecraft/world/chunk/Chunk.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/Chunk.java
@@ -1,27 +1,37 @@
 package net.minecraft.world.chunk;
 
+import com.destroystokyo.paper.MCUtil;
+import com.destroystokyo.paper.PaperLightingQueue;
+import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.base.Predicate;
-import com.google.common.collect.Maps;
 import com.google.common.collect.Queues;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
-import net.minecraft.block.ITileEntityProvider;
+import net.minecraft.block.BlockSand;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
 import net.minecraft.entity.Entity;
+import net.minecraft.entity.EntityLiving;
+import net.minecraft.entity.EnumCreatureType;
+import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Biomes;
 import net.minecraft.init.Blocks;
+import net.minecraft.inventory.IInventory;
 import net.minecraft.network.PacketBuffer;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.ClassInheritanceMultiMap;
+import net.minecraft.util.EntitySelectors;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.math.AxisAlignedBB;
@@ -40,23 +50,56 @@
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Server;
+import org.bukkit.craftbukkit.v1_12_R1.CraftChunk;
+import org.bukkit.craftbukkit.v1_12_R1.util.CraftMagicNumbers;
 
 public class Chunk implements net.minecraftforge.common.capabilities.ICapabilityProvider
 {
     private static final Logger LOGGER = LogManager.getLogger();
-    public static final ExtendedBlockStorage NULL_BLOCK_STORAGE = null;
+    public static final ExtendedBlockStorage NULL_BLOCK_STORAGE = null; public static final ExtendedBlockStorage EMPTY_CHUNK_SECTION = Chunk.NULL_BLOCK_STORAGE; // Paper - OBFHELPER
     private final ExtendedBlockStorage[] storageArrays;
     private final byte[] blockBiomeArray;
     private final int[] precipitationHeightMap;
     private final boolean[] updateSkylightColumns;
     private boolean loaded;
-    private final World world;
-    private final int[] heightMap;
+    public final World world;
+    public final int[] heightMap;
+    public Long scheduledForUnload; // Paper - delay chunk unloads
     public final int x;
     public final int z;
     private boolean isGapLightingUpdated;
-    private final Map<BlockPos, TileEntity> tileEntities;
-    private final ClassInheritanceMultiMap<Entity>[] entityLists;
+    public final Map<BlockPos, TileEntity> tileEntities;
+    public final ClassInheritanceMultiMap<Entity>[] entityLists;  // Spigot
+    // Paper start
+    public final co.aikar.util.Counter<String> entityCounts = new co.aikar.util.Counter<>();
+    public final co.aikar.util.Counter<String> tileEntityCounts = new co.aikar.util.Counter<>();
+    private class TileEntityHashMap extends java.util.HashMap<BlockPos, TileEntity> {
+        @Override
+        public TileEntity put(BlockPos key, TileEntity value) {
+            TileEntity replaced = super.put(key, value);
+            if (replaced != null) {
+                replaced.setCurrentChunk(null);
+                tileEntityCounts.decrement(replaced.getMinecraftKeyString());
+            }
+            if (value != null) {
+                value.setCurrentChunk(Chunk.this);
+                tileEntityCounts.increment(value.getMinecraftKeyString());
+            }
+            return replaced;
+        }
+        @Override
+        public TileEntity remove(Object key) {
+            TileEntity removed = super.remove(key);
+            if (removed != null) {
+                removed.setCurrentChunk(null);
+                tileEntityCounts.decrement(removed.getMinecraftKeyString());
+            }
+            return removed;
+        }
+    }
+    public final PaperLightingQueue.LightingQueue lightingQueue = new PaperLightingQueue.LightingQueue(this);
+    // Paper end
     private boolean isTerrainPopulated;
     private boolean isLightPopulated;
     private boolean ticked;
@@ -67,15 +110,52 @@
     private long inhabitedTime;
     private int queuedLightChecks;
     private final ConcurrentLinkedQueue<BlockPos> tileEntityPosQueue;
-    public boolean unloadQueued;
+    public boolean unloadQueued; public void setShouldUnload(boolean unload) { this.unloadQueued = unload; } public boolean isUnloading() { return unloadQueued; } // Paper - OBFHELPER
+    public gnu.trove.map.hash.TObjectIntHashMap<Class> entityCount = new gnu.trove.map.hash.TObjectIntHashMap<Class>(); // Spigot
 
+    // Paper start
+    // Track the number of minecarts and items
+    // Keep this synced with entitySlices.add() and entitySlices.remove()
+    private final int[] itemCounts = new int[16];
+    private final int[] inventoryEntityCounts = new int[16];
+    // Paper end
+
+    // CraftBukkit start - Neighbor loaded cache for chunk lighting and entity ticking
+    private int neighbors = 0x1 << 12;
+    public long chunkKey;
+
+    public boolean areNeighborsLoaded(final int radius) {
+        switch (radius) {
+            case 2:
+                return this.neighbors == Integer.MAX_VALUE >> 6;
+            case 1:
+                final int mask =
+                        //       x        z   offset          x        z   offset          x         z   offset
+                        (0x1 << (1 * 5 +  1 + 12)) | (0x1 << (0 * 5 +  1 + 12)) | (0x1 << (-1 * 5 +  1 + 12)) |
+                        (0x1 << (1 * 5 +  0 + 12)) | (0x1 << (0 * 5 +  0 + 12)) | (0x1 << (-1 * 5 +  0 + 12)) |
+                        (0x1 << (1 * 5 + -1 + 12)) | (0x1 << (0 * 5 + -1 + 12)) | (0x1 << (-1 * 5 + -1 + 12));
+                return (this.neighbors & mask) == mask;
+            default:
+                throw new UnsupportedOperationException(String.valueOf(radius));
+        }
+    }
+
+    public void setNeighborLoaded(final int x, final int z) {
+        this.neighbors |= 0x1 << (x * 5 + 12 + z);
+    }
+
+    public void setNeighborUnloaded(final int x, final int z) {
+        this.neighbors &= ~(0x1 << (x * 5 + 12 + z));
+    }
+    // CraftBukkit end
+
     public Chunk(World worldIn, int x, int z)
     {
         this.storageArrays = new ExtendedBlockStorage[16];
         this.blockBiomeArray = new byte[256];
         this.precipitationHeightMap = new int[256];
         this.updateSkylightColumns = new boolean[256];
-        this.tileEntities = Maps.<BlockPos, TileEntity>newHashMap();
+        this.tileEntities = new TileEntityHashMap(); // Paper
         this.queuedLightChecks = 4096;
         this.tileEntityPosQueue = Queues.<BlockPos>newConcurrentLinkedQueue();
         this.entityLists = (ClassInheritanceMultiMap[])(new ClassInheritanceMultiMap[16]);
@@ -92,8 +172,13 @@
         Arrays.fill(this.precipitationHeightMap, -999);
         Arrays.fill(this.blockBiomeArray, (byte) - 1);
         capabilities = net.minecraftforge.event.ForgeEventFactory.gatherCapabilities(this);
+        this.bukkitChunk = new CraftChunk(this);
+        this.chunkKey = ChunkPos.asLong(this.x, this.z);
     }
 
+    public org.bukkit.Chunk bukkitChunk;
+    public boolean mustSave;
+
     public Chunk(World worldIn, ChunkPrimer primer, int x, int z)
     {
         this(worldIn, x, z);
@@ -271,12 +356,20 @@
         this.isGapLightingUpdated = true;
     }
 
+
     private void recheckGaps(boolean onlyOne)
     {
         this.world.profiler.startSection("recheckGaps");
 
         if (this.world.isAreaLoaded(new BlockPos(this.x * 16 + 8, 0, this.z * 16 + 8), 16))
         {
+            this.runOrQueueLightUpdate(() -> recheckGapsPaper(onlyOne)); // Paper - Queue light update
+        }
+    }
+
+    private void recheckGapsPaper(boolean onlyOne) {
+        if (true) {
+            // Paper end
             for (int i = 0; i < 16; ++i)
             {
                 for (int j = 0; j < 16; ++j)
@@ -462,13 +555,29 @@
         return !loaded ? state.getLightOpacity() : state.getLightOpacity(world, new BlockPos(this.x << 4 | x & 15, y, this.z << 4 | z & 15));
     }
 
+    // Paper start - Optimize getBlockData to reduce instructions
     public IBlockState getBlockState(BlockPos pos)
     {
-        return this.getBlockState(pos.getX(), pos.getY(), pos.getZ());
+        return getBlockStatePaper(pos.getX(), pos.getY(), pos.getZ());
     }
 
+    public final IBlockState getBlockStatePaper(final int x, final int y, final int z) {
+        // Method body / logic copied from below
+        final int i = y >> 4;
+        if (y >= 0 && i < this.storageArrays.length && this.storageArrays[i] != null) {
+            // Inlined ChunkSection.getType() and DataPaletteBlock.a(int,int,int)
+            return this.storageArrays[i].data.get((y & 15) << 8 | (z & 15) << 4 | x & 15);
+        }
+        return Blocks.AIR.getDefaultState();
+    }
+
     public IBlockState getBlockState(final int x, final int y, final int z)
     {
+        return getBlockStatePaper(x, y, z);
+    }
+
+    public IBlockState unused(final int x, final int y, final int z) {
+        // Paper end
         if (this.world.getWorldType() == WorldType.DEBUG_ALL_BLOCK_STATES)
         {
             IBlockState iblockstate = null;
@@ -565,12 +674,12 @@
                 {
                     if (block1 != block) //Only fire block breaks when the block changes.
                     block1.breakBlock(this.world, pos, iblockstate);
-                    TileEntity te = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
+                    TileEntity te = this.getTileEntity(pos, EnumCreateEntityType.CHECK);
                     if (te != null && te.shouldRefresh(this.world, pos, iblockstate, state)) this.world.removeTileEntity(pos);
                 }
                 else if (block1.hasTileEntity(iblockstate))
                 {
-                    TileEntity te = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
+                    TileEntity te = this.getTileEntity(pos, EnumCreateEntityType.CHECK);
                     if (te != null && te.shouldRefresh(this.world, pos, iblockstate, state))
                     this.world.removeTileEntity(pos);
                 }
@@ -588,26 +697,29 @@
                 }
                 else
                 {
-                    int j1 = state.getLightOpacity(this.world, pos);
+                    this.runOrQueueLightUpdate(() -> { // Paper - Queue light update
+                        int j1 = state.getLightOpacity(this.world, pos);
 
-                    if (j1 > 0)
-                    {
-                        if (j >= i1)
+                        if (j1 > 0)
                         {
-                            this.relightBlock(i, j + 1, k);
+                            if (j >= i1)
+                            {
+                                this.relightBlock(i, j + 1, k);
+                            }
                         }
-                    }
-                    else if (j == i1 - 1)
-                    {
-                        this.relightBlock(i, j, k);
-                    }
+                        else if (j == i1 - 1)
+                        {
+                            this.relightBlock(i, j, k);
+                        }
 
-                    if (j1 != k1 && (j1 < k1 || this.getLightFor(EnumSkyBlock.SKY, pos) > 0 || this.getLightFor(EnumSkyBlock.BLOCK, pos) > 0))
-                    {
-                        this.propagateSkylightOcclusion(i, k);
-                    }
+                        if (j1 != k1 && (j1 < k1 || this.getLightFor(EnumSkyBlock.SKY, pos) > 0 || this.getLightFor(EnumSkyBlock.BLOCK, pos) > 0))
+                        {
+                            this.propagateSkylightOcclusion(i, k);
+                        }
+                    }); // Paper
                 }
 
+                // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
                 // If capturing blocks, only run block physics for TE's. Non-TE's are handled in ForgeHooks.onPlaceItemIntoWorld
                 if (!this.world.isRemote && block1 != block && (!this.world.captureBlockSnapshots || block.hasTileEntity(state)))
                 {
@@ -616,7 +728,7 @@
 
                 if (block.hasTileEntity(state))
                 {
-                    TileEntity tileentity1 = this.getTileEntity(pos, Chunk.EnumCreateEntityType.CHECK);
+                    TileEntity tileentity1 = this.getTileEntity(pos, EnumCreateEntityType.CHECK);
 
                     if (tileentity1 == null)
                     {
@@ -743,6 +855,29 @@
         entityIn.chunkCoordZ = this.z;
         this.entityLists[k].add(entityIn);
         this.markDirty(); // Forge - ensure chunks are marked to save after an entity add
+        // Paper start
+        entityIn.setCurrentChunk(this);
+        entityCounts.increment(entityIn.getMinecraftKeyString());
+        if (entityIn instanceof EntityItem) {
+            itemCounts[k]++;
+        } else if (entityIn instanceof IInventory) {
+            inventoryEntityCounts[k]++;
+        }
+        // Paper end
+        // Spigot start - increment creature type count
+        // Keep this synced up with World.a(Class)
+        if (entityIn instanceof EntityLiving) {
+            EntityLiving entityinsentient = (EntityLiving) entityIn;
+            if (entityinsentient.canDespawn() && entityinsentient.isNoDespawnRequired()) {
+                return;
+            }
+        }
+        for (EnumCreatureType creatureType : EnumCreatureType.values()) {
+            if (creatureType.getCreatureClass().isAssignableFrom(entityIn.getClass())) {
+                this.entityCount.adjustOrPutValue(creatureType.getCreatureClass(), 1, 1);
+            }
+        }
+        // Spigot end
     }
 
     public void removeEntity(Entity entityIn)
@@ -762,8 +897,35 @@
             index = this.entityLists.length - 1;
         }
 
-        this.entityLists[index].remove(entityIn);
+        // Paper start
+        if (!this.entityLists[index].remove(entityIn)) { return; }
         this.markDirty(); // Forge - ensure chunks are marked to save after entity removals
+        // Paper start
+        entityIn.setCurrentChunk(null);
+        entityCounts.decrement(entityIn.getMinecraftKeyString());
+        if (entityIn instanceof EntityItem) {
+            itemCounts[index]--;
+        } else if (entityIn instanceof IInventory) {
+            inventoryEntityCounts[index]--;
+        }
+        // Paper end
+        // Spigot start - decrement creature type count
+        // Keep this synced up with World.a(Class)
+        if (entityIn instanceof EntityLiving) {
+            EntityLiving entityinsentient = (EntityLiving) entityIn;
+            if (entityinsentient.canDespawn() && entityinsentient.isNoDespawnRequired()) {
+                return;
+            }
+        }
+        for ( EnumCreatureType creatureType : EnumCreatureType.values() )
+        {
+            if ( creatureType.getCreatureClass().isAssignableFrom( entityIn.getClass() ) )
+            {
+                this.entityCount.adjustValue( creatureType.getCreatureClass(), -1 );
+            }
+        }
+        // Spigot end
+        entityIn.setCurrentChunk(null); // Paper
     }
 
     public boolean canSeeSky(BlockPos pos)
@@ -782,10 +944,15 @@
         return !block.hasTileEntity(iblockstate) ? null : block.createTileEntity(this.world, iblockstate);
     }
 
+    @Nullable public final TileEntity getTileEntityImmediately(BlockPos pos) { return this.getTileEntity(pos, EnumCreateEntityType.IMMEDIATE); } // Paper - OBFHELPER
+
     @Nullable
-    public TileEntity getTileEntity(BlockPos pos, Chunk.EnumCreateEntityType p_177424_2_)
+    public TileEntity getTileEntity(BlockPos pos, EnumCreateEntityType p_177424_2_)
     {
-        TileEntity tileentity = this.tileEntities.get(pos);
+        TileEntity tileentity = null;
+        if (tileentity == null) {
+            tileentity = this.tileEntities.get(pos);
+        }
 
         if (tileentity != null && tileentity.isInvalid())
         {
@@ -795,12 +962,12 @@
 
         if (tileentity == null)
         {
-            if (p_177424_2_ == Chunk.EnumCreateEntityType.IMMEDIATE)
+            if (p_177424_2_ == EnumCreateEntityType.IMMEDIATE)
             {
                 tileentity = this.createNewTileEntity(pos);
                 this.world.setTileEntity(pos, tileentity);
             }
-            else if (p_177424_2_ == Chunk.EnumCreateEntityType.QUEUED)
+            else if (p_177424_2_ == EnumCreateEntityType.QUEUED)
             {
                 this.tileEntityPosQueue.add(pos.toImmutable());
             }
@@ -824,9 +991,18 @@
         if (tileEntityIn.getWorld() != this.world) //Forge don't call unless it's changed, could screw up bad mods.
         tileEntityIn.setWorld(this.world);
         tileEntityIn.setPos(pos);
-
-        if (this.getBlockState(pos).getBlock().hasTileEntity(this.getBlockState(pos)))
+        // Magma start - validate TileEntitys for corrupted data
+        Block block = null;
+        try {
+            block = this.getBlockState(pos).getBlock();
+        }
+        catch (ArrayIndexOutOfBoundsException e)
         {
+            tileEntityIn.invalidate();
+            return;
+        }
+        if (block != null && block.hasTileEntity(this.getBlockState(pos))) // Magma end
+        {
             if (this.tileEntities.containsKey(pos))
             {
                 ((TileEntity)this.tileEntities.get(pos)).invalidate();
@@ -834,6 +1010,23 @@
 
             tileEntityIn.validate();
             this.tileEntities.put(pos, tileEntityIn);
+            // CraftBukkit start
+        } else {
+            // Paper start
+            ServerInternalException e = new ServerInternalException(
+                "Attempted to place a tile entity (" + tileEntityIn + ") at " + tileEntityIn.getPos().getX() + ","
+                    + tileEntityIn.getPos().getY() + "," + tileEntityIn.getPos().getZ()
+                    + " (" + CraftMagicNumbers.getMaterial(getBlockState(pos).getBlock()) + ") where there was no entity tile!\n" +
+                    "Chunk coordinates: " + (this.x * 16) + "," + (this.z * 16));
+            e.printStackTrace();
+            ServerInternalException.reportInternalException(e);
+            if (this.world.paperConfig.removeCorruptTEs) {
+                this.removeTileEntity(tileEntityIn.getPos());
+                this.markDirty();
+                org.bukkit.Bukkit.getLogger().info("Removing corrupt tile entity");
+            }
+            // Paper end
+            // CraftBukkit end
         }
     }
 
@@ -854,17 +1047,20 @@
     {
         this.loaded = true;
         this.world.addTileEntities(this.tileEntities.values());
+        List<Entity> toAdd = new java.util.ArrayList<>(32); // Paper
 
         for (ClassInheritanceMultiMap<Entity> classinheritancemultimap : this.entityLists)
         {
-            this.world.loadEntities(com.google.common.collect.ImmutableList.copyOf(classinheritancemultimap));
+            // this.world.loadEntities(com.google.common.collect.ImmutableList.copyOf(classinheritancemultimap));  // Move down, add all entities at same time
+            toAdd.addAll(classinheritancemultimap);
         }
+        this.world.loadEntities(toAdd);  // Paper - add all at same time to avoid entities adding to world modifying slice state
         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Load(this));
     }
 
     public void onUnload()
     {
-        java.util.Arrays.stream(entityLists).forEach(multimap -> com.google.common.collect.Lists.newArrayList(multimap.getByClass(net.minecraft.entity.player.EntityPlayer.class)).forEach(player -> world.updateEntityWithOptionalForce(player, false))); // FORGE - Fix for MC-92916
+        Arrays.stream(entityLists).forEach(multimap -> com.google.common.collect.Lists.newArrayList(multimap.getByClass(net.minecraft.entity.player.EntityPlayer.class)).forEach(player -> world.updateEntityWithOptionalForce(player, false))); // FORGE - Fix for MC-92916
         this.loaded = false;
 
         for (TileEntity tileentity : this.tileEntities.values())
@@ -874,7 +1070,14 @@
 
         for (ClassInheritanceMultiMap<Entity> classinheritancemultimap : this.entityLists)
         {
-            this.world.unloadEntities(classinheritancemultimap);
+            // Do not pass along players, as doing so can get them stuck outside of time.
+            // (which for example disables inventory icon updates and prevents block breaking)
+            this.world.unloadEntities(
+                    classinheritancemultimap
+                    .stream()
+                    .filter(entity -> !(entity instanceof EntityPlayerMP))
+                    .collect(Collectors.toCollection(() -> new ClassInheritanceMultiMap<>(Entity.class)))
+            );
         }
         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Unload(this));
     }
@@ -895,6 +1098,15 @@
         {
             if (!this.entityLists[k].isEmpty())
             {
+                // Paper start - Don't search for inventories if we have none, and that is all we want
+                /*
+                 * We check if they want inventories by seeing if it is the static `EntitySelectors.HAS_INVENTORY`
+                 *
+                 * Make sure the inventory selector stays in sync.
+                 * It should be the one that checks `var1 instanceof IInventory && var1.isAlive()`
+                 */
+                if (filter == EntitySelectors.HAS_INVENTORY && inventoryEntityCounts[k] <= 0) continue;
+                // Paper end
                 for (Entity entity : this.entityLists[k])
                 {
                     if (entity.getEntityBoundingBox().intersects(aabb) && entity != entityIn)
@@ -929,8 +1141,20 @@
         i = MathHelper.clamp(i, 0, this.entityLists.length - 1);
         j = MathHelper.clamp(j, 0, this.entityLists.length - 1);
 
+        // Paper start
+        int[] counts;
+        if (EntityItem.class.isAssignableFrom(entityClass)) {
+            counts = itemCounts;
+        } else if (IInventory.class.isAssignableFrom(entityClass)) {
+            counts = inventoryEntityCounts;
+        } else {
+            counts = null;
+        }
+        // Paper end
+
         for (int k = i; k <= j; ++k)
         {
+            if (counts != null && counts[k] <= 0) continue; // Paper - Don't check a chunk if it doesn't have the type we are looking for
             for (T t : this.entityLists[k].getByClass(entityClass))
             {
                 if (t.getEntityBoundingBox().intersects(aabb) && (filter == null || filter.apply(t)))
@@ -955,7 +1179,8 @@
             return true;
         }
 
-        return this.dirty;
+        // This !flag section should say if s(isModified) or t(hasEntities), then check auto save
+        return ((this.dirty || this.hasEntities) && this.world.getTotalWorldTime() >= this.lastSaveTime + world.paperConfig.autoSavePeriod); // Paper - Make world configurable and incremental
     }
 
     public Random getRandomWithSeed(long seed)
@@ -1001,6 +1226,67 @@
         }
     }
 
+    public void populateCB(IChunkProvider chunkProvider, IChunkGenerator chunkGenrator, boolean newChunk)
+    {
+        world.timings.syncChunkLoadPostTimer.startTiming(); // Paper
+        Server server = world.getServer();
+        if (server != null) {
+            /*
+             * If it's a new world, the first few chunks are generated inside
+             * the World constructor. We can't reliably alter that, so we have
+             * no way of creating a CraftWorld/CraftServer at that point.
+             */
+            server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, newChunk));
+        }
+
+        // Update neighbor counts
+        for (int x = -2; x < 3; x++) {
+            for (int z = -2; z < 3; z++) {
+                if (x == 0 && z == 0) {
+                    continue;
+                }
+
+                Chunk neighbor = getWorld().getChunkIfLoaded(this.x + x, this.z + z);
+                if (neighbor != null) {
+                    neighbor.setNeighborLoaded(-x, -z);
+                    setNeighborLoaded(x, z);
+                }
+            }
+        }
+        world.timings.syncChunkLoadPostTimer.stopTiming(); // Paper
+        world.timings.syncChunkLoadPopulateNeighbors.startTiming(); // Paper
+        Chunk chunk = MCUtil.getLoadedChunkWithoutMarkingActive(chunkProvider, this.x, this.z - 1); // Paper
+        Chunk chunk1 = MCUtil.getLoadedChunkWithoutMarkingActive(chunkProvider, this.x + 1, this.z); // Paper
+        Chunk chunk2 = MCUtil.getLoadedChunkWithoutMarkingActive(chunkProvider, this.x, this.z + 1); // Paper
+        Chunk chunk3 = MCUtil.getLoadedChunkWithoutMarkingActive(chunkProvider, this.x - 1, this.z); // Paper
+
+        if (chunk1 != null && chunk2 != null && MCUtil.getLoadedChunkWithoutMarkingActive(chunkProvider,this.x + 1, this.z + 1) != null) // Paper
+        {
+            this.populate(chunkGenrator);
+        }
+
+        if (chunk3 != null && chunk2 != null && MCUtil.getLoadedChunkWithoutMarkingActive(chunkProvider,this.x - 1, this.z + 1) != null) // Paper
+        {
+            chunk3.populate(chunkGenrator);
+        }
+
+        if (chunk != null && chunk1 != null && MCUtil.getLoadedChunkWithoutMarkingActive(chunkProvider,this.x + 1, this.z - 1) != null) // Paper
+        {
+            chunk.populate(chunkGenrator);
+        }
+
+        if (chunk != null && chunk3 != null)
+        {
+            Chunk chunk4 = MCUtil.getLoadedChunkWithoutMarkingActive(chunkProvider,this.x - 1, this.z - 1); // Paper
+
+            if (chunk4 != null)
+            {
+                chunk4.populate(chunkGenrator);
+            }
+        }
+        world.timings.syncChunkLoadPopulateNeighbors.stopTiming(); // Paper
+    }
+
     protected void populate(IChunkGenerator generator)
     {
         if (populating != null && net.minecraftforge.common.ForgeModContainer.logCascadingWorldGeneration) logCascadingWorldGeneration();
@@ -1017,6 +1303,26 @@
         {
             this.checkLight();
             generator.populate(this.x, this.z);
+            BlockSand.fallInstantly = true;
+            Random random = new Random();
+            random.setSeed(world.getSeed());
+            long xRand = random.nextLong() / 2L * 2L + 1L;
+            long zRand = random.nextLong() / 2L * 2L + 1L;
+            random.setSeed((long) this.x * xRand + (long) this.z * zRand ^ world.getSeed());
+
+            org.bukkit.World world = this.world.getWorld();
+            if (world != null) {
+                this.world.populating = true;
+                try {
+                    for (org.bukkit.generator.BlockPopulator populator : world.getPopulators()) {
+                        populator.populate(world, random, bukkitChunk);
+                    }
+                } finally {
+                    this.world.populating = false;
+                }
+            }
+            BlockSand.fallInstantly = false;
+            this.world.getServer().getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
             net.minecraftforge.fml.common.registry.GameRegistry.generateWorld(this.x, this.z, this.world, generator, this.world.getChunkProvider());
             this.markDirty();
         }
@@ -1075,7 +1381,7 @@
         {
             BlockPos blockpos = this.tileEntityPosQueue.poll();
 
-            if (this.getTileEntity(blockpos, Chunk.EnumCreateEntityType.CHECK) == null && this.getBlockState(blockpos).getBlock().hasTileEntity(this.getBlockState(blockpos)))
+            if (this.getTileEntity(blockpos, EnumCreateEntityType.CHECK) == null && this.getBlockState(blockpos).getBlock().hasTileEntity(this.getBlockState(blockpos)))
             {
                 TileEntity tileentity = this.createNewTileEntity(blockpos);
                 this.world.setTileEntity(blockpos, tileentity);
@@ -1086,7 +1392,7 @@
 
     public boolean isPopulated()
     {
-        return this.ticked && this.isTerrainPopulated && this.isLightPopulated;
+        return !this.world.spigotConfig.randomLightUpdates || (this.ticked && this.isTerrainPopulated && this.isLightPopulated);
     }
 
     public boolean wasTicked()
@@ -1294,6 +1600,7 @@
 
     public void checkLight()
     {
+        world.timings.lightChunk.startTiming(); // Paper
         this.isTerrainPopulated = true;
         this.isLightPopulated = true;
         BlockPos blockpos = new BlockPos(this.x << 4, 0, this.z << 4);
@@ -1332,6 +1639,7 @@
                 this.isLightPopulated = false;
             }
         }
+        world.timings.lightChunk.stopTiming(); // Paper
     }
 
     private void setSkylightUpdated()
@@ -1505,7 +1813,7 @@
 
     public long getInhabitedTime()
     {
-        return this.inhabitedTime;
+        return world.paperConfig.useInhabitedTime ? this.inhabitedTime : 0; // Paper
     }
 
     public void setInhabitedTime(long newInhabitedTime)
@@ -1513,6 +1821,16 @@
         this.inhabitedTime = newInhabitedTime;
     }
 
+    // Paper start
+    public void runOrQueueLightUpdate(Runnable runnable) {
+        if (this.world.paperConfig.queueLightUpdates) {
+            lightingQueue.add(runnable);
+        } else {
+            runnable.run();
+        }
+    }
+    // Paper end
+
     public static enum EnumCreateEntityType
     {
         IMMEDIATE,
