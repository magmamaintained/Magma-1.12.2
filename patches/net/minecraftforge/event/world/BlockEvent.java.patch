--- ../src-base/minecraft/net/minecraftforge/event/world/BlockEvent.java
+++ ../src-work/minecraft/net/minecraftforge/event/world/BlockEvent.java
@@ -19,29 +19,26 @@
 
 package net.minecraftforge.event.world;
 
-import java.util.EnumSet;
-import java.util.List;
-
+import com.google.common.collect.ImmutableList;
 import net.minecraft.block.BlockPortal;
 import net.minecraft.block.state.IBlockState;
-import net.minecraft.enchantment.EnchantmentHelper;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.init.Enchantments;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.item.ItemStack;
+import net.minecraft.util.EnumFacing;
 import net.minecraft.util.EnumHand;
 import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.EnumFacing;
 import net.minecraft.world.World;
-import net.minecraftforge.common.ForgeHooks;
 import net.minecraftforge.common.util.BlockSnapshot;
 import net.minecraftforge.fml.common.eventhandler.Cancelable;
 import net.minecraftforge.fml.common.eventhandler.Event;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 
-import com.google.common.collect.ImmutableList;
-
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
+import java.util.EnumSet;
+import java.util.List;
 
 public class BlockEvent extends Event
 {
@@ -125,16 +122,17 @@
             super(world, pos, state);
             this.player = player;
 
-            if (state == null || !ForgeHooks.canHarvestBlock(state.getBlock(), player, world, pos) || // Handle empty block or player unable to break block scenario
-                (state.getBlock().canSilkHarvest(world, pos, world.getBlockState(pos), player) && EnchantmentHelper.getEnchantmentLevel(Enchantments.SILK_TOUCH, player.getHeldItemMainhand()) > 0)) // If the block is being silk harvested, the exp dropped is 0
-            {
-                this.exp = 0;
+            // Cauldron start - handle event on bukkit side
+            org.bukkit.event.block.BlockBreakEvent bukkitEvent = CraftEventFactory.callBlockBreakEvent(world, pos, state, (EntityPlayerMP) player);
+
+            if(bukkitEvent.isCancelled()){
+                this.setCanceled(true);
             }
             else
             {
-                int bonusLevel = EnchantmentHelper.getEnchantmentLevel(Enchantments.FORTUNE, player.getHeldItemMainhand());
-                this.exp = state.getBlock().getExpDrop(state, world, pos, bonusLevel);
+                this.exp = bukkitEvent.getExpToDrop();
             }
+            // Cauldron end
         }
 
         public EntityPlayer getPlayer()
@@ -204,8 +202,7 @@
      */
     @Cancelable
     @Deprecated // Remove in 1.13
-    public static class PlaceEvent extends EntityPlaceEvent
-    {
+    public static class PlaceEvent extends EntityPlaceEvent {
         private final EntityPlayer player;
         private final EnumHand hand;
 
@@ -213,17 +210,31 @@
             super(blockSnapshot, placedAgainst, player);
             this.player = player;
             this.hand = hand;
-            if (DEBUG)
-            {
+            // Cauldron start - handle event on bukkit side
+            org.bukkit.craftbukkit.block.CraftBlockState blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(getWorld(), getPos().getX(), getPos().getY(), getPos().getZ());
+            org.bukkit.event.block.BlockPlaceEvent bukkitEvent = CraftEventFactory.callBlockPlaceEvent(getWorld(), player, hand, blockstate, getPos().getX(), getPos().getY(), getPos().getZ());
+            if (bukkitEvent.isCancelled() || !bukkitEvent.canBuild()) {
+                this.setCanceled(true);
+            }
+            // Cauldron end
+            if (DEBUG) {
                 System.out.printf("Created PlaceEvent - [PlacedBlock: %s ][PlacedAgainst: %s ][ItemStack: %s ][Player: %s ][Hand: %s]\n", getPlacedBlock(), placedAgainst, player.getHeldItem(hand), player, hand);
             }
         }
 
-        public EntityPlayer getPlayer() { return player; }
+        public EntityPlayer getPlayer() {
+            return player;
+        }
+
         @Nonnull
         @Deprecated
-        public ItemStack getItemInHand() { return player.getHeldItem(hand); }
-        public EnumHand getHand() { return hand; }
+        public ItemStack getItemInHand() {
+            return player.getHeldItem(hand);
+        }
+
+        public EnumHand getHand() {
+            return hand;
+        }
     }
 
     /**
