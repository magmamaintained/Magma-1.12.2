--- ../src-base/minecraft/net/minecraftforge/common/DimensionManager.java
+++ ../src-work/minecraft/net/minecraftforge/common/DimensionManager.java
@@ -47,18 +47,24 @@
 
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.world.DimensionType;
-import net.minecraft.world.MinecraftException;
-import net.minecraft.world.World;
-import net.minecraft.world.ServerWorldEventHandler;
-import net.minecraft.world.WorldProvider;
-import net.minecraft.world.WorldServer;
-import net.minecraft.world.WorldServerMulti;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.world.*;
+import net.minecraft.world.chunk.storage.AnvilSaveHandler;
 import net.minecraft.world.storage.ISaveHandler;
+import net.minecraft.world.storage.WorldInfo;
+import net.minecraftforge.common.util.EnumHelper;
 import net.minecraftforge.event.world.WorldEvent;
+import net.minecraftforge.event.world.WorldEvent.Load;
+import net.minecraftforge.fml.common.FMLCommonHandler;
 import net.minecraftforge.fml.common.FMLLog;
 
 import javax.annotation.Nullable;
+import org.apache.commons.lang.StringUtils;
+import org.bukkit.World.Environment;
+import org.bukkit.WorldCreator;
+import org.bukkit.event.world.WorldLoadEvent;
+import org.bukkit.generator.ChunkGenerator;
+import org.magmafoundation.magma.configuration.MagmaConfig;
 
 public class DimensionManager
 {
@@ -83,6 +89,7 @@
     private static final IntSet usedIds = new IntOpenHashSet();
     private static final ConcurrentMap<World, World> weakWorldMap = new MapMaker().weakKeys().weakValues().makeMap();
     private static final Multiset<Integer> leakedWorlds = HashMultiset.create();
+    private static ArrayList<Integer> bukkitDimensions = new ArrayList<Integer>(); // used to keep track of Bukkit dimensions
 
     /**
      * Returns a list of dimensions associated with this DimensionType.
@@ -138,6 +145,12 @@
         {
             usedIds.add(id);
         }
+
+        // Magma - register Environment to Bukkit
+        if (id < -1 || id > 1) // ignore vanilla
+        {
+            registerBukkitDimension(id, type.getName());
+        }
     }
 
     /**
@@ -209,11 +222,16 @@
         {
             worlds.put(id, world);
             weakWorldMap.put(world, world);
+            // handle all worlds for bukkit
+            if(!FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.contains(world)){
+                FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.add(world);
+            }
             server.worldTickTimes.put(id, new long[100]);
             FMLLog.log.info("Loading dimension {} ({}) ({})", id, world.getWorldInfo().getWorldName(), world.getMinecraftServer());
         }
         else
         {
+            FMLCommonHandler.instance().getMinecraftServerInstance().worldServerList.remove(getWorld(id)); // Magma - remove world from our new world arraylist
             worlds.remove(id);
             server.worldTickTimes.remove(id);
             FMLLog.log.info("Unloading dimension {}", id);
@@ -258,11 +276,31 @@
         }
         MinecraftServer mcServer = overworld.getMinecraftServer();
         ISaveHandler savehandler = overworld.getSaveHandler();
-        //WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
+        WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
+        Environment env = Environment.getEnvironment(dim);
+        if (dim >= -1 && dim <= 1)
+        {
+            if ((dim == -1 && !mcServer.getAllowNether()) || (dim == 1 && !mcServer.server.getAllowEnd()))
+                return;
+        }else{
+            DimensionType type = DimensionManager.getProviderType(dim);
+            if(Environment.getEnvironment(type.getId()) == null) {
+                env = DimensionManager.registerBukkitDimension(type.getId(), type.getName());
+            }
+        }
 
-        WorldServer world = (dim == 0 ? overworld : (WorldServer)(new WorldServerMulti(mcServer, savehandler, dim, overworld, mcServer.profiler).init()));
+        String name = "DIM" + dim;
+        ChunkGenerator gen = mcServer.server.getGenerator(name);
+        if (mcServer instanceof DedicatedServer) {
+            worldSettings.setGeneratorOptions(((DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+        WorldInfo worldInfo = new WorldInfo(worldSettings, name);
+        WorldServer world = (dim == 0 ? overworld : (WorldServer)(new WorldServerMulti(mcServer, new AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true, mcServer.getDataFixer()), dim, overworld, mcServer.profiler, worldInfo, env, gen).init()));
+
+        mcServer.getPlayerList().setPlayerManager(mcServer.worldServerList.toArray(new WorldServer[0]));
         world.addEventListener(new ServerWorldEventHandler(mcServer, world));
         MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
+        mcServer.server.getPluginManager().callEvent(new WorldLoadEvent(world.getWorld()));
         if (!mcServer.isSinglePlayer())
         {
             world.getWorldInfo().setGameType(mcServer.getGameType());
@@ -354,6 +392,11 @@
     {
         WorldServer world = worlds.get(id);
         if (world == null || !canUnloadWorld(world)) return;
+        for (String dim1 : MagmaConfig.instance.autoUnloadDimensions) {
+            if (dim1.equals("*") || (StringUtils.isNumeric(dim1) && Integer.valueOf(dim1).intValue() == id)) {
+                return;
+            }
+        }
 
         if (unloadQueue.add(id))
         {
@@ -390,20 +433,7 @@
                 FMLLog.log.debug("Aborting unload for dimension {} as status changed", id);
                 continue;
             }
-            try
-            {
-                w.saveAllChunks(true, null);
-            }
-            catch (MinecraftException e)
-            {
-                FMLLog.log.error("Caught an exception while saving all chunks:", e);
-            }
-            finally
-            {
-                MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(w));
-                w.flush();
-                setWorld(id, null, w.getMinecraftServer());
-            }
+            FMLCommonHandler.instance().getMinecraftServerInstance().server.unloadWorld(w.getWorld(), true); // Magma
         }
     }
 
@@ -499,4 +529,116 @@
             return null;
         }
     }
+
+    public static WorldServer initDimension(WorldCreator creator, WorldSettings worldSettings){
+        WorldServer overworld = getWorld(0);
+        if(overworld == null){
+            throw new RuntimeException("Cannot Hotload Dim: Overworld is not Loaded!");
+        }
+
+        MinecraftServer mcServer = overworld.getMinecraftServer();
+
+        DimensionType type = DimensionType.OVERWORLD;
+        try{
+            if(creator.environment() != null){
+                type = DimensionType.getById(creator.environment().getId());
+            }
+        }catch (IllegalArgumentException e){
+
+        }
+
+        Environment env = creator.environment();
+        String name = creator.name();
+        int dim = 0;
+        // Use saved dimension from level.dat if it exists. This guarantees that after a world is created, the same dimension will be used. Fixes issues with MultiVerse
+        AnvilSaveHandler saveHandler = new AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true, mcServer.getDataFixer());
+
+        if(saveHandler.loadWorldInfo() != null){
+            int savedDim = saveHandler.loadWorldInfo().getDimension();
+            if(savedDim != 0 && savedDim != -1 && savedDim != 1){
+                dim = savedDim;
+            }
+        }
+        if (dim == 0 || worlds.containsKey(dim))
+        {
+            dim = getNextFreeDimId();
+        }
+
+        if (!isDimensionRegistered(dim)) // handle reloads properly
+        {
+            registerDimension(dim, type);
+            addBukkitDimension(dim);
+        }
+
+        if (env == null) {
+            try {
+                env = Environment.getEnvironment(DimensionManager.createProviderFor(dim).getDimension());
+            }
+            catch (Exception e)
+            {
+                // do nothing
+            }
+
+            if (env == null) {
+                env = Environment.NORMAL;
+            }
+        }
+
+        ChunkGenerator gen = creator.generator();
+        if(mcServer instanceof DedicatedServer){
+            worldSettings.setGeneratorOptions(((DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+
+        WorldInfo worldinfo = saveHandler.loadWorldInfo();
+        if (worldinfo == null) {
+            worldinfo = new WorldInfo(worldSettings,name);
+        }
+        worldinfo.setWorldName(name);
+        worldinfo.setDimension(dim);
+
+        WorldServer world = (WorldServer) new WorldServer(mcServer, saveHandler, worldinfo, dim, mcServer.profiler, env, gen).init();
+        world.initialize(worldSettings);
+
+        world.provider.setDimension(dim); // Fix for TerrainControl injecting their own WorldProvider
+        mcServer.getPlayerList().setPlayerManager(mcServer.worldServerList.toArray(new WorldServer[0]));
+
+        world.addEventListener(new ServerWorldEventHandler(mcServer, world));
+        MinecraftForge.EVENT_BUS.post(new Load(world));
+        if(!mcServer.isSinglePlayer()){
+            world.getWorldInfo().setGameType(mcServer.getGameType());
+        }
+        return world;
+    }
+
+    public static org.bukkit.World.Environment registerBukkitDimension(int dim, String worldType) {
+        Environment env = Environment.getEnvironment(dim);
+        if(env == null){
+            worldType = worldType.replace("WorldProvider","");
+            env = EnumHelper.addBukkitEnvironment(dim,worldType.toUpperCase());
+            Environment.registerEnvironment(env);
+        }
+        return env;
+    }
+
+    public static void addBukkitDimension(int dim)
+    {
+        if (!bukkitDimensions.contains(dim))
+            bukkitDimensions.add(dim);
+    }
+
+    public static void removeBukkitDimension(int dim)
+    {
+        if (bukkitDimensions.contains(dim))
+            bukkitDimensions.remove(bukkitDimensions.indexOf(dim));
+    }
+
+    public static ArrayList<Integer> getBukkitDimensionIDs()
+    {
+        return bukkitDimensions;
+    }
+
+    public static boolean isBukkitDimension(int dim)
+    {
+        return bukkitDimensions.contains(dim);
+    }
 }
