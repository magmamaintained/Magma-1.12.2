--- ../src-base/minecraft/net/minecraftforge/common/chunkio/ChunkIOExecutor.java
+++ ../src-work/minecraft/net/minecraftforge/common/chunkio/ChunkIOExecutor.java
@@ -19,25 +19,23 @@
 
 package net.minecraftforge.common.chunkio;
 
+import com.google.common.collect.Maps;
+import com.google.common.util.concurrent.ListenableFuture;
 import java.util.Iterator;
 import java.util.Map;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.ThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
+import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicInteger;
-
-import com.google.common.collect.Maps;
-
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.World;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.storage.AnvilChunkLoader;
 import net.minecraft.world.gen.ChunkProviderServer;
 import net.minecraftforge.fml.common.FMLLog;
+import org.bukkit.Bukkit;
 
 public class ChunkIOExecutor
 {
-    private static final int BASE_THREADS = 1;
+    private static final int BASE_THREADS = 2;
     private static final int PLAYERS_PER_THREAD = 50;
 
     private static final Map<QueuedChunk, ChunkIOProvider> tasks = Maps.newConcurrentMap();
@@ -49,7 +47,7 @@
             @Override
             public Thread newThread(Runnable r)
             {
-                Thread thread = new Thread(r, "Chunk I/O Executor Thread-" + count.getAndIncrement());
+                Thread thread = new Thread(r, "Forge Chunk I/O Executor Thread-" + count.getAndIncrement());
                 thread.setDaemon(true);
                 return thread;
             }
@@ -91,7 +89,21 @@
             task = new ChunkIOProvider(key, loader, provider);
             task.run();
         }
-        task.syncCallback();
+        if (Bukkit.isPrimaryThread()) {
+            task.syncCallback();
+        } else {
+            ChunkIOProvider finalTask = task;
+            ListenableFuture fTask = MinecraftServer.getServerInst().callFromMainThread(() ->
+            {
+                finalTask.syncCallback();
+                return null;
+            });
+            try {
+                fTask.get();
+            } catch (ExecutionException | InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
         return task.getChunk();
     }
 
