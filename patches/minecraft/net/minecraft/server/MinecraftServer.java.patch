--- ../src-base/minecraft/net/minecraft/server/MinecraftServer.java
+++ ../src-work/minecraft/net/minecraft/server/MinecraftServer.java
@@ -1,7 +1,11 @@
 package net.minecraft.server;
 
+import co.aikar.timings.MinecraftTimings;
+import co.aikar.timings.Timing;
+import co.aikar.timings.TimingsManager;
+import com.destroystokyo.paper.utils.CachedSizeConcurrentLinkedQueue;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Queues;
+import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.ListenableFutureTask;
@@ -15,97 +19,119 @@
 import io.netty.handler.codec.base64.Base64;
 import java.awt.GraphicsEnvironment;
 import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
+import java.io.*;
 import java.net.Proxy;
 import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
 import java.security.KeyPair;
 import java.text.SimpleDateFormat;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Date;
-import java.util.List;
-import java.util.Queue;
-import java.util.Random;
-import java.util.UUID;
+import java.util.*;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
-import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import jline.console.ConsoleReader;
+import joptsimple.OptionSet;
 import net.minecraft.advancements.AdvancementManager;
 import net.minecraft.advancements.FunctionManager;
+import net.minecraft.block.Block;
+import net.minecraft.client.Minecraft;
 import net.minecraft.command.CommandBase;
 import net.minecraft.command.ICommandManager;
 import net.minecraft.command.ICommandSender;
 import net.minecraft.command.ServerCommandManager;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.ICrashReportDetail;
+import net.minecraft.enchantment.Enchantment;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Bootstrap;
+import net.minecraft.item.Item;
 import net.minecraft.network.NetworkSystem;
 import net.minecraft.network.ServerStatusResponse;
 import net.minecraft.network.play.server.SPacketTimeUpdate;
+import net.minecraft.potion.Potion;
 import net.minecraft.profiler.ISnooperInfo;
 import net.minecraft.profiler.Profiler;
 import net.minecraft.profiler.Snooper;
 import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.PropertyManager;
 import net.minecraft.server.management.PlayerList;
 import net.minecraft.server.management.PlayerProfileCache;
-import net.minecraft.util.IProgressUpdate;
-import net.minecraft.util.IThreadListener;
-import net.minecraft.util.ITickable;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.Util;
+import net.minecraft.tileentity.BannerPattern;
+import net.minecraft.util.*;
 import net.minecraft.util.datafix.DataFixer;
 import net.minecraft.util.datafix.DataFixesManager;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TextComponentString;
-import net.minecraft.world.EnumDifficulty;
-import net.minecraft.world.GameType;
-import net.minecraft.world.MinecraftException;
-import net.minecraft.world.ServerWorldEventHandler;
-import net.minecraft.world.World;
-import net.minecraft.world.WorldServer;
-import net.minecraft.world.WorldServerDemo;
-import net.minecraft.world.WorldServerMulti;
-import net.minecraft.world.WorldSettings;
-import net.minecraft.world.WorldType;
-import net.minecraft.world.chunk.storage.AnvilSaveConverter;
+import net.minecraft.world.*;
+import net.minecraft.world.biome.Biome;
+import net.minecraft.world.chunk.storage.AnvilSaveHandler;
 import net.minecraft.world.storage.ISaveFormat;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.WorldInfo;
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.util.EnumHelper;
+import net.minecraftforge.fml.common.FMLCommonHandler;
+import net.minecraftforge.fml.common.registry.EntityRegistry;
+import net.minecraftforge.fml.common.registry.ForgeRegistries;
+import net.minecraftforge.fml.relauncher.ReflectionHelper;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import net.minecraftforge.registries.GameData;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.Sound;
+import org.bukkit.World.Environment;
+import org.bukkit.block.banner.PatternType;
+import org.bukkit.craftbukkit.v1_12_R1.CraftServer;
+import org.bukkit.craftbukkit.v1_12_R1.Main;
+import org.bukkit.craftbukkit.v1_12_R1.chunkio.ChunkIOExecutor;
+import org.bukkit.craftbukkit.v1_12_R1.enchantments.CraftEnchantment;
+import org.bukkit.craftbukkit.v1_12_R1.potion.CraftPotionEffectType;
+import org.bukkit.craftbukkit.v1_12_R1.scoreboard.CraftScoreboardManager;
+import org.bukkit.craftbukkit.v1_12_R1.util.ServerShutdownThread;
+import org.bukkit.entity.EntityType;
+import org.bukkit.potion.PotionEffectType;
+import org.lwjgl.Sys;
+import org.magmafoundation.magma.Magma;
+import org.magmafoundation.magma.Metrics;
+import org.magmafoundation.magma.Metrics.SimplePie;
+import org.magmafoundation.magma.api.ServerAPI;
+import org.magmafoundation.magma.configuration.MagmaConfig;
+import org.magmafoundation.magma.configuration.value.values.BooleanValue;
+import org.magmafoundation.magma.entity.CraftCustomEntity;
+import org.magmafoundation.magma.forge.ForgeInject;
+import org.magmafoundation.magma.patcher.PatcherManager;
+import org.spigotmc.CustomTimingsHandler;
+import org.spigotmc.SlackActivityAccountant;
 
-public abstract class MinecraftServer implements ICommandSender, Runnable, IThreadListener, ISnooperInfo
-{
-    private static final Logger field_147145_h = LogManager.getLogger();
+//import jline.console.ConsoleReader;
+
+public abstract class MinecraftServer implements ICommandSender, Runnable, IThreadListener, ISnooperInfo {
+    public static final Logger field_147145_h = LogManager.getLogger();
     public static final File field_152367_a = new File("usercache.json");
-    private final ISaveFormat field_71310_m;
+    public ISaveFormat field_71310_m;
     private final Snooper field_71307_n = new Snooper("server", this, func_130071_aq());
-    private final File field_71308_o;
+    public File field_71308_o;
     private final List<ITickable> field_71322_p = Lists.<ITickable>newArrayList();
     public final ICommandManager field_71321_q;
     public final Profiler field_71304_b = new Profiler();
-    private final NetworkSystem field_147144_o;
+    private NetworkSystem field_147144_o;
     private final ServerStatusResponse field_147147_p = new ServerStatusResponse();
     private final Random field_147146_q = new Random();
-    private final DataFixer field_184112_s;
+    public final DataFixer field_184112_s;
     @SideOnly(Side.SERVER)
     private String field_71320_r;
     private int field_71319_s = -1;
-    public WorldServer[] field_71305_c;
+    public WorldServer[] field_71305_c = new WorldServer[0];
     private PlayerList field_71318_t;
     private boolean field_71317_u = true;
     private boolean field_71316_v;
@@ -123,11 +149,11 @@
     private int field_71280_D;
     private int field_143008_E;
     public final long[] field_71311_j = new long[100];
-    public long[][] field_71312_k;
+    //public long[][] timeOfLastDimensionTick;
+    public java.util.Hashtable<Integer, long[]> worldTickTimes = new java.util.Hashtable<Integer, long[]>();
     private KeyPair field_71292_I;
     private String field_71293_J;
     private String field_71294_K;
-    @SideOnly(Side.CLIENT)
     private String field_71287_L;
     private boolean field_71288_M;
     private boolean field_71289_N;
@@ -143,164 +169,233 @@
     private final GameProfileRepository field_152365_W;
     private final PlayerProfileCache field_152366_X;
     private long field_147142_T;
-    public final Queue < FutureTask<? >> field_175589_i = Queues. < FutureTask<? >> newArrayDeque();
+    public final Queue <FutureTask<?>> field_175589_i = new CachedSizeConcurrentLinkedQueue<>(); // Paper - Make size() constant-time
     private Thread field_175590_aa;
     protected long field_175591_ab = func_130071_aq();
     @SideOnly(Side.CLIENT)
     private boolean field_184111_ab;
+    // CraftBukkit start
+    public List<WorldServer> worldServerList = new ArrayList<>();
+    public CraftServer server;
+    public OptionSet options;
+    public org.bukkit.command.ConsoleCommandSender console;
+    public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+    public ConsoleReader reader;
+    public static int currentTick = (int) (System.currentTimeMillis() / 50);
+    public Thread primaryThread;
+    public Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+    public int autosavePeriod;
+    // CraftBukkit end
+    // Spigot start
+    public final SlackActivityAccountant slackActivityAccountant = new SlackActivityAccountant();
+    // Spigot end
 
-    public MinecraftServer(File p_i47054_1_, Proxy p_i47054_2_, DataFixer p_i47054_3_, YggdrasilAuthenticationService p_i47054_4_, MinecraftSessionService p_i47054_5_, GameProfileRepository p_i47054_6_, PlayerProfileCache p_i47054_7_)
-    {
-        this.field_110456_c = p_i47054_2_;
-        this.field_152364_T = p_i47054_4_;
-        this.field_147143_S = p_i47054_5_;
-        this.field_152365_W = p_i47054_6_;
-        this.field_152366_X = p_i47054_7_;
-        this.field_71308_o = p_i47054_1_;
-        this.field_147144_o = new NetworkSystem(this);
+    // Magma start
+    public static Magma magma;
+    // Magma end
+
+    private static MinecraftServer instance;
+
+    private static Metrics metrics;
+
+    public MinecraftServer(OptionSet options, Proxy proxyIn, DataFixer dataFixerIn,
+        YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn,
+        GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn) {
+        instance = this;
+        this.field_110456_c = proxyIn;
+        this.field_152364_T = authServiceIn;
+        this.field_147143_S = sessionServiceIn;
+        this.field_152365_W = profileRepoIn;
+        this.field_152366_X = profileCacheIn;
+        // this.anvilFile = anvilFileIn;
+        //this.networkSystem = new NetworkSystem(this);
         this.field_71321_q = this.func_175582_h();
-        this.field_71310_m = new AnvilSaveConverter(p_i47054_1_, p_i47054_3_);
-        this.field_184112_s = p_i47054_3_;
+        // this.anvilConverterForAnvilFile = new AnvilSaveConverter(anvilFileIn, dataFixerIn); // CraftBukkit - moved to DedicatedServer.init
+        this.field_184112_s = dataFixerIn;
+        this.options = options;
+
+        if(metrics == null){
+            metrics = new Metrics();
+        }
+
+        magma = Magma.getInstance();
+        magma.setPatcherManager(new PatcherManager());
+        magma.getPatcherManager().init();
+
+        // Try to see if we're actually running in a terminal, disable jline if not
+        if (System.console() == null && System.getProperty("jline.terminal") == null) {
+            System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+            Main.useJline = false;
+        }
+        try {
+            (this.reader = new ConsoleReader(System.in, (OutputStream)System.out)).setExpandEvents(false);
+        }
+        catch (Throwable e) {
+            try {
+                System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+                System.setProperty("user.language", "en");
+                Main.useJline = false;
+                (this.reader = new ConsoleReader(System.in, (OutputStream)System.out)).setExpandEvents(false);
+            }
+            catch (IOException ex) {
+                MinecraftServer.field_147145_h.warn((String)null, (Throwable)ex);
+            }
+        }
+        Runtime.getRuntime().addShutdownHook(new ServerShutdownThread(this));
+        this.field_175590_aa = primaryThread = new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER,
+            this, "Server thread"); // Moved from main
     }
 
-    public ServerCommandManager func_175582_h()
-    {
+    public abstract PropertyManager getPropertyManager();
+
+    public ServerCommandManager func_175582_h() {
         return new ServerCommandManager(this);
     }
 
     public abstract boolean func_71197_b() throws IOException;
 
-    public void func_71237_c(String p_71237_1_)
-    {
-        if (this.func_71254_M().func_75801_b(p_71237_1_))
-        {
+    public void func_71237_c(String p_71237_1_) {
+        if (this.func_71254_M().func_75801_b(p_71237_1_)) {
             field_147145_h.info("Converting map!");
             this.func_71192_d("menu.convertingLevel");
-            this.func_71254_M().func_75805_a(p_71237_1_, new IProgressUpdate()
-            {
+            this.func_71254_M().func_75805_a(p_71237_1_, new IProgressUpdate() {
                 private long field_96245_b = System.currentTimeMillis();
-                public void func_73720_a(String p_73720_1_)
-                {
+
+                public void func_73720_a(String p_73720_1_) {
                 }
-                public void func_73718_a(int p_73718_1_)
-                {
-                    if (System.currentTimeMillis() - this.field_96245_b >= 1000L)
-                    {
+
+                public void func_73718_a(int p_73718_1_) {
+                    if (System.currentTimeMillis() - this.field_96245_b >= 1000L) {
                         this.field_96245_b = System.currentTimeMillis();
-                        MinecraftServer.field_147145_h.info("Converting... {}%", (int)p_73718_1_);
+                        MinecraftServer.field_147145_h.info("Converting... {}%", (int) p_73718_1_);
                     }
                 }
+
                 @SideOnly(Side.CLIENT)
-                public void func_73721_b(String p_73721_1_)
-                {
+                public void func_73721_b(String p_73721_1_) {
                 }
+
                 @SideOnly(Side.CLIENT)
-                public void func_146586_a()
-                {
+                public void func_146586_a() {
                 }
-                public void func_73719_c(String p_73719_1_)
-                {
+
+                public void func_73719_c(String p_73719_1_) {
                 }
             });
         }
     }
 
-    protected synchronized void func_71192_d(String p_71192_1_)
-    {
+    protected synchronized void func_71192_d(String p_71192_1_) {
         this.field_71298_S = p_71192_1_;
     }
 
     @Nullable
     @SideOnly(Side.CLIENT)
 
-    public synchronized String func_71195_b_()
-    {
+    public synchronized String func_71195_b_() {
         return this.field_71298_S;
     }
 
-    public void func_71247_a(String p_71247_1_, String p_71247_2_, long p_71247_3_, WorldType p_71247_5_, String p_71247_6_)
-    {
+    public void func_71247_a(String p_71247_1_, String p_71247_2_, long p_71247_3_, WorldType p_71247_5_, String p_71247_6_) {
+        ServerCommandManager vanillaCommandManager = (ServerCommandManager) this.func_71187_D();
+        vanillaCommandManager.registerVanillaCommands();
         this.func_71237_c(p_71247_1_);
         this.func_71192_d("menu.loadingLevel");
-        this.field_71305_c = new WorldServer[3];
-        this.field_71312_k = new long[this.field_71305_c.length][100];
-        ISaveHandler isavehandler = this.field_71310_m.func_75804_a(p_71247_1_, true);
-        this.func_175584_a(this.func_71270_I(), isavehandler);
-        WorldInfo worldinfo = isavehandler.func_75757_d();
-        WorldSettings worldsettings;
 
-        if (worldinfo == null)
-        {
-            if (this.func_71242_L())
-            {
-                worldsettings = WorldServerDemo.field_73071_a;
-            }
-            else
-            {
-                worldsettings = new WorldSettings(p_71247_3_, this.func_71265_f(), this.func_71225_e(), this.func_71199_h(), p_71247_5_);
-                worldsettings.func_82750_a(p_71247_6_);
+        WorldSettings worldsettings = new WorldSettings(p_71247_3_, this.func_71265_f(), this.func_71225_e(), this.func_71199_h(), p_71247_5_);
+        worldsettings.func_82750_a(p_71247_6_);
+        WorldServer world;
 
-                if (this.field_71289_N)
-                {
-                    worldsettings.func_77159_a();
+        // WorldServer overWorld = (WorldServer)(isDemo() ? new WorldServerDemo(this, new AnvilSaveHandler(server.getWorldContainer(), worldNameIn , true, this.dataFixer), worldinfo, 0, profiler).init() : new WorldServer(this, new AnvilSaveHandler(server.getWorldContainer(), worldNameIn , true, this.dataFixer), worldinfo, 0, profiler).init());
+        Integer[] dimIds = net.minecraftforge.common.DimensionManager.getStaticDimensionIDs();
+        Arrays.sort(dimIds, new Comparator<Integer>() {
+            @Override
+            public int compare(Integer o1, Integer o2) {
+                // Zero-dimension must always be the first in array!
+                if (o1 == 0) {
+                    return -1;
+                } else {
+                    return Math.max(o1, o2);
                 }
             }
-
-            worldinfo = new WorldInfo(worldsettings, p_71247_2_);
-        }
-        else
+        });
+        for (int dim : dimIds)
         {
-            worldinfo.func_76062_a(p_71247_2_);
-            worldsettings = new WorldSettings(worldinfo);
-        }
-
-        for (int i = 0; i < this.field_71305_c.length; ++i)
-        {
-            int j = 0;
-
-            if (i == 1)
-            {
-                j = -1;
+            // World validation
+            if (dim != 0) {
+                if ((dim == -1 && !this.func_71255_r()) || (dim == 1 && !server.getAllowEnd())) {
+                    continue;
+                }
             }
 
-            if (i == 2)
-            {
-                j = 1;
+            org.bukkit.World.Environment worldEnvironment = org.bukkit.World.Environment.getEnvironment(dim);
+            if (worldEnvironment == null) {
+                worldEnvironment = org.bukkit.World.Environment.getEnvironment(DimensionManager.getProviderType(dim).func_186068_a());
             }
+            String name = (dim == 0) ? p_71247_1_ : "DIM" + dim;
+            org.bukkit.generator.ChunkGenerator gen = null;
 
-            if (i == 0)
-            {
-                if (this.func_71242_L())
-                {
-                    this.field_71305_c[i] = (WorldServer)(new WorldServerDemo(this, isavehandler, worldinfo, j, this.field_71304_b)).func_175643_b();
+            if (dim == 0) {
+                ISaveHandler idatamanager = new AnvilSaveHandler(server.getWorldContainer(), p_71247_2_, true, this.field_184112_s);
+                WorldInfo worlddata = idatamanager.func_75757_d();
+                // Magma start
+
+                ForgeInject.injectForge();
+
+                if(MagmaConfig.instance.debugPrintBiomes.getValues()){
+                    for (Biome biome : ForgeRegistries.BIOMES.getValuesCollection()) {
+                        MinecraftServer.field_147145_h.info(biome.getRegistryName());
+                    }
                 }
-                else
-                {
-                    this.field_71305_c[i] = (WorldServer)(new WorldServer(this, isavehandler, worldinfo, j, this.field_71304_b)).func_175643_b();
+
+                server.loadPlugins();
+                server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+                // Magma end
+                if (worlddata == null) {
+                    worlddata = new WorldInfo(worldsettings, p_71247_2_);
                 }
+                worlddata.checkName(p_71247_2_); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
+                if (this.func_71242_L()) {
+                    world = (WorldServer) (new WorldServerDemo(this, idatamanager, worlddata, dim, this.field_71304_b)).func_175643_b();
+                } else {
+                    world = (WorldServer) (new WorldServer(this, idatamanager, worlddata, dim, this.field_71304_b, worldEnvironment, gen)).func_175643_b();
+                }
 
-                this.field_71305_c[i].func_72963_a(worldsettings);
+                world.func_72963_a(worldsettings);
+                this.server.scoreboardManager = new CraftScoreboardManager(this, world.func_96441_U());
+            } else {
+                gen = this.server.getGenerator(name);
+
+                ISaveHandler idatamanager = new AnvilSaveHandler(server.getWorldContainer(), name, true, this.field_184112_s);
+                // world =, b0 to dimension, s1 to name, added Environment and gen
+                WorldInfo worlddata = idatamanager.func_75757_d();
+                if (worlddata == null) {
+                    worlddata = new WorldInfo(worldsettings, name);
+                }
+                worlddata.checkName(name); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
+                world = (WorldServer) new WorldServerMulti(this, idatamanager, dim, this.field_71305_c[0], this.field_71304_b, worlddata, worldEnvironment, gen).func_175643_b();
             }
-            else
-            {
-                this.field_71305_c[i] = (WorldServer)(new WorldServerMulti(this, isavehandler, j, this.field_71305_c[0], this.field_71304_b)).func_175643_b();
-            }
+            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldInitEvent(world.getWorld()));
+            world.func_72954_a(new ServerWorldEventHandler(this, world));
 
-            this.field_71305_c[i].func_72954_a(new ServerWorldEventHandler(this, this.field_71305_c[i]));
-
             if (!this.func_71264_H())
             {
-                this.field_71305_c[i].func_72912_H().func_76060_a(this.func_71265_f());
+                world.func_72912_H().func_76060_a(this.func_71265_f());
             }
+            func_184103_al().func_72364_a(worldServerList.toArray(new WorldServer[worldServerList.size()]));
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(world));
         }
 
         this.field_71318_t.func_72364_a(this.field_71305_c);
         this.func_147139_a(this.func_147135_j());
         this.func_71222_d();
+        for (WorldServer worlds : this.worldServerList) {
+            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldLoadEvent(worlds.getWorld()));
+        }
+        this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
     }
 
-    public void func_71222_d()
-    {
+    public void func_71222_d() {
         int i = 16;
         int j = 4;
         int k = 192;
@@ -308,45 +403,43 @@
         int i1 = 0;
         this.func_71192_d("menu.generatingTerrain");
         int j1 = 0;
-        field_147145_h.info("Preparing start region for level 0");
-        WorldServer worldserver = this.field_71305_c[0];
-        BlockPos blockpos = worldserver.func_175694_M();
-        long k1 = func_130071_aq();
+        WorldServer worldserver = this.field_71305_c[j1];
+        MinecraftServer.field_147145_h.info("Preparing start region for level " + worldserver.dimension + " (Seed: " + worldserver.func_72905_C() + ")");
+        BlockPos blockposition = worldserver.func_175694_M();
+        long jk = func_130071_aq();
+        i = 0;
 
-        for (int l1 = -192; l1 <= 192 && this.func_71278_l(); l1 += 16)
-        {
-            for (int i2 = -192; i2 <= 192 && this.func_71278_l(); i2 += 16)
-            {
+        for (int l1 = -192; l1 <= 192 && this.func_71278_l(); l1 += 16) {
+            for (int i2 = -192; i2 <= 192 && this.func_71278_l(); i2 += 16) {
                 long j2 = func_130071_aq();
 
-                if (j2 - k1 > 1000L)
-                {
-                    this.func_71216_a_("Preparing spawn area", i1 * 100 / 625);
-                    k1 = j2;
+                if (j2 - jk > 1000L) {
+                    this.func_71216_a_("Preparing spawn area", i * 100 / 625);
+                    jk = j2;
                 }
-
-                ++i1;
-                worldserver.func_72863_F().func_186025_d(blockpos.func_177958_n() + l1 >> 4, blockpos.func_177952_p() + i2 >> 4);
+                ++i;
+                worldserver.func_72863_F().func_186025_d(blockposition.func_177958_n() + l1 >> 4,
+                    blockposition.func_177952_p() + i2 >> 4);
             }
         }
 
+        for (WorldServer world : this.worldServerList) {
+            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldLoadEvent(world.getWorld()));
+        }
+
         this.func_71243_i();
     }
 
-    public void func_175584_a(String p_175584_1_, ISaveHandler p_175584_2_)
-    {
+    public void func_175584_a(String p_175584_1_, ISaveHandler p_175584_2_) {
         File file1 = new File(p_175584_2_.func_75765_b(), "resources.zip");
 
-        if (file1.isFile())
-        {
-            try
-            {
-                this.func_180507_a_("level://" + URLEncoder.encode(p_175584_1_, StandardCharsets.UTF_8.toString()) + "/" + "resources.zip", "");
+        if (file1.isFile()) {
+            try {
+                this.func_180507_a_("level://" + URLEncoder.encode(p_175584_1_, StandardCharsets.UTF_8.toString())
+                    + "/" + "resources.zip", "");
+            } catch (UnsupportedEncodingException var5) {
+                field_147145_h.warn("Something went wrong url encoding {}", (Object) p_175584_1_);
             }
-            catch (UnsupportedEncodingException var5)
-            {
-                field_147145_h.warn("Something went wrong url encoding {}", (Object)p_175584_1_);
-            }
         }
     }
 
@@ -364,264 +457,340 @@
 
     public abstract boolean func_183002_r();
 
-    protected void func_71216_a_(String p_71216_1_, int p_71216_2_)
-    {
+    protected void func_71216_a_(String p_71216_1_, int p_71216_2_) {
         this.field_71302_d = p_71216_1_;
         this.field_71303_e = p_71216_2_;
         field_147145_h.info("{}: {}%", p_71216_1_, Integer.valueOf(p_71216_2_));
     }
 
-    protected void func_71243_i()
-    {
+    protected void func_71243_i() {
         this.field_71302_d = null;
         this.field_71303_e = 0;
+        this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
     }
 
-    public void func_71267_a(boolean p_71267_1_)
-    {
-        for (WorldServer worldserver : this.field_71305_c)
-        {
-            if (worldserver != null)
-            {
-                if (!p_71267_1_)
-                {
-                    field_147145_h.info("Saving chunks for level '{}'/{}", worldserver.func_72912_H().func_76065_j(), worldserver.field_73011_w.func_186058_p().func_186065_b());
+    public void func_71267_a(boolean p_71267_1_) {
+        for (WorldServer worldserver : this.worldServerList) {
+            if (worldserver != null) {
+                if (!p_71267_1_) {
+                    field_147145_h.info("Saving chunks for level '{}'/{}", worldserver.func_72912_H().func_76065_j(),
+                        worldserver.field_73011_w.func_186058_p().func_186065_b());
                 }
 
-                try
-                {
-                    worldserver.func_73044_a(true, (IProgressUpdate)null);
-                }
-                catch (MinecraftException minecraftexception)
-                {
+                try {
+                    worldserver.func_73044_a(true, (IProgressUpdate) null);
+                } catch (MinecraftException minecraftexception) {
                     field_147145_h.warn(minecraftexception.getMessage());
                 }
             }
         }
     }
 
-    public void func_71260_j()
+    private boolean hasStopped = false;
+    private final Object stopLock = new Object();
+
+    public void func_71260_j() throws MinecraftException
     {
+        org.spigotmc.AsyncCatcher.enabled = false; // Spigot
+        // CraftBukkit start - prevent double stopping on multiple threads
+        synchronized (stopLock) {
+            if (hasStopped)
+                return;
+            hasStopped = true;
+        }
+        // CraftBukkit end
         field_147145_h.info("Stopping server");
-
-        if (this.func_147137_ag() != null)
-        {
+        MinecraftTimings.stopServer(); // Paper
+        if (this.server != null) {
+            this.server.disablePlugins();
+        }
+        if (this.func_147137_ag() != null) {
             this.func_147137_ag().func_151268_b();
         }
 
-        if (this.field_71318_t != null)
-        {
+        if (this.field_71318_t != null) {
             field_147145_h.info("Saving players");
             this.field_71318_t.func_72389_g();
             this.field_71318_t.func_72392_r();
+            try {
+                Thread.sleep(100);
+            } catch (InterruptedException ex) {
+            } // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
         }
 
-        if (this.field_71305_c != null)
-        {
+        if (this.field_71305_c != null) {
             field_147145_h.info("Saving worlds");
 
-            for (WorldServer worldserver : this.field_71305_c)
-            {
-                if (worldserver != null)
-                {
+            for (WorldServer worldserver : this.field_71305_c) {
+                if (worldserver != null) {
                     worldserver.field_73058_d = false;
                 }
             }
 
             this.func_71267_a(false);
 
-            for (WorldServer worldserver1 : this.field_71305_c)
+            // CraftBukkit start - Handled in saveChunks
+            for (WorldServer worldserver1 : this.worldServerList)
             {
                 if (worldserver1 != null)
                 {
+                    net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(worldserver1));
                     worldserver1.func_73041_k();
                 }
             }
+            // CraftBukkit end
+
+            WorldServer[] tmp = field_71305_c;
+            for (WorldServer world : tmp) {
+                net.minecraftforge.common.DimensionManager.setWorld(world.field_73011_w.getDimension(), null, this);
+            }
         }
 
-        if (this.field_71307_n.func_76468_d())
-        {
+        if (this.field_71307_n.func_76468_d()) {
             this.field_71307_n.func_76470_e();
         }
+
+        CommandBase.func_71529_a(null); // Forge: fix MC-128561
+        // Spigot start
+        if (org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly) {
+            Object[] p = {"usercache.json"};
+            field_147145_h.info("Saving usercache.json");
+            this.field_152366_X.func_152658_c();
+        }
+        // Spigot end
     }
 
-    public boolean func_71278_l()
-    {
+    public boolean func_71278_l() {
         return this.field_71317_u;
     }
 
-    public void func_71263_m()
-    {
+    public void func_71263_m() {
         this.field_71317_u = false;
     }
 
+    public static double currentTPS;
+    public static final int TPS = 20;
+    private static final long SEC_IN_NANO = 1000000000;
+    public static final long TICK_TIME = SEC_IN_NANO / TPS;
+    private static final long MAX_CATCHUP_BUFFER = TICK_TIME * TPS * 60L;
+    private static final int SAMPLE_INTERVAL = 20;
+    public final RollingAverage tps1 = new RollingAverage(60);
+    public final RollingAverage tps5 = new RollingAverage(60 * 5);
+    public final RollingAverage tps15 = new RollingAverage(60 * 15);
+    public double[] recentTps = new double[3];
+
+    public static class RollingAverage {
+        private final int size;
+        private long time;
+        private double total;
+        private int index = 0;
+        private final double[] samples;
+        private final long[] times;
+
+        RollingAverage(int size) {
+            this.size = size;
+            this.time = size * SEC_IN_NANO;
+            this.total = TPS * SEC_IN_NANO * size;
+            this.samples = new double[size];
+            this.times = new long[size];
+            for (int i = 0; i < size; i++) {
+                this.samples[i] = TPS;
+                this.times[i] = SEC_IN_NANO;
+            }
+        }
+
+        public void add(double x, long t) {
+            time -= times[index];
+            total -= samples[index] * times[index];
+            samples[index] = x;
+            times[index] = t;
+            time += t;
+            total += x * t;
+            if (++index == size) {
+                index = 0;
+            }
+        }
+
+        public double getAverage() {
+            return total / time;
+        }
+    }
+
     public void run()
     {
         try
         {
             if (this.func_71197_b())
             {
+                FMLCommonHandler.instance().handleServerStarted();
                 this.field_175591_ab = func_130071_aq();
                 long i = 0L;
                 this.field_147147_p.func_151315_a(new TextComponentString(this.field_71286_C));
                 this.field_147147_p.func_151321_a(new ServerStatusResponse.Version("1.12.2", 340));
                 this.func_184107_a(this.field_147147_p);
 
+                // Spigot start
+                Arrays.fill( recentTps, 20 );
+                long start = System.nanoTime(), lastTick = start - TICK_TIME, catchupTime = 0, curTime, wait, tickSection = start;
                 while (this.field_71317_u)
                 {
-                    long k = func_130071_aq();
-                    long j = k - this.field_175591_ab;
-
-                    if (j > 2000L && this.field_175591_ab - this.field_71299_R >= 15000L)
-                    {
-                        field_147145_h.warn("Can't keep up! Did the system time change, or is the server overloaded? Running {}ms behind, skipping {} tick(s)", Long.valueOf(j), Long.valueOf(j / 50L));
-                        j = 2000L;
-                        this.field_71299_R = this.field_175591_ab;
+                    curTime = System.nanoTime();
+                    wait = TICK_TIME - (curTime - lastTick);
+                    if (wait > 0) {
+                        if (catchupTime < 2E6) {
+                            wait += Math.abs(catchupTime);
+                        } else if (wait < catchupTime) {
+                            catchupTime -= wait;
+                            wait = 0;
+                        } else {
+                            wait -= catchupTime;
+                            catchupTime = 0;
+                        }
                     }
-
-                    if (j < 0L)
-                    {
-                        field_147145_h.warn("Time ran backwards! Did the system time change?");
-                        j = 0L;
+                    if (wait > 0) {
+                        Thread.sleep(wait / 1000000);
+                        curTime = System.nanoTime();
+                        wait = TICK_TIME - (curTime - lastTick);
                     }
 
-                    i += j;
-                    this.field_175591_ab = k;
-
-                    if (this.field_71305_c[0].func_73056_e())
+                    catchupTime = Math.min(MAX_CATCHUP_BUFFER, catchupTime - wait);
+                    if ( ++MinecraftServer.currentTick % SAMPLE_INTERVAL == 0 )
                     {
-                        this.func_71217_p();
-                        i = 0L;
+                        final long diff = curTime - tickSection;
+                        currentTPS = 1E9 / diff * SAMPLE_INTERVAL;
+                        tps1.add(currentTPS, diff);
+                        tps5.add(currentTPS, diff);
+                        tps15.add(currentTPS, diff);
+                        // Backwards compat with bad plugins
+                        recentTps[0] = tps1.getAverage();
+                        recentTps[1] = tps5.getAverage();
+                        recentTps[2] = tps15.getAverage();
+                        tickSection = curTime;
                     }
-                    else
-                    {
-                        while (i > 50L)
-                        {
-                            i -= 50L;
-                            this.func_71217_p();
-                        }
-                    }
+                    lastTick = curTime;
 
-                    Thread.sleep(Math.max(1L, 50L - i));
+                    this.func_71217_p();
                     this.field_71296_Q = true;
                 }
+                // Spigot end
+                FMLCommonHandler.instance().handleServerStopping();
+                FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
             }
             else
             {
-                this.func_71228_a((CrashReport)null);
+                FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
+                this.func_71228_a((CrashReport) null);
             }
+        } catch (net.minecraftforge.fml.common.StartupQuery.AbortedException e) {
+            // ignore silently
+            FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
         }
         catch (Throwable throwable1)
         {
             field_147145_h.error("Encountered an unexpected exception", throwable1);
             CrashReport crashreport = null;
 
-            if (throwable1 instanceof ReportedException)
-            {
-                crashreport = this.func_71230_b(((ReportedException)throwable1).func_71575_a());
-            }
-            else
-            {
+            if (throwable1 instanceof ReportedException) {
+                crashreport = this.func_71230_b(((ReportedException) throwable1).func_71575_a());
+            } else {
                 crashreport = this.func_71230_b(new CrashReport("Exception in server tick loop", throwable1));
             }
 
-            File file1 = new File(new File(this.func_71238_n(), "crash-reports"), "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-server.txt");
+            File file1 = new File(new File(this.func_71238_n(), "crash-reports"),
+                "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-server.txt");
 
-            if (crashreport.func_147149_a(file1))
-            {
-                field_147145_h.error("This crash report has been saved to: {}", (Object)file1.getAbsolutePath());
+            if (crashreport.func_147149_a(file1)) {
+                field_147145_h.error(String.format("This crash report has been saved to: %s", file1.getAbsolutePath()));
             }
             else
             {
                 field_147145_h.error("We were unable to save this crash report to disk.");
             }
 
+            FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
             this.func_71228_a(crashreport);
-        }
-        finally
-        {
-            try
-            {
-                this.field_71316_v = true;
+        } finally {
+            try {
                 this.func_71260_j();
-            }
-            catch (Throwable throwable)
-            {
+            } catch (Throwable throwable) {
                 field_147145_h.error("Exception stopping the server", throwable);
+                FMLCommonHandler.instance().handleServerStopped();
+                this.field_71316_v = true;
+                try {
+                    this.reader.getTerminal().restore();
+                }
+                catch (Exception ex) {}
+                this.func_71240_o();
             }
             finally
             {
+                try {
+                    this.reader.getTerminal().restore();
+                }
+                catch (Exception ex2) {}
+                FMLCommonHandler.instance().handleServerStopped();
+                this.field_71316_v = true;
                 this.func_71240_o();
             }
         }
     }
 
-    public void func_184107_a(ServerStatusResponse p_184107_1_)
-    {
+    public void func_184107_a(ServerStatusResponse p_184107_1_) {
         File file1 = this.func_71209_f("server-icon.png");
 
-        if (!file1.exists())
-        {
+        if (!file1.exists()) {
             file1 = this.func_71254_M().func_186352_b(this.func_71270_I(), "icon.png");
         }
 
-        if (file1.isFile())
-        {
+        if (file1.isFile()) {
             ByteBuf bytebuf = Unpooled.buffer();
 
-            try
-            {
+            try {
                 BufferedImage bufferedimage = ImageIO.read(file1);
                 Validate.validState(bufferedimage.getWidth() == 64, "Must be 64 pixels wide");
                 Validate.validState(bufferedimage.getHeight() == 64, "Must be 64 pixels high");
                 ImageIO.write(bufferedimage, "PNG", new ByteBufOutputStream(bytebuf));
                 ByteBuf bytebuf1 = Base64.encode(bytebuf);
                 p_184107_1_.func_151320_a("data:image/png;base64," + bytebuf1.toString(StandardCharsets.UTF_8));
-            }
-            catch (Exception exception)
-            {
-                field_147145_h.error("Couldn't load server icon", (Throwable)exception);
-            }
-            finally
-            {
+                bytebuf1.release(); // Forge: fix MC-122085
+            } catch (Exception exception) {
+                field_147145_h.error("Couldn't load server icon", (Throwable) exception);
+            } finally {
                 bytebuf.release();
             }
         }
     }
 
     @SideOnly(Side.CLIENT)
-    public boolean func_184106_y()
-    {
+    public boolean func_184106_y() {
         this.field_184111_ab = this.field_184111_ab || this.func_184109_z().isFile();
         return this.field_184111_ab;
     }
 
     @SideOnly(Side.CLIENT)
-    public File func_184109_z()
-    {
+    public File func_184109_z() {
         return this.func_71254_M().func_186352_b(this.func_71270_I(), "icon.png");
     }
 
-    public File func_71238_n()
-    {
+    public File func_71238_n() {
         return new File(".");
     }
 
-    public void func_71228_a(CrashReport p_71228_1_)
-    {
+    public void func_71228_a(CrashReport p_71228_1_) {
     }
 
-    public void func_71240_o()
-    {
+    public void func_71240_o() {
     }
 
     public void func_71217_p()
     {
         long i = System.nanoTime();
+        TimingsManager.FULL_SERVER_TICK.startTiming(); // Paper
+        this.slackActivityAccountant.tickStarted(); // Spigot
+        FMLCommonHandler.instance().onPreServerTick();
         ++this.field_71315_w;
 
-        if (this.field_71295_T)
-        {
+        if (this.field_71295_T) {
             this.field_71295_T = false;
             this.field_71304_b.field_76327_a = true;
             this.field_71304_b.func_76317_a();
@@ -630,23 +799,23 @@
         this.field_71304_b.func_76320_a("root");
         this.func_71190_q();
 
-        if (i - this.field_147142_T >= 5000000000L)
-        {
+        if (i - this.field_147142_T >= 5000000000L) {
             this.field_147142_T = i;
-            this.field_147147_p.func_151319_a(new ServerStatusResponse.Players(this.func_71275_y(), this.func_71233_x()));
+            this.field_147147_p
+                .func_151319_a(new ServerStatusResponse.Players(this.func_71275_y(), this.func_71233_x()));
             GameProfile[] agameprofile = new GameProfile[Math.min(this.func_71233_x(), 12)];
             int j = MathHelper.func_76136_a(this.field_147146_q, 0, this.func_71233_x() - agameprofile.length);
 
-            for (int k = 0; k < agameprofile.length; ++k)
-            {
-                agameprofile[k] = ((EntityPlayerMP)this.field_71318_t.func_181057_v().get(j + k)).func_146103_bH();
+            for (int k = 0; k < agameprofile.length; ++k) {
+                agameprofile[k] = ((EntityPlayerMP) this.field_71318_t.func_181057_v().get(j + k)).func_146103_bH();
             }
 
             Collections.shuffle(Arrays.asList(agameprofile));
             this.field_147147_p.func_151318_b().func_151330_a(agameprofile);
+            this.field_147147_p.invalidateJson();
         }
 
-        if (this.field_71315_w % 900 == 0)
+        if (autosavePeriod > 0 && this.field_71315_w % autosavePeriod == 0) // CraftBukkit
         {
             this.field_71304_b.func_76320_a("save");
             this.field_71318_t.func_72389_g();
@@ -655,187 +824,228 @@
         }
 
         this.field_71304_b.func_76320_a("tallying");
-        this.field_71311_j[this.field_71315_w % 100] = System.nanoTime() - i;
+        // Spigot start
+        long ticksNanos;
+        this.field_71311_j[this.field_71315_w % 100] = ticksNanos = System.nanoTime() - i;
+        // Spigot end
         this.field_71304_b.func_76319_b();
         this.field_71304_b.func_76320_a("snooper");
 
-        if (!this.field_71307_n.func_76468_d() && this.field_71315_w > 100)
-        {
+        if (!this.field_71307_n.func_76468_d() && this.field_71315_w > 100) {
             this.field_71307_n.func_76463_a();
         }
 
-        if (this.field_71315_w % 6000 == 0)
-        {
+        if (this.field_71315_w % 6000 == 0) {
             this.field_71307_n.func_76471_b();
         }
 
         this.field_71304_b.func_76319_b();
         this.field_71304_b.func_76319_b();
+        this.slackActivityAccountant.tickEnded(ticksNanos);
+        FMLCommonHandler.instance().onPostServerTick();
+        TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
     }
 
     public void func_71190_q()
     {
+        MinecraftTimings.bukkitSchedulerTimer.startTiming(); // Paper
+        this.server.getScheduler().mainThreadHeartbeat(this.field_71315_w); // CraftBukkit
+        MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Paper
+        MinecraftTimings.minecraftSchedulerTimer.startTiming(); // Paper
         this.field_71304_b.func_76320_a("jobs");
 
-        synchronized (this.field_175589_i)
-        {
-            while (!this.field_175589_i.isEmpty())
-            {
-                Util.func_181617_a(this.field_175589_i.poll(), field_147145_h);
-            }
+        // Spigot start
+        FutureTask<?> entry;
+        int count = this.field_175589_i.size();
+        while (count-- > 0 && (entry = this.field_175589_i.poll()) != null) {
+            Util.func_181617_a(entry, MinecraftServer.field_147145_h);
         }
+        // Spigot end
 
+        MinecraftTimings.minecraftSchedulerTimer.stopTiming(); // Paper
+
         this.field_71304_b.func_76318_c("levels");
+        // CraftBukkit start
+        // Run tasks that are waiting on processing
+        MinecraftTimings.processQueueTimer.startTiming(); // Paper
+        while (!processQueue.isEmpty()) {
+            Runnable runnable = processQueue.remove();
+            if (runnable != null) {
+                runnable.run();
+            }
+        }
+        MinecraftTimings.processQueueTimer.stopTiming(); // Paper
 
-        for (int j = 0; j < this.field_71305_c.length; ++j)
+        MinecraftTimings.chunkIOTickTimer.startTiming(); // Paper
+        ChunkIOExecutor.tick();
+        MinecraftTimings.chunkIOTickTimer.stopTiming(); // Paper
+
+        MinecraftTimings.timeUpdateTimer.startTiming(); // Paper
+        // Send time updates to everyone, it will get the right time from the world the player is in.
+        if (this.field_71315_w % 20 == 0) {
+            for (int i = 0; i < this.func_184103_al().func_181057_v().size(); ++i) {
+                EntityPlayerMP entityplayer = (EntityPlayerMP) this.func_184103_al().func_181057_v().get(i);
+                entityplayer.field_71135_a.func_147359_a(new SPacketTimeUpdate(entityplayer.field_70170_p.func_82737_E(),
+                    entityplayer.getPlayerTime(), entityplayer.field_70170_p.func_82736_K().func_82766_b("doDaylightCycle"))); // Add support for per player time
+            }
+        }
+        MinecraftTimings.timeUpdateTimer.stopTiming(); // Paper
+        net.minecraftforge.common.chunkio.ChunkIOExecutor.tick();
+
+        for (int x = 0; x < worldServerList.size(); x++)
         {
             long i = System.nanoTime();
 
-            if (j == 0 || this.func_71255_r())
+            WorldServer worldserver = worldServerList.get(x);
+            int id = worldserver.dimension;
+
+            this.field_71304_b.func_194340_a(() ->
             {
-                WorldServer worldserver = this.field_71305_c[j];
-                this.field_71304_b.func_194340_a(() ->
-                {
-                    return worldserver.func_72912_H().func_76065_j();
-                });
+                return worldserver.func_72912_H().func_76065_j();
+            });
 
-                if (this.field_71315_w % 20 == 0)
-                {
-                    this.field_71304_b.func_76320_a("timeSync");
-                    this.field_71318_t.func_148537_a(new SPacketTimeUpdate(worldserver.func_82737_E(), worldserver.func_72820_D(), worldserver.func_82736_K().func_82766_b("doDaylightCycle")), worldserver.field_73011_w.func_186058_p().func_186068_a());
-                    this.field_71304_b.func_76319_b();
-                }
+            this.field_71304_b.func_76320_a("tick");
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().onPreWorldTick(worldserver);
 
-                this.field_71304_b.func_76320_a("tick");
+            try
+            {
+                worldserver.timings.doTick.startTiming(); // Spigot
+                worldserver.func_72835_b();
+                worldserver.timings.doTick.stopTiming(); // Spigot
+            }
+            catch (Throwable throwable1)
+            {
+                CrashReport crashreport = CrashReport.func_85055_a(throwable1, "Exception ticking world");
+                worldserver.func_72914_a(crashreport);
+                throw new ReportedException(crashreport);
+            }
 
-                try
-                {
-                    worldserver.func_72835_b();
-                }
-                catch (Throwable throwable1)
-                {
-                    CrashReport crashreport = CrashReport.func_85055_a(throwable1, "Exception ticking world");
-                    worldserver.func_72914_a(crashreport);
-                    throw new ReportedException(crashreport);
-                }
-
-                try
-                {
-                    worldserver.func_72939_s();
-                }
-                catch (Throwable throwable)
-                {
-                    CrashReport crashreport1 = CrashReport.func_85055_a(throwable, "Exception ticking world entities");
-                    worldserver.func_72914_a(crashreport1);
-                    throw new ReportedException(crashreport1);
-                }
-
-                this.field_71304_b.func_76319_b();
-                this.field_71304_b.func_76320_a("tracker");
-                worldserver.func_73039_n().func_72788_a();
-                this.field_71304_b.func_76319_b();
-                this.field_71304_b.func_76319_b();
+            try
+            {
+                worldserver.timings.tickEntities.startTiming(); // Spigot
+                worldserver.func_72939_s();
+                worldserver.timings.tickEntities.stopTiming(); // Spigot
             }
+            catch (Throwable throwable)
+            {
+                CrashReport crashreport1 = CrashReport.func_85055_a(throwable, "Exception ticking world entities");
+                worldserver.func_72914_a(crashreport1);
+                throw new ReportedException(crashreport1);
+            }
 
-            this.field_71312_k[j][this.field_71315_w % 100] = System.nanoTime() - i;
+            net.minecraftforge.fml.common.FMLCommonHandler.instance().onPostWorldTick(worldserver);
+            this.field_71304_b.func_76319_b();
+            this.field_71304_b.func_76320_a("tracker");
+            worldserver.func_73039_n().func_72788_a();
+            this.field_71304_b.func_76319_b();
+            this.field_71304_b.func_76319_b();
+            worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions
+
+            worldTickTimes.get(id)[this.field_71315_w % 100] = System.nanoTime() - i;
         }
 
+        this.field_71304_b.func_76318_c("dim_unloading");
+        DimensionManager.unloadWorlds(worldTickTimes);
         this.field_71304_b.func_76318_c("connection");
+        MinecraftTimings.connectionTimer.startTiming(); // Spigot
         this.func_147137_ag().func_151269_c();
+        MinecraftTimings.connectionTimer.stopTiming(); // Spigot
         this.field_71304_b.func_76318_c("players");
+        MinecraftTimings.playerListTimer.startTiming(); // Spigot
         this.field_71318_t.func_72374_b();
+        MinecraftTimings.playerListTimer.stopTiming(); // Spigot
         this.field_71304_b.func_76318_c("commandFunctions");
+        MinecraftTimings.commandFunctionsTimer.startTiming(); // Spigot
         this.func_193030_aL().func_73660_a();
+        MinecraftTimings.commandFunctionsTimer.stopTiming(); // Spigot
         this.field_71304_b.func_76318_c("tickables");
 
-        for (int k = 0; k < this.field_71322_p.size(); ++k)
-        {
-            ((ITickable)this.field_71322_p.get(k)).func_73660_a();
+        MinecraftTimings.tickablesTimer.startTiming(); // Spigot
+        for (int k = 0; k < this.field_71322_p.size(); ++k) {
+            ((ITickable) this.field_71322_p.get(k)).func_73660_a();
         }
+        MinecraftTimings.tickablesTimer.stopTiming(); // Spigot
 
         this.field_71304_b.func_76319_b();
     }
 
-    public boolean func_71255_r()
-    {
+    public boolean func_71255_r() {
         return true;
     }
 
-    public void func_71256_s()
-    {
-        this.field_175590_aa = new Thread(this, "Server thread");
-        this.field_175590_aa.start();
+    public void func_71256_s() {
+        /* CraftBukkit start - prevent abuse
+        net.minecraftforge.fml.common.StartupQuery.reset();
+        this.serverThread = new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, this, "Server thread");
+        this.serverThread.start();
+        // CraftBukkit end */
     }
 
-    public File func_71209_f(String p_71209_1_)
-    {
+    public File func_71209_f(String p_71209_1_) {
         return new File(this.func_71238_n(), p_71209_1_);
     }
 
-    public void func_71236_h(String p_71236_1_)
-    {
+    public void func_71236_h(String p_71236_1_) {
         field_147145_h.warn(p_71236_1_);
     }
 
     public WorldServer func_71218_a(int p_71218_1_)
     {
-        if (p_71218_1_ == -1)
+        WorldServer ret = net.minecraftforge.common.DimensionManager.getWorld(p_71218_1_, true);
+        if (ret == null)
         {
-            return this.field_71305_c[1];
+            net.minecraftforge.common.DimensionManager.initDimension(p_71218_1_);
+            ret = net.minecraftforge.common.DimensionManager.getWorld(p_71218_1_);
         }
-        else
-        {
-            return p_71218_1_ == 1 ? this.field_71305_c[2] : this.field_71305_c[0];
-        }
+        return ret;
     }
 
-    public String func_71249_w()
-    {
+    public WorldServer getWorldServer(int i) {
+        WorldServer world = func_71218_a(i);
+        return world != null ? world : field_71305_c[0];
+    }
+
+    public String func_71249_w() {
         return "1.12.2";
     }
 
-    public int func_71233_x()
-    {
+    public int func_71233_x() {
         return this.field_71318_t.func_72394_k();
     }
 
-    public int func_71275_y()
-    {
+    public int func_71275_y() {
         return this.field_71318_t.func_72352_l();
     }
 
-    public String[] func_71213_z()
-    {
+    public String[] func_71213_z() {
         return this.field_71318_t.func_72369_d();
     }
 
-    public GameProfile[] func_152357_F()
-    {
+    public GameProfile[] func_152357_F() {
         return this.field_71318_t.func_152600_g();
     }
 
-    public String getServerModName()
-    {
-        return "vanilla";
+    public String getServerModName() {
+        // TODO: Should we change this for CraftBukkit's server name?
+//        return net.minecraftforge.fml.common.FMLCommonHandler.instance().getModName();
+        return Magma.getName();
     }
 
-    public CrashReport func_71230_b(CrashReport p_71230_1_)
-    {
-        p_71230_1_.func_85056_g().func_189529_a("Profiler Position", new ICrashReportDetail<String>()
-        {
-            public String call() throws Exception
-            {
-                return MinecraftServer.this.field_71304_b.field_76327_a ? MinecraftServer.this.field_71304_b.func_76322_c() : "N/A (disabled)";
+    public CrashReport func_71230_b(CrashReport p_71230_1_) {
+        p_71230_1_.func_85056_g().func_189529_a("Profiler Position", new ICrashReportDetail<String>() {
+            public String call() throws Exception {
+                return MinecraftServer.this.field_71304_b.field_76327_a
+                    ? MinecraftServer.this.field_71304_b.func_76322_c()
+                    : "N/A (disabled)";
             }
         });
 
-        if (this.field_71318_t != null)
-        {
-            p_71230_1_.func_85056_g().func_189529_a("Player Count", new ICrashReportDetail<String>()
-            {
-                public String call()
-                {
-                    return MinecraftServer.this.field_71318_t.func_72394_k() + " / " + MinecraftServer.this.field_71318_t.func_72352_l() + "; " + MinecraftServer.this.field_71318_t.func_181057_v();
+        if (this.field_71318_t != null) {
+            p_71230_1_.func_85056_g().func_189529_a("Player Count", new ICrashReportDetail<String>() {
+                public String call() {
+                    return MinecraftServer.this.field_71318_t.func_72394_k() + " / "
+                        + MinecraftServer.this.field_71318_t.func_72352_l() + "; "
+                        + MinecraftServer.this.field_71318_t.func_181057_v();
                 }
             });
         }
@@ -843,145 +1053,115 @@
         return p_71230_1_;
     }
 
-    public List<String> func_184104_a(ICommandSender p_184104_1_, String p_184104_2_, @Nullable BlockPos p_184104_3_, boolean p_184104_4_)
-    {
-        List<String> list = Lists.<String>newArrayList();
+    public List<String> func_184104_a(ICommandSender p_184104_1_, String p_184104_2_, @Nullable BlockPos p_184104_3_,
+        boolean p_184104_4_) {
+        Set<String> completionsSet = Sets.newHashSet(server.tabComplete(p_184104_1_, p_184104_2_, p_184104_3_, p_184104_4_));
         boolean flag = p_184104_2_.startsWith("/");
 
-        if (flag)
-        {
+        if (flag) {
             p_184104_2_ = p_184104_2_.substring(1);
         }
 
-        if (!flag && !p_184104_4_)
-        {
+        if (!flag && !p_184104_4_) {
             String[] astring = p_184104_2_.split(" ", -1);
             String s2 = astring[astring.length - 1];
 
-            for (String s1 : this.field_71318_t.func_72369_d())
-            {
-                if (CommandBase.func_71523_a(s2, s1))
-                {
-                    list.add(s1);
+            for (String s1 : this.field_71318_t.func_72369_d()) {
+                if (CommandBase.func_71523_a(s2, s1)) {
+                    completionsSet.add(s1);
                 }
             }
-
-            return list;
-        }
-        else
-        {
+        } else {
             boolean flag1 = !p_184104_2_.contains(" ");
             List<String> list1 = this.field_71321_q.func_180524_a(p_184104_1_, p_184104_2_, p_184104_3_);
 
-            if (!list1.isEmpty())
-            {
-                for (String s : list1)
-                {
-                    if (flag1 && !p_184104_4_)
-                    {
-                        list.add("/" + s);
+            if (!list1.isEmpty()) {
+                for (String s : list1) {
+                    if (flag1 && !p_184104_4_) {
+                        completionsSet.add("/" + s);
+                    } else {
+                        completionsSet.add(s);
                     }
-                    else
-                    {
-                        list.add(s);
-                    }
                 }
             }
-
-            return list;
         }
+        List<String> finalCompletionsList = new ArrayList<>(completionsSet);
+        Collections.sort(finalCompletionsList);
+        return finalCompletionsList;
     }
 
-    public boolean func_175578_N()
-    {
-        return this.field_71308_o != null;
+    public boolean func_175578_N() {
+        // return this.anvilFile != null;
+        return true; // CraftBukkit
     }
 
-    public String func_70005_c_()
-    {
+    public String func_70005_c_() {
         return "Server";
     }
 
-    public void func_145747_a(ITextComponent p_145747_1_)
-    {
+    public void func_145747_a(ITextComponent p_145747_1_) {
         field_147145_h.info(p_145747_1_.func_150260_c());
     }
 
-    public boolean func_70003_b(int p_70003_1_, String p_70003_2_)
-    {
+    public boolean func_70003_b(int p_70003_1_, String p_70003_2_) {
         return true;
     }
 
-    public ICommandManager func_71187_D()
+    public boolean canUseCommand(int permLevel, String commandName, String perm)
     {
+        return true;
+    }
+
+    public ICommandManager func_71187_D() {
         return this.field_71321_q;
     }
 
-    public KeyPair func_71250_E()
-    {
+    public KeyPair func_71250_E() {
         return this.field_71292_I;
     }
 
-    public String func_71214_G()
-    {
+    public String func_71214_G() {
         return this.field_71293_J;
     }
 
-    public void func_71224_l(String p_71224_1_)
-    {
+    public void func_71224_l(String p_71224_1_) {
         this.field_71293_J = p_71224_1_;
     }
 
-    public boolean func_71264_H()
-    {
+    public boolean func_71264_H() {
         return this.field_71293_J != null;
     }
 
-    public String func_71270_I()
-    {
+    public String func_71270_I() {
         return this.field_71294_K;
     }
 
-    public void func_71261_m(String p_71261_1_)
-    {
+    public void func_71261_m(String p_71261_1_) {
         this.field_71294_K = p_71261_1_;
     }
 
-    @SideOnly(Side.CLIENT)
-    public void func_71246_n(String p_71246_1_)
-    {
+    public void func_71246_n(String p_71246_1_) {
         this.field_71287_L = p_71246_1_;
     }
 
-    @SideOnly(Side.CLIENT)
-    public String func_71221_J()
-    {
+    public String func_71221_J() {
         return this.field_71287_L;
     }
 
-    public void func_71253_a(KeyPair p_71253_1_)
-    {
+    public void func_71253_a(KeyPair p_71253_1_) {
         this.field_71292_I = p_71253_1_;
     }
 
-    public void func_147139_a(EnumDifficulty p_147139_1_)
-    {
-        for (WorldServer worldserver1 : this.field_71305_c)
-        {
-            if (worldserver1 != null)
-            {
-                if (worldserver1.func_72912_H().func_76093_s())
-                {
+    public void func_147139_a(EnumDifficulty p_147139_1_) {
+        for (WorldServer worldserver1 : this.worldServerList) {
+            if (worldserver1 != null) {
+                if (worldserver1.func_72912_H().func_76093_s()) {
                     worldserver1.func_72912_H().func_176144_a(EnumDifficulty.HARD);
                     worldserver1.func_72891_a(true, true);
-                }
-                else if (this.func_71264_H())
-                {
+                } else if (this.func_71264_H()) {
                     worldserver1.func_72912_H().func_176144_a(p_147139_1_);
                     worldserver1.func_72891_a(worldserver1.func_175659_aa() != EnumDifficulty.PEACEFUL, true);
-                }
-                else
-                {
+                } else {
                     worldserver1.func_72912_H().func_176144_a(p_147139_1_);
                     worldserver1.func_72891_a(this.func_71193_K(), this.field_71324_y);
                 }
@@ -989,80 +1169,75 @@
         }
     }
 
-    public boolean func_71193_K()
-    {
+    public boolean func_71193_K() {
         return true;
     }
 
-    public boolean func_71242_L()
-    {
+    public boolean func_71242_L() {
         return this.field_71288_M;
     }
 
-    public void func_71204_b(boolean p_71204_1_)
-    {
+    public void func_71204_b(boolean p_71204_1_) {
         this.field_71288_M = p_71204_1_;
     }
 
-    public void func_71194_c(boolean p_71194_1_)
-    {
+    public void func_71194_c(boolean p_71194_1_) {
         this.field_71289_N = p_71194_1_;
     }
 
-    public ISaveFormat func_71254_M()
-    {
+    public ISaveFormat func_71254_M() {
         return this.field_71310_m;
     }
 
-    public String func_147133_T()
-    {
+    public String func_147133_T() {
         return this.field_147141_M;
     }
 
-    public String func_175581_ab()
-    {
+    public String func_175581_ab() {
         return this.field_175588_P;
     }
 
-    public void func_180507_a_(String p_180507_1_, String p_180507_2_)
-    {
+    public void func_180507_a_(String p_180507_1_, String p_180507_2_) {
         this.field_147141_M = p_180507_1_;
         this.field_175588_P = p_180507_2_;
     }
 
-    public void func_70000_a(Snooper p_70000_1_)
-    {
+    public void func_70000_a(Snooper p_70000_1_) {
         p_70000_1_.func_152768_a("whitelist_enabled", Boolean.valueOf(false));
         p_70000_1_.func_152768_a("whitelist_count", Integer.valueOf(0));
 
-        if (this.field_71318_t != null)
-        {
+        if (this.field_71318_t != null) {
             p_70000_1_.func_152768_a("players_current", Integer.valueOf(this.func_71233_x()));
             p_70000_1_.func_152768_a("players_max", Integer.valueOf(this.func_71275_y()));
-            p_70000_1_.func_152768_a("players_seen", Integer.valueOf(this.field_71318_t.func_72373_m().length));
+            p_70000_1_.func_152768_a("players_seen",
+                Integer.valueOf(this.field_71318_t.func_72373_m().length));
         }
 
         p_70000_1_.func_152768_a("uses_auth", Boolean.valueOf(this.field_71325_x));
         p_70000_1_.func_152768_a("gui_state", this.func_71279_ae() ? "enabled" : "disabled");
-        p_70000_1_.func_152768_a("run_time", Long.valueOf((func_130071_aq() - p_70000_1_.func_130105_g()) / 60L * 1000L));
-        p_70000_1_.func_152768_a("avg_tick_ms", Integer.valueOf((int)(MathHelper.func_76127_a(this.field_71311_j) * 1.0E-6D)));
+        p_70000_1_.func_152768_a("run_time",
+            Long.valueOf((func_130071_aq() - p_70000_1_.func_130105_g()) / 60L * 1000L));
+        p_70000_1_.func_152768_a("avg_tick_ms",
+            Integer.valueOf((int) (MathHelper.func_76127_a(this.field_71311_j) * 1.0E-6D)));
         int l = 0;
 
-        if (this.field_71305_c != null)
-        {
-            for (WorldServer worldserver1 : this.field_71305_c)
-            {
-                if (worldserver1 != null)
-                {
+        if (this.worldServerList != null) {
+            for (WorldServer worldserver1 : this.worldServerList) {
+                if (worldserver1 != null) {
                     WorldInfo worldinfo = worldserver1.func_72912_H();
-                    p_70000_1_.func_152768_a("world[" + l + "][dimension]", Integer.valueOf(worldserver1.field_73011_w.func_186058_p().func_186068_a()));
+                    p_70000_1_.func_152768_a("world[" + l + "][dimension]",
+                        Integer.valueOf(worldserver1.field_73011_w.func_186058_p().func_186068_a()));
                     p_70000_1_.func_152768_a("world[" + l + "][mode]", worldinfo.func_76077_q());
                     p_70000_1_.func_152768_a("world[" + l + "][difficulty]", worldserver1.func_175659_aa());
-                    p_70000_1_.func_152768_a("world[" + l + "][hardcore]", Boolean.valueOf(worldinfo.func_76093_s()));
-                    p_70000_1_.func_152768_a("world[" + l + "][generator_name]", worldinfo.func_76067_t().func_77127_a());
-                    p_70000_1_.func_152768_a("world[" + l + "][generator_version]", Integer.valueOf(worldinfo.func_76067_t().func_77131_c()));
+                    p_70000_1_.func_152768_a("world[" + l + "][hardcore]",
+                        Boolean.valueOf(worldinfo.func_76093_s()));
+                    p_70000_1_.func_152768_a("world[" + l + "][generator_name]",
+                        worldinfo.func_76067_t().func_77127_a());
+                    p_70000_1_.func_152768_a("world[" + l + "][generator_version]",
+                        Integer.valueOf(worldinfo.func_76067_t().func_77131_c()));
                     p_70000_1_.func_152768_a("world[" + l + "][height]", Integer.valueOf(this.field_71280_D));
-                    p_70000_1_.func_152768_a("world[" + l + "][chunks_loaded]", Integer.valueOf(worldserver1.func_72863_F().func_73152_e()));
+                    p_70000_1_.func_152768_a("world[" + l + "][chunks_loaded]",
+                        Integer.valueOf(worldserver1.func_72863_F().func_73152_e()));
                     ++l;
                 }
             }
@@ -1071,228 +1246,193 @@
         p_70000_1_.func_152768_a("worlds", Integer.valueOf(l));
     }
 
-    public void func_70001_b(Snooper p_70001_1_)
-    {
+    public void func_70001_b(Snooper p_70001_1_) {
         p_70001_1_.func_152767_b("singleplayer", Boolean.valueOf(this.func_71264_H()));
         p_70001_1_.func_152767_b("server_brand", this.getServerModName());
         p_70001_1_.func_152767_b("gui_supported", GraphicsEnvironment.isHeadless() ? "headless" : "supported");
         p_70001_1_.func_152767_b("dedicated", Boolean.valueOf(this.func_71262_S()));
     }
 
-    public boolean func_70002_Q()
-    {
+    public boolean func_70002_Q() {
         return true;
     }
 
     public abstract boolean func_71262_S();
 
-    public boolean func_71266_T()
-    {
-        return this.field_71325_x;
+    public boolean func_71266_T() {
+        // return this.onlineMode;
+        return server.getOnlineMode(); // CraftBukkit
     }
 
-    public void func_71229_d(boolean p_71229_1_)
-    {
+    public void func_71229_d(boolean p_71229_1_) {
         this.field_71325_x = p_71229_1_;
     }
 
-    public boolean func_190518_ac()
-    {
+    public boolean func_190518_ac() {
         return this.field_190519_A;
     }
 
-    public boolean func_71268_U()
-    {
+    public boolean func_71268_U() {
         return this.field_71324_y;
     }
 
-    public void func_71251_e(boolean p_71251_1_)
-    {
+    public void func_71251_e(boolean p_71251_1_) {
         this.field_71324_y = p_71251_1_;
     }
 
-    public boolean func_71220_V()
-    {
+    public boolean func_71220_V() {
         return this.field_71323_z;
     }
 
     public abstract boolean func_181035_ah();
 
-    public void func_71257_f(boolean p_71257_1_)
-    {
+    public void func_71257_f(boolean p_71257_1_) {
         this.field_71323_z = p_71257_1_;
     }
 
-    public boolean func_71219_W()
-    {
+    public boolean func_71219_W() {
         return this.field_71284_A;
     }
 
-    public void func_71188_g(boolean p_71188_1_)
-    {
+    public void func_71188_g(boolean p_71188_1_) {
         this.field_71284_A = p_71188_1_;
     }
 
-    public boolean func_71231_X()
-    {
+    public boolean func_71231_X() {
         return this.field_71285_B;
     }
 
-    public void func_71245_h(boolean p_71245_1_)
-    {
+    public void func_71245_h(boolean p_71245_1_) {
         this.field_71285_B = p_71245_1_;
     }
 
     public abstract boolean func_82356_Z();
 
-    public String func_71273_Y()
-    {
+    public String func_71273_Y() {
         return this.field_71286_C;
     }
 
-    public void func_71205_p(String p_71205_1_)
-    {
+    public void func_71205_p(String p_71205_1_) {
         this.field_71286_C = p_71205_1_;
     }
 
-    public int func_71207_Z()
-    {
+    public int func_71207_Z() {
         return this.field_71280_D;
     }
 
-    public void func_71191_d(int p_71191_1_)
-    {
+    public void func_71191_d(int p_71191_1_) {
         this.field_71280_D = p_71191_1_;
     }
 
-    public boolean func_71241_aa()
-    {
+    public boolean func_71241_aa() {
         return this.field_71316_v;
     }
 
-    public PlayerList func_184103_al()
-    {
+    public PlayerList func_184103_al() {
         return this.field_71318_t;
     }
 
-    public void func_184105_a(PlayerList p_184105_1_)
-    {
+    public void func_184105_a(PlayerList p_184105_1_) {
         this.field_71318_t = p_184105_1_;
     }
 
-    public void func_71235_a(GameType p_71235_1_)
-    {
-        for (WorldServer worldserver1 : this.field_71305_c)
-        {
+    public void func_71235_a(GameType p_71235_1_) {
+        for (WorldServer worldserver1 : this.worldServerList) {
             worldserver1.func_72912_H().func_76060_a(p_71235_1_);
         }
     }
 
-    public NetworkSystem func_147137_ag()
+    // Spigot Start
+    public NetworkSystem getServerConnection()
     {
         return this.field_147144_o;
     }
 
-    @SideOnly(Side.CLIENT)
-    public boolean func_71200_ad()
+    public NetworkSystem func_147137_ag()
     {
+        return this.field_147144_o == null ? this.field_147144_o = new NetworkSystem(this) : this.field_147144_o; // Spigot
+    }
+
+    @SideOnly(Side.CLIENT)
+    public boolean func_71200_ad() {
         return this.field_71296_Q;
     }
 
-    public boolean func_71279_ae()
-    {
+    public boolean func_71279_ae() {
         return false;
     }
 
     public abstract String func_71206_a(GameType p_71206_1_, boolean p_71206_2_);
 
-    public int func_71259_af()
-    {
+    public int func_71259_af() {
         return this.field_71315_w;
     }
 
-    public void func_71223_ag()
-    {
+    public void func_71223_ag() {
         this.field_71295_T = true;
     }
 
     @SideOnly(Side.CLIENT)
-    public Snooper func_80003_ah()
-    {
+    public Snooper func_80003_ah() {
         return this.field_71307_n;
     }
 
-    public World func_130014_f_()
-    {
-        return this.field_71305_c[0];
+    public World func_130014_f_() {
+        // return this.worlds[0];
+        return this.field_71305_c[0]; // CraftBukkit
     }
 
-    public boolean func_175579_a(World p_175579_1_, BlockPos p_175579_2_, EntityPlayer p_175579_3_)
-    {
+    public boolean func_175579_a(World p_175579_1_, BlockPos p_175579_2_, EntityPlayer p_175579_3_) {
         return false;
     }
 
-    public boolean func_104056_am()
-    {
+    public boolean func_104056_am() {
         return this.field_104057_T;
     }
 
-    public Proxy func_110454_ao()
-    {
+    public Proxy func_110454_ao() {
         return this.field_110456_c;
     }
 
-    public static long func_130071_aq()
-    {
+    public static long func_130071_aq() {
         return System.currentTimeMillis();
     }
 
-    public int func_143007_ar()
-    {
+    public int func_143007_ar() {
         return this.field_143008_E;
     }
 
-    public void func_143006_e(int p_143006_1_)
-    {
+    public void func_143006_e(int p_143006_1_) {
         this.field_143008_E = p_143006_1_;
     }
 
-    public MinecraftSessionService func_147130_as()
-    {
+    public MinecraftSessionService func_147130_as() {
         return this.field_147143_S;
     }
 
-    public GameProfileRepository func_152359_aw()
-    {
+    public GameProfileRepository func_152359_aw() {
         return this.field_152365_W;
     }
 
-    public PlayerProfileCache func_152358_ax()
-    {
+    public PlayerProfileCache func_152358_ax() {
         return this.field_152366_X;
     }
 
-    public ServerStatusResponse func_147134_at()
-    {
+    public ServerStatusResponse func_147134_at() {
         return this.field_147147_p;
     }
 
-    public void func_147132_au()
-    {
+    public void func_147132_au() {
         this.field_147142_T = 0L;
     }
 
     @Nullable
-    public Entity func_175576_a(UUID p_175576_1_)
-    {
-        for (WorldServer worldserver1 : this.field_71305_c)
-        {
-            if (worldserver1 != null)
-            {
+    public Entity func_175576_a(UUID p_175576_1_) {
+        for (WorldServer worldserver1 : this.worldServerList) {
+            if (worldserver1 != null) {
                 Entity entity = worldserver1.func_175733_a(p_175576_1_);
 
-                if (entity != null)
-                {
+                if (entity != null) {
                     return entity;
                 }
             }
@@ -1301,301 +1441,254 @@
         return null;
     }
 
-    public boolean func_174792_t_()
-    {
-        return this.field_71305_c[0].func_82736_K().func_82766_b("sendCommandFeedback");
+    public boolean func_174792_t_() {
+        // return this.worlds[0].getGameRules().getBoolean("sendCommandFeedback");
+        return field_71305_c[0].func_82736_K().func_82766_b("sendCommandFeedback");
     }
 
-    public MinecraftServer func_184102_h()
-    {
+    public MinecraftServer func_184102_h() {
         return this;
     }
 
-    public int func_175580_aG()
-    {
+    public static MinecraftServer getServerInstance() {
+        return instance;
+    }
+
+    // Magma NMS
+    @Deprecated
+    public static MinecraftServer getServerInst() {
+        return instance;
+    }
+
+
+    @Nullable
+    @Deprecated
+    public static MinecraftServer getServerCB() {
+        return (Bukkit.getServer() instanceof CraftServer) ? ((CraftServer) Bukkit.getServer()).getServer() : null;
+    }
+
+    public int func_175580_aG() {
         return 29999984;
     }
 
-    public <V> ListenableFuture<V> func_175586_a(Callable<V> p_175586_1_)
-    {
+    public <V> ListenableFuture<V> func_175586_a(Callable<V> p_175586_1_) {
         Validate.notNull(p_175586_1_);
 
-        if (!this.func_152345_ab() && !this.func_71241_aa())
+        if (!this.func_152345_ab()/* && !this.isServerStopped()*/) // CraftBukkit
         {
             ListenableFutureTask<V> listenablefuturetask = ListenableFutureTask.<V>create(p_175586_1_);
 
-            synchronized (this.field_175589_i)
-            {
-                this.field_175589_i.add(listenablefuturetask);
-                return listenablefuturetask;
-            }
+            // Spigot start
+            this.field_175589_i.add(listenablefuturetask);
+            return listenablefuturetask;
+            // Spigot end
         }
         else
         {
-            try
-            {
+            try {
                 return Futures.<V>immediateFuture(p_175586_1_.call());
-            }
-            catch (Exception exception)
-            {
+            } catch (Exception exception) {
                 return Futures.immediateFailedCheckedFuture(exception);
             }
         }
     }
 
-    public ListenableFuture<Object> func_152344_a(Runnable p_152344_1_)
-    {
+    public ListenableFuture<Object> func_152344_a(Runnable p_152344_1_) {
         Validate.notNull(p_152344_1_);
         return this.<Object>func_175586_a(Executors.callable(p_152344_1_));
     }
 
-    public boolean func_152345_ab()
-    {
+    public boolean func_152345_ab() {
         return Thread.currentThread() == this.field_175590_aa;
     }
 
-    public int func_175577_aI()
-    {
+    public int func_175577_aI() {
         return 256;
     }
 
-    public int func_184108_a(@Nullable WorldServer p_184108_1_)
-    {
+    public int func_184108_a(@Nullable WorldServer p_184108_1_) {
         return p_184108_1_ != null ? p_184108_1_.func_82736_K().func_180263_c("spawnRadius") : 10;
     }
 
-    public AdvancementManager func_191949_aK()
-    {
+    public AdvancementManager func_191949_aK() {
+        // return this.worlds[0].getAdvancementManager();
         return this.field_71305_c[0].func_191952_z();
     }
 
-    public FunctionManager func_193030_aL()
-    {
+    public FunctionManager func_193030_aL() {
+        // return this.worlds[0].getFunctionManager();
         return this.field_71305_c[0].func_193037_A();
     }
 
-    public void func_193031_aM()
-    {
-        if (this.func_152345_ab())
-        {
+    public void func_193031_aM() {
+        if (this.func_152345_ab()) {
             this.func_184103_al().func_72389_g();
+            // this.worlds[0].getLootTableManager().reloadLootTables();
             this.field_71305_c[0].func_184146_ak().func_186522_a();
             this.func_191949_aK().func_192779_a();
             this.func_193030_aL().func_193059_f();
             this.func_184103_al().func_193244_w();
-        }
-        else
-        {
+        } else {
             this.func_152344_a(this::func_193031_aM);
         }
     }
 
     @SideOnly(Side.SERVER)
-    public String func_71211_k()
-    {
+    public String func_71211_k() {
         return this.field_71320_r;
     }
 
     @SideOnly(Side.SERVER)
-    public void func_71189_e(String p_71189_1_)
-    {
+    public void func_71189_e(String p_71189_1_) {
         this.field_71320_r = p_71189_1_;
     }
 
     @SideOnly(Side.SERVER)
-    public void func_82010_a(ITickable p_82010_1_)
-    {
+    public void func_82010_a(ITickable p_82010_1_) {
         this.field_71322_p.add(p_82010_1_);
     }
 
     @SideOnly(Side.SERVER)
-    public static void main(String[] p_main_0_)
-    {
-        Bootstrap.func_151354_b();
+    public static void main(String[] args) {
+        OptionSet options = Main.main(args);
+        if (options == null)
+            return;
+        //Forge: Copied from DedicatedServer.init as to run as early as possible, Old code left in place intentionally.
+        //Done in good faith with permission: https://github.com/MinecraftForge/MinecraftForge/issues/3659#issuecomment-390467028
+        ServerEula eula = new ServerEula(new File("eula.txt"));
 
-        try
+        if (!eula.func_154346_a())
         {
-            boolean flag = true;
-            String s = null;
-            String s1 = ".";
-            String s2 = null;
-            boolean flag1 = false;
-            boolean flag2 = false;
-            int l = -1;
-
-            for (int i1 = 0; i1 < p_main_0_.length; ++i1)
-            {
-                String s3 = p_main_0_[i1];
-                String s4 = i1 == p_main_0_.length - 1 ? null : p_main_0_[i1 + 1];
-                boolean flag3 = false;
-
-                if (!"nogui".equals(s3) && !"--nogui".equals(s3))
-                {
-                    if ("--port".equals(s3) && s4 != null)
-                    {
-                        flag3 = true;
-
-                        try
-                        {
-                            l = Integer.parseInt(s4);
-                        }
-                        catch (NumberFormatException var13)
-                        {
-                            ;
-                        }
+            try {
+                System.out.println("You need to agree to the EULA in order to run the server.");
+                System.out.println("By Typing yes you are indicating your agreement to mojangs EULA (https://account.mojang.com/documents/minecraft_eula).");
+                System.out.println("Would you like to accept the EULA? (Type `yes` or `no`):");
+                boolean startServer = false;
+                int wrongCounter = 0;
+                while(!startServer) {
+                    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
+                    String answer = input.readLine();
+                    switch (answer.toLowerCase()) {
+                        case "yes":
+                            new File("eula.txt").delete();
+                            new File("eula.txt").createNewFile();
+                            OutputStream os = new FileOutputStream(new File("eula.txt"));
+                            os.write("eula=true".getBytes(), 0, "eula=true".length());
+                            System.out.println("Accepted the EULA! starting Magma....");
+                            startServer = true;
+                            continue;
+                        case "no":
+                            System.out.println("EULA NOT ACCEPTED!\nStoping Server...");
+                            return;
+                        default:
+                            if (wrongCounter >= 2) {
+                                System.out.println("You need to agree to the EULA. Go to eula.txt and accept it.");
+                                return;
+                            }
+                            wrongCounter++;
+                            System.out.println("Invalid response! (" + wrongCounter + "/3) Input 'yes' or 'no'");
+                            System.out.println("Would you like to accept the EULA? (Type `yes` or `no`):");
+                            break;
                     }
-                    else if ("--singleplayer".equals(s3) && s4 != null)
-                    {
-                        flag3 = true;
-                        s = s4;
-                    }
-                    else if ("--universe".equals(s3) && s4 != null)
-                    {
-                        flag3 = true;
-                        s1 = s4;
-                    }
-                    else if ("--world".equals(s3) && s4 != null)
-                    {
-                        flag3 = true;
-                        s2 = s4;
-                    }
-                    else if ("--demo".equals(s3))
-                    {
-                        flag1 = true;
-                    }
-                    else if ("--bonusChest".equals(s3))
-                    {
-                        flag2 = true;
-                    }
                 }
-                else
-                {
-                    flag = false;
-                }
-
-                if (flag3)
-                {
-                    ++i1;
-                }
+            } catch (Exception exception){
+                exception.printStackTrace();
             }
+        }
 
-            YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString());
-            MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
+        Bootstrap.func_151354_b();
+        try
+        {
+            String s1 = ".";
+            YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString()); // Paper
+            MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice
+                .createMinecraftSessionService();
             GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
-            PlayerProfileCache playerprofilecache = new PlayerProfileCache(gameprofilerepository, new File(s1, field_152367_a.getName()));
-            final DedicatedServer dedicatedserver = new DedicatedServer(new File(s1), DataFixesManager.func_188279_a(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache);
+            PlayerProfileCache playerprofilecache = new PlayerProfileCache(gameprofilerepository,
+                new File(s1, field_152367_a.getName()));
+            final DedicatedServer dedicatedserver = new DedicatedServer(options, DataFixesManager.func_188279_a(),
+                yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache);
 
-            if (s != null)
-            {
-                dedicatedserver.func_71224_l(s);
+            if (options.has("port")) {
+                int port = (Integer) options.valueOf("port");
+                if (port > 0) {
+                    dedicatedserver.func_71208_b(port);
+                }
             }
 
-            if (s2 != null)
-            {
-                dedicatedserver.func_71261_m(s2);
+            if (options.has("universe")) {
+                dedicatedserver.field_71308_o = (File) options.valueOf("universe");
             }
 
-            if (l >= 0)
-            {
-                dedicatedserver.func_71208_b(l);
+            if (options.has("world")) {
+                dedicatedserver.func_71246_n((String) options.valueOf("world"));
             }
 
-            if (flag1)
-            {
-                dedicatedserver.func_71204_b(true);
-            }
-
-            if (flag2)
-            {
-                dedicatedserver.func_71194_c(true);
-            }
-
-            if (flag && !GraphicsEnvironment.isHeadless())
-            {
-                dedicatedserver.func_120011_ar();
-            }
-
-            dedicatedserver.func_71256_s();
-            Runtime.getRuntime().addShutdownHook(new Thread("Server Shutdown Thread")
-            {
-                public void run()
-                {
-                    dedicatedserver.func_71260_j();
-                }
-            });
+            dedicatedserver.primaryThread.start();
+        } catch (Exception exception) {
+            field_147145_h.fatal("Failed to start the minecraft server", (Throwable) exception);
         }
-        catch (Exception exception)
-        {
-            field_147145_h.fatal("Failed to start the minecraft server", (Throwable)exception);
-        }
     }
 
     @SideOnly(Side.SERVER)
-    public void func_71244_g(String p_71244_1_)
-    {
+    public void func_71244_g(String p_71244_1_) {
         field_147145_h.info(p_71244_1_);
     }
 
     @SideOnly(Side.SERVER)
-    public boolean func_71239_B()
-    {
-        return false;
+    public boolean func_71239_B() {
+        // return false;
+        return this.getPropertyManager().func_73670_a("debug", false); // CraftBukkit - don't hardcode
     }
 
     @SideOnly(Side.SERVER)
-    public void func_71201_j(String p_71201_1_)
-    {
+    public void func_71201_j(String p_71201_1_) {
         field_147145_h.error(p_71201_1_);
     }
 
     @SideOnly(Side.SERVER)
-    public void func_71198_k(String p_71198_1_)
-    {
-        if (this.func_71239_B())
-        {
+    public void func_71198_k(String p_71198_1_) {
+        if (this.func_71239_B()) {
             field_147145_h.info(p_71198_1_);
         }
     }
 
     @SideOnly(Side.SERVER)
-    public int func_71215_F()
-    {
+    public int func_71215_F() {
         return this.field_71319_s;
     }
 
     @SideOnly(Side.SERVER)
-    public void func_71208_b(int p_71208_1_)
-    {
+    public void func_71208_b(int p_71208_1_) {
         this.field_71319_s = p_71208_1_;
     }
 
     @SideOnly(Side.SERVER)
-    public void func_190517_e(boolean p_190517_1_)
-    {
+    public void func_190517_e(boolean p_190517_1_) {
         this.field_190519_A = p_190517_1_;
     }
 
     @SideOnly(Side.SERVER)
-    public int func_82357_ak()
-    {
+    public int func_82357_ak() {
         return 16;
     }
 
     @SideOnly(Side.SERVER)
-    public void func_104055_i(boolean p_104055_1_)
-    {
+    public void func_104055_i(boolean p_104055_1_) {
         this.field_104057_T = p_104055_1_;
     }
 
     @SideOnly(Side.SERVER)
-    public long func_175587_aJ()
-    {
+    public long func_175587_aJ() {
         return this.field_175591_ab;
     }
 
     @SideOnly(Side.SERVER)
-    public Thread func_175583_aK()
-    {
+    public Thread func_175583_aK() {
         return this.field_175590_aa;
     }
+
+    public DataFixer getDataFixer() {
+        return this.field_184112_s;
+    }
\ No newline at end of file
 }
