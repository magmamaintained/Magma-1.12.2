--- ../src-base/minecraft/net/minecraft/server/network/NetHandlerStatusServer.java
+++ ../src-work/minecraft/net/minecraft/server/network/NetHandlerStatusServer.java
@@ -1,6 +1,9 @@
 package net.minecraft.server.network;
 
+import com.mojang.authlib.GameProfile;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.network.NetworkManager;
+import net.minecraft.network.ServerStatusResponse;
 import net.minecraft.network.status.INetHandlerStatusServer;
 import net.minecraft.network.status.client.CPacketPing;
 import net.minecraft.network.status.client.CPacketServerQuery;
@@ -9,7 +12,14 @@
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TextComponentString;
+import net.minecraft.util.text.TextComponentTranslation;
+import org.bukkit.craftbukkit.v1_12_R1.CraftServer;
+import org.bukkit.craftbukkit.v1_12_R1.util.CraftIconCache;
+import org.bukkit.entity.Player;
 
+import java.net.InetSocketAddress;
+import java.util.Iterator;
+
 public class NetHandlerStatusServer implements INetHandlerStatusServer
 {
     private static final ITextComponent field_183007_a = new TextComponentString("Status request has been handled.");
@@ -36,8 +46,102 @@
         else
         {
             this.field_183008_d = true;
-            this.field_147313_b.func_179290_a(new SPacketServerInfo(this.field_147314_a.func_147134_at()));
+            // CraftBukkit start
+            // this.networkManager.sendPacket(new SPacketServerInfo(this.server.getServerStatusResponse()));
+            final Object[] players = field_147314_a.func_184103_al().func_181057_v().toArray();
+            class ServerListPingEvent extends org.bukkit.event.server.ServerListPingEvent {
+
+                CraftIconCache icon = field_147314_a.server.getServerIcon();
+
+                ServerListPingEvent() {
+                    super(((InetSocketAddress) field_147313_b.func_74430_c()).getAddress(), field_147314_a.func_71273_Y(), field_147314_a.func_184103_al().func_72352_l());
+                }
+
+                @Override
+                public void setServerIcon(org.bukkit.util.CachedServerIcon icon) {
+                    if (!(icon instanceof CraftIconCache)) {
+                        throw new IllegalArgumentException(icon + " was not created by " + CraftServer.class);
+                    }
+                    this.icon = (CraftIconCache) icon;
+                }
+
+                @Override
+                public Iterator<Player> iterator() throws UnsupportedOperationException {
+                    return new Iterator<Player>() {
+                        int i;
+                        int ret = Integer.MIN_VALUE;
+                        EntityPlayerMP player;
+
+                        @Override
+                        public boolean hasNext() {
+                            if (player != null) {
+                                return true;
+                            }
+                            final Object[] currentPlayers = players;
+                            for (int length = currentPlayers.length, i = this.i; i < length; i++) {
+                                final EntityPlayerMP player = (EntityPlayerMP) currentPlayers[i];
+                                if (player != null) {
+                                    this.i = i + 1;
+                                    this.player = player;
+                                    return true;
+                                }
+                            }
+                            return false;
+                        }
+
+                        @Override
+                        public Player next() {
+                            if (!hasNext()) {
+                                throw new java.util.NoSuchElementException();
+                            }
+                            final EntityPlayerMP player = this.player;
+                            this.player = null;
+                            this.ret = this.i - 1;
+                            return player.getBukkitEntity();
+                        }
+
+                        @Override
+                        public void remove() {
+                            final Object[] currentPlayers = players;
+                            final int i = this.ret;
+                            if (i < 0 || currentPlayers[i] == null) {
+                                throw new IllegalStateException();
+                            }
+                            currentPlayers[i] = null;
+                        }
+                    };
+                }
+            }
+
+            ServerListPingEvent event = new ServerListPingEvent();
+            this.field_147314_a.server.getPluginManager().callEvent(event);
+
+            java.util.List<GameProfile> profiles = new java.util.ArrayList<GameProfile>(players.length);
+            for (Object player : players) {
+                if (player != null) {
+                    profiles.add(((EntityPlayerMP) player).func_146103_bH());
+                }
+            }
+
+            ServerStatusResponse.Players playerSample = new ServerStatusResponse.Players(event.getMaxPlayers(), profiles.size());
+            // Spigot Start
+            if (!profiles.isEmpty())
+            {
+                java.util.Collections.shuffle(profiles); // This sucks, its inefficient but we have no simple way of doing it differently
+                profiles = profiles.subList(0, Math.min( profiles.size(), org.spigotmc.SpigotConfig.playerSample)); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
+            }
+            // Spigot End
+
+            ServerStatusResponse ping = new ServerStatusResponse();
+            ping.func_151320_a(event.icon.value);
+            ping.func_151315_a(new TextComponentTranslation(event.getMotd()));
+            ping.func_151319_a(playerSample);
+            int version = field_147314_a.func_147134_at().func_151322_c().func_151304_b();
+            ping.func_151321_a(new ServerStatusResponse.Version(field_147314_a.func_71249_w(), version));
+
+            this.field_147313_b.func_179290_a(new SPacketServerInfo(ping));
         }
+        // CraftBukkit end
\ No newline at end of file
     }
 
     public void func_147311_a(CPacketPing p_147311_1_)
