--- ../src-base/minecraft/net/minecraft/server/network/NetHandlerLoginServer.java
+++ ../src-work/minecraft/net/minecraft/server/network/NetHandlerLoginServer.java
@@ -1,5 +1,7 @@
 package net.minecraft.server.network;
 
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
+import com.destroystokyo.paper.profile.PlayerProfile;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
 import io.netty.channel.ChannelFuture;
@@ -29,10 +31,16 @@
 import net.minecraft.util.CryptManager;
 import net.minecraft.util.ITickable;
 import net.minecraft.util.text.ITextComponent;
+import net.minecraft.util.text.TextComponentString;
 import net.minecraft.util.text.TextComponentTranslation;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_12_R1.CraftServer;
+import org.bukkit.craftbukkit.v1_12_R1.util.Waitable;
+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
+import org.bukkit.event.player.PlayerPreLoginEvent;
 
 public class NetHandlerLoginServer implements INetHandlerLoginServer, ITickable
 {
@@ -42,13 +50,15 @@
     private final byte[] field_147330_e = new byte[4];
     private final MinecraftServer field_147327_f;
     public final NetworkManager field_147333_a;
-    private NetHandlerLoginServer.LoginState field_147328_g = NetHandlerLoginServer.LoginState.HELLO;
+    private LoginState field_147328_g = LoginState.HELLO;
     private int field_147336_h;
     private GameProfile field_147337_i;
     private final String field_147334_j = "";
     private SecretKey field_147335_k;
     private EntityPlayerMP field_181025_l;
 
+    public String hostname = "";
+
     public NetHandlerLoginServer(MinecraftServer p_i45298_1_, NetworkManager p_i45298_2_)
     {
         this.field_147327_f = p_i45298_1_;
@@ -58,18 +68,22 @@
 
     public void func_73660_a()
     {
-        if (this.field_147328_g == NetHandlerLoginServer.LoginState.READY_TO_ACCEPT)
+        if (this.field_147328_g == LoginState.READY_TO_ACCEPT)
         {
+            // Paper start - prevent logins to be processed even though disconnect was called
+            if (field_147333_a.func_150724_d()) {
             this.func_147326_c();
         }
-        else if (this.field_147328_g == NetHandlerLoginServer.LoginState.DELAY_ACCEPT)
+            // Paper end
+        }
+        else if (this.field_147328_g == LoginState.DELAY_ACCEPT)
         {
             EntityPlayerMP entityplayermp = this.field_147327_f.func_184103_al().func_177451_a(this.field_147337_i.getId());
 
             if (entityplayermp == null)
             {
-                this.field_147328_g = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
-                this.field_147327_f.func_184103_al().func_72355_a(this.field_147333_a, this.field_181025_l);
+                this.field_147328_g = LoginState.READY_TO_ACCEPT;
+                net.minecraftforge.fml.common.network.internal.FMLNetworkHandler.fmlServerHandshake(this.field_147327_f.func_184103_al(), this.field_147333_a, this.field_181025_l);
                 this.field_181025_l = null;
             }
         }
@@ -80,6 +94,19 @@
         }
     }
 
+    // CraftBukkit start
+    @Deprecated
+    public void disconnect(String s) {
+        try {
+            ITextComponent ichatbasecomponent = new TextComponentTranslation(s);
+            this.field_147333_a.func_179290_a(new SPacketDisconnect(ichatbasecomponent));
+            this.field_147333_a.func_150718_a(ichatbasecomponent);
+        } catch (Exception exception) {
+            NetHandlerLoginServer.field_147332_c.error("Error whilst disconnecting player", exception);
+        }
+    }
+    // CraftBukkit end
+
     public void func_194026_b(ITextComponent p_194026_1_)
     {
         try
@@ -94,22 +121,52 @@
         }
     }
 
+    // Spigot start
+    public void initUUID()
+    {
+        UUID uuid;
+        if ( field_147333_a.spoofedUUID != null )
+        {
+            uuid = field_147333_a.spoofedUUID;
+        } else
+        {
+            uuid = UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + this.field_147337_i.getName() ).getBytes( StandardCharsets.UTF_8 ) );
+        }
+
+        this.field_147337_i = new GameProfile( uuid, this.field_147337_i.getName() );
+
+        if (field_147333_a.spoofedProfile != null)
+        {
+            for ( com.mojang.authlib.properties.Property property : field_147333_a.spoofedProfile )
+            {
+                this.field_147337_i.getProperties().put( property.getName(), property );
+            }
+        }
+    }
+    // Spigot end
+
     public void func_147326_c()
     {
-        if (!this.field_147337_i.isComplete())
+        // Spigot start - Moved to initUUID
+        /*
+        if (!this.loginGameProfile.isComplete())
         {
-            this.field_147337_i = this.func_152506_a(this.field_147337_i);
+            this.loginGameProfile = this.getOfflineProfile(this.loginGameProfile);
         }
+        */
+        // Spigot end
 
-        String s = this.field_147327_f.func_184103_al().func_148542_a(this.field_147333_a.func_74430_c(), this.field_147337_i);
+        // String s = this.server.getPlayerList().allowUserToConnect(this.networkManager.getRemoteAddress(), this.loginGameProfile);
+        // CraftBukkit start - fire PlayerLoginEvent
+        EntityPlayerMP s = this.field_147327_f.func_184103_al().allowUserToConnect(this, this.field_147337_i, hostname);
 
-        if (s != null)
+        if (s == null)
         {
-            this.func_194026_b(new TextComponentTranslation(s, new Object[0]));
+            // this.disconnect(new TextComponentTranslation(s, new Object[0]));
         }
         else
         {
-            this.field_147328_g = NetHandlerLoginServer.LoginState.ACCEPTED;
+            this.field_147328_g = LoginState.ACCEPTED;
 
             if (this.field_147327_f.func_175577_aI() >= 0 && !this.field_147333_a.func_150731_c())
             {
@@ -127,12 +184,12 @@
 
             if (entityplayermp != null)
             {
-                this.field_147328_g = NetHandlerLoginServer.LoginState.DELAY_ACCEPT;
-                this.field_181025_l = this.field_147327_f.func_184103_al().func_148545_a(this.field_147337_i);
+                this.field_147328_g = LoginState.DELAY_ACCEPT;
+                this.field_181025_l = this.field_147327_f.func_184103_al().createPlayerForUser(this.field_147337_i, s);
             }
             else
             {
-                this.field_147327_f.func_184103_al().func_72355_a(this.field_147333_a, this.field_147327_f.func_184103_al().func_148545_a(this.field_147337_i));
+                net.minecraftforge.fml.common.network.internal.FMLNetworkHandler.fmlServerHandshake(this.field_147327_f.func_184103_al(), this.field_147333_a, s);
             }
         }
     }
@@ -149,23 +206,42 @@
 
     public void func_147316_a(CPacketLoginStart p_147316_1_)
     {
-        Validate.validState(this.field_147328_g == NetHandlerLoginServer.LoginState.HELLO, "Unexpected hello packet");
+        Validate.validState(this.field_147328_g == LoginState.HELLO, "Unexpected hello packet");
         this.field_147337_i = p_147316_1_.func_149304_c();
 
         if (this.field_147327_f.func_71266_T() && !this.field_147333_a.func_150731_c())
         {
-            this.field_147328_g = NetHandlerLoginServer.LoginState.KEY;
+            this.field_147328_g = LoginState.KEY;
             this.field_147333_a.func_179290_a(new SPacketEncryptionRequest("", this.field_147327_f.func_71250_E().getPublic(), this.field_147330_e));
         }
         else
         {
-            this.field_147328_g = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+            // Spigot start
+            new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER,"User Authenticator #" + NetHandlerLoginServer.field_147331_b.incrementAndGet())
+            {
+
+                @Override
+                public void run()
+                {
+                    try
+                    {
+                        initUUID();
+                        new LoginHandler().fireEvents();
+                    }
+                    catch (Exception ex)
+                    {
+                        func_194026_b(new TextComponentString("Failed to verify username!"));
+                        field_147327_f.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + field_147337_i.getName(), ex);
+                    }
+                }
+            }.start();
+            // Spigot end
         }
     }
 
     public void func_147315_a(CPacketEncryptionResponse p_147315_1_)
     {
-        Validate.validState(this.field_147328_g == NetHandlerLoginServer.LoginState.KEY, "Unexpected key packet");
+        Validate.validState(this.field_147328_g == LoginState.KEY, "Unexpected key packet");
         PrivateKey privatekey = this.field_147327_f.func_71250_E().getPrivate();
 
         if (!Arrays.equals(this.field_147330_e, p_147315_1_.func_149299_b(privatekey)))
@@ -175,9 +251,9 @@
         else
         {
             this.field_147335_k = p_147315_1_.func_149300_a(privatekey);
-            this.field_147328_g = NetHandlerLoginServer.LoginState.AUTHENTICATING;
+            this.field_147328_g = LoginState.AUTHENTICATING;
             this.field_147333_a.func_150727_a(this.field_147335_k);
-            (new Thread("User Authenticator #" + field_147331_b.incrementAndGet())
+            (new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, "User Authenticator #" + field_147331_b.incrementAndGet())
             {
                 public void run()
                 {
@@ -186,18 +262,22 @@
                     try
                     {
                         String s = (new BigInteger(CryptManager.func_75895_a("", NetHandlerLoginServer.this.field_147327_f.func_71250_E().getPublic(), NetHandlerLoginServer.this.field_147335_k))).toString(16);
-                        NetHandlerLoginServer.this.field_147337_i = NetHandlerLoginServer.this.field_147327_f.func_147130_as().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s, this.func_191235_a());
+                        NetHandlerLoginServer.this.field_147337_i = NetHandlerLoginServer.this.field_147327_f.func_147130_as().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s, this.getAddress());
 
                         if (NetHandlerLoginServer.this.field_147337_i != null)
                         {
-                            NetHandlerLoginServer.field_147332_c.info("UUID of player {} is {}", NetHandlerLoginServer.this.field_147337_i.getName(), NetHandlerLoginServer.this.field_147337_i.getId());
-                            NetHandlerLoginServer.this.field_147328_g = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+                            // CraftBukkit start - fire PlayerPreLoginEvent
+                            if (!field_147333_a.func_150724_d()) {
+                                return;
+                            }
+
+                            new LoginHandler().fireEvents();
                         }
                         else if (NetHandlerLoginServer.this.field_147327_f.func_71264_H())
                         {
                             NetHandlerLoginServer.field_147332_c.warn("Failed to verify username but will let them in anyway!");
                             NetHandlerLoginServer.this.field_147337_i = NetHandlerLoginServer.this.func_152506_a(gameprofile);
-                            NetHandlerLoginServer.this.field_147328_g = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+                            NetHandlerLoginServer.this.field_147328_g = LoginState.READY_TO_ACCEPT;
                         }
                         else
                         {
@@ -211,17 +291,23 @@
                         {
                             NetHandlerLoginServer.field_147332_c.warn("Authentication servers are down but will let them in anyway!");
                             NetHandlerLoginServer.this.field_147337_i = NetHandlerLoginServer.this.func_152506_a(gameprofile);
-                            NetHandlerLoginServer.this.field_147328_g = NetHandlerLoginServer.LoginState.READY_TO_ACCEPT;
+                            NetHandlerLoginServer.this.field_147328_g = LoginState.READY_TO_ACCEPT;
                         }
                         else
                         {
                             NetHandlerLoginServer.this.func_194026_b(new TextComponentTranslation("multiplayer.disconnect.authservers_down", new Object[0]));
                             NetHandlerLoginServer.field_147332_c.error("Couldn't verify username because servers are unavailable");
+
                         }
+                        // CraftBukkit start - catch all exceptions
+                    } catch (Exception exception) {
+                        func_194026_b(new TextComponentTranslation("Failed to verify username!"));
+                        field_147327_f.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
+                        // CraftBukkit end
                     }
                 }
                 @Nullable
-                private InetAddress func_191235_a()
+                private InetAddress getAddress()
                 {
                     SocketAddress socketaddress = NetHandlerLoginServer.this.field_147333_a.func_74430_c();
                     return NetHandlerLoginServer.this.field_147327_f.func_190518_ac() && socketaddress instanceof InetSocketAddress ? ((InetSocketAddress)socketaddress).getAddress() : null;
@@ -230,6 +316,54 @@
         }
     }
 
+    // Spigot start
+    public class LoginHandler {
+        public void fireEvents() throws Exception {
+            String playerName = field_147337_i.getName();
+            java.net.InetAddress address = ((java.net.InetSocketAddress) field_147333_a.func_74430_c()).getAddress();
+            java.util.UUID uniqueId = field_147337_i.getId();
+            final CraftServer server = NetHandlerLoginServer.this.field_147327_f.server;
+
+            // Paper start
+            PlayerProfile profile = CraftPlayerProfile.asBukkitMirror(field_147337_i);
+            AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId, profile);
+            server.getPluginManager().callEvent(asyncEvent);
+            profile = asyncEvent.getPlayerProfile();
+            profile.complete(true);
+            field_147337_i = CraftPlayerProfile.asAuthlibCopy(profile);
+            playerName = field_147337_i.getName();
+            uniqueId = field_147337_i.getId();
+            // Paper end
+
+            if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+                if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+                    event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+                }
+                Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+                    @Override
+                    protected PlayerPreLoginEvent.Result evaluate() {
+                        server.getPluginManager().callEvent(event);
+                        return event.getResult();
+                    }};
+                NetHandlerLoginServer.this.field_147327_f.processQueue.add(waitable);
+                if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+                        func_194026_b(new TextComponentString(event.getKickMessage()));
+                    return;
+                }
+            } else {
+                if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+                    func_194026_b(new TextComponentString(asyncEvent.getKickMessage()));
+                    return;
+                }
+            }
+            // CraftBukkit end
+            NetHandlerLoginServer.field_147332_c.info("UUID of player {} is {}", NetHandlerLoginServer.this.field_147337_i.getName(), NetHandlerLoginServer.this.field_147337_i.getId());
+            NetHandlerLoginServer.this.field_147328_g = LoginState.READY_TO_ACCEPT;
+        }
+	}
+    // Spigot end
+
\ No newline at end of file
     protected GameProfile func_152506_a(GameProfile p_152506_1_)
     {
         UUID uuid = UUID.nameUUIDFromBytes(("OfflinePlayer:" + p_152506_1_.getName()).getBytes(StandardCharsets.UTF_8));
