--- ../src-base/minecraft/net/minecraft/world/WorldServer.java
+++ ../src-work/minecraft/net/minecraft/world/WorldServer.java
@@ -14,27 +14,22 @@
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.UUID;
-import java.util.function.Predicate;
+import java.util.logging.Level;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.AdvancementManager;
 import net.minecraft.advancements.FunctionManager;
-import net.minecraft.block.Block;
-import net.minecraft.block.BlockEventData;
+import net.minecraft.block.*;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.entity.Entity;
-import net.minecraft.entity.EntityList;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.EntityTracker;
 import net.minecraft.entity.EnumCreatureType;
-import net.minecraft.entity.INpc;
 import net.minecraft.entity.effect.EntityLightningBolt;
-import net.minecraft.entity.passive.EntityAnimal;
 import net.minecraft.entity.passive.EntitySkeletonHorse;
-import net.minecraft.entity.passive.EntityWaterMob;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
@@ -50,6 +45,7 @@
 import net.minecraft.scoreboard.ServerScoreboard;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.PlayerChunkMap;
+import net.minecraft.tileentity.*;
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.IProgressUpdate;
 import net.minecraft.util.IThreadListener;
@@ -77,16 +73,24 @@
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraft.world.storage.WorldSavedDataCallableSave;
 import net.minecraft.world.storage.loot.LootTableManager;
+import net.minecraftforge.common.DimensionManager;
+import net.minecraftforge.common.WorldSpecificSaveHandler;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_12_R1.generator.*;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.weather.LightningStrikeEvent;
+import org.bukkit.craftbukkit.v1_12_R1.CraftTravelAgent;
+import org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory;
 
 public class WorldServer extends World implements IThreadListener
 {
     private static final Logger field_147491_a = LogManager.getLogger();
     private final MinecraftServer field_73061_a;
-    private final EntityTracker field_73062_L;
+    public EntityTracker field_73062_L;
     private final PlayerChunkMap field_73063_M;
     private final Set<NextTickListEntry> field_73064_N = Sets.<NextTickListEntry>newHashSet();
     private final TreeSet<NextTickListEntry> field_73065_O = new TreeSet<NextTickListEntry>();
@@ -97,41 +101,93 @@
     private final Teleporter field_85177_Q;
     private final WorldEntitySpawner field_175742_R = new WorldEntitySpawner();
     protected final VillageSiege field_175740_d = new VillageSiege(this);
-    private final WorldServer.ServerBlockEventList[] field_147490_S = new WorldServer.ServerBlockEventList[] {new WorldServer.ServerBlockEventList(), new WorldServer.ServerBlockEventList()};
+    private final ServerBlockEventList[] field_147490_S = new ServerBlockEventList[] {new ServerBlockEventList(), new ServerBlockEventList()};
     private int field_147489_T;
     private final List<NextTickListEntry> field_94579_S = Lists.<NextTickListEntry>newArrayList();
 
+    /** Stores the recently processed (lighting) chunks */
+    protected Set<ChunkPos> doneChunks = new java.util.HashSet<ChunkPos>();
+    public List<Teleporter> customTeleporters = new ArrayList<Teleporter>();
+
+    public final int dimension;
+
+    public WorldServer(MinecraftServer server, ISaveHandler saveHandlerIn, WorldInfo info, int dimensionId, Profiler methodprofiler, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen) {
+        super(saveHandlerIn, info, net.minecraftforge.common.DimensionManager.createProviderFor(dimensionId), methodprofiler, false, gen, env);
+        this.pvpMode = server.func_71219_W();
+        info.world = this;
+        this.dimension = dimensionId;
+        this.field_73061_a = server;
+        this.field_73062_L = new EntityTracker(this);
+        this.field_73063_M = new PlayerChunkMap(this);
+        // Guarantee the dimension ID was not reset by the provider
+        int providerDim = this.field_73011_w.getDimension();
+        this.field_73011_w.func_76558_a(this);
+        this.field_73011_w.setDimension(providerDim);
+        this.field_73020_y = this.func_72970_h();
+        this.field_85177_Q = new CraftTravelAgent(this); //// CraftBukkit
+        this.func_72966_v();
+        this.func_72947_a();
+        this.func_175723_af().func_177725_a(server.func_175580_aG());
+        WorldServer overworld = DimensionManager.getWorld(0);
+        if (overworld != null) {
+            this.field_72988_C = overworld.field_72988_C;
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler(this, overworld.field_73019_z));
+        }
+        else {
+            this.field_72988_C = new MapStorage(saveHandlerIn);
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler(this, this.field_73019_z));
+        }
+        net.minecraftforge.common.DimensionManager.setWorld(dimensionId, this, field_73061_a);
+        // Magma - worldData
+        worldData = field_72986_A;
+    }
+
     public WorldServer(MinecraftServer p_i45921_1_, ISaveHandler p_i45921_2_, WorldInfo p_i45921_3_, int p_i45921_4_, Profiler p_i45921_5_)
     {
-        super(p_i45921_2_, p_i45921_3_, DimensionType.func_186069_a(p_i45921_4_).func_186070_d(), p_i45921_5_, false);
+        super(p_i45921_2_, p_i45921_3_, net.minecraftforge.common.DimensionManager.createProviderFor(p_i45921_4_), p_i45921_5_, false);
         this.field_73061_a = p_i45921_1_;
         this.field_73062_L = new EntityTracker(this);
         this.field_73063_M = new PlayerChunkMap(this);
+        this.dimension = p_i45921_4_;
+        // Guarantee the dimension ID was not reset by the provider
+        int providerDim = this.field_73011_w.getDimension();
         this.field_73011_w.func_76558_a(this);
+        this.field_73011_w.setDimension(providerDim);
         this.field_73020_y = this.func_72970_h();
         this.field_85177_Q = new Teleporter(this);
         this.func_72966_v();
         this.func_72947_a();
         this.func_175723_af().func_177725_a(p_i45921_1_.func_175580_aG());
+        WorldServer overworld = DimensionManager.getWorld(0);
+        if (overworld != null) {
+            this.field_72988_C = overworld.field_72988_C;
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler(this, overworld.field_73019_z));
+        }
+        else {
+            this.field_72988_C = new MapStorage(p_i45921_2_);
+            this.perWorldStorage = new MapStorage(new WorldSpecificSaveHandler(this, this.field_73019_z));
+        }
+        net.minecraftforge.common.DimensionManager.setWorld(p_i45921_4_, this, field_73061_a);
+        // Magma - worldData
+        worldData = field_72986_A;
     }
 
     public World func_175643_b()
     {
-        this.field_72988_C = new MapStorage(this.field_73019_z);
         String s = VillageCollection.func_176062_a(this.field_73011_w);
-        VillageCollection villagecollection = (VillageCollection)this.field_72988_C.func_75742_a(VillageCollection.class, s);
+        VillageCollection villagecollection = (VillageCollection)this.perWorldStorage.func_75742_a(VillageCollection.class, s);
 
         if (villagecollection == null)
         {
             this.field_72982_D = new VillageCollection(this);
-            this.field_72988_C.func_75745_a(s, this.field_72982_D);
+            this.perWorldStorage.func_75745_a(s, this.field_72982_D);
         }
         else
         {
             this.field_72982_D = villagecollection;
             this.field_72982_D.func_82566_a(this);
         }
-
+        if (getServer().getScoreboardManager() == null) { // CraftBukkit
         this.field_96442_D = new ServerScoreboard(this.field_73061_a);
         ScoreboardSaveData scoreboardsavedata = (ScoreboardSaveData)this.field_72988_C.func_75742_a(ScoreboardSaveData.class, "scoreboard");
 
@@ -143,8 +199,18 @@
 
         scoreboardsavedata.func_96499_a(this.field_96442_D);
         ((ServerScoreboard)this.field_96442_D).func_186684_a(new WorldSavedDataCallableSave(scoreboardsavedata));
+        } else {
+            this.field_96442_D = getServer().getScoreboardManager().getMainScoreboard().getHandle();
+        }
         this.field_184151_B = new LootTableManager(new File(new File(this.field_73019_z.func_75765_b(), "data"), "loot_tables"));
-        this.field_191951_C = new AdvancementManager(new File(new File(this.field_73019_z.func_75765_b(), "data"), "advancements"));
+        // CraftBukkit start
+        if (this.dimension != 0) { // SPIGOT-3899 multiple worlds of advancements not supported
+            this.field_191951_C = this.field_73061_a.func_191949_aK();
+        }
+        if (this.field_191951_C == null) {
+            this.field_191951_C = new AdvancementManager(new File(new File(this.field_73019_z.func_75765_b(), "data"), "advancements"));
+        }
+        // CraftBukkit end
         this.field_193036_D = new FunctionManager(new File(new File(this.field_73019_z.func_75765_b(), "data"), "functions"), this.field_73061_a);
         this.func_175723_af().func_177739_c(this.field_72986_A.func_176120_C(), this.field_72986_A.func_176126_D());
         this.func_175723_af().func_177744_c(this.field_72986_A.func_176140_I());
@@ -161,9 +227,146 @@
             this.func_175723_af().func_177750_a(this.field_72986_A.func_176137_E());
         }
 
+        this.initCapabilities();
+
         return this;
     }
 
+    @Override
+    public TileEntity func_175625_s(BlockPos pos) {
+        TileEntity result = super.func_175625_s(pos);
+        Block type = func_180495_p(pos).func_177230_c();
+
+        if (type == Blocks.field_150486_ae || type == Blocks.field_150447_bR) {
+            if (!(result instanceof TileEntityChest)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150460_al) {
+            if (!(result instanceof TileEntityFurnace)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150409_cd) {
+            if (!(result instanceof TileEntityDropper)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150367_z) {
+            if (!(result instanceof TileEntityDispenser)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150421_aI) {
+            if (!(result instanceof BlockJukebox.TileEntityJukebox)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150323_B) {
+            if (!(result instanceof TileEntityNote)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150474_ac) {
+            if (!(result instanceof TileEntityMobSpawner)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if ((type == Blocks.field_150472_an) || (type == Blocks.field_150444_as)) {
+            if (!(result instanceof TileEntitySign)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150477_bB) {
+            if (!(result instanceof TileEntityEnderChest)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150382_bo) {
+            if (!(result instanceof TileEntityBrewingStand)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150461_bJ) {
+            if (!(result instanceof TileEntityBeacon)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150438_bZ) {
+            if (!(result instanceof TileEntityHopper)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150381_bn) {
+            if (!(result instanceof TileEntityEnchantmentTable)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150384_bq) {
+            if (!(result instanceof TileEntityEndPortal)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150465_bP) {
+            if (!(result instanceof TileEntitySkull)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150453_bW || type == Blocks.field_180402_cm) {
+            if (!(result instanceof TileEntityDaylightDetector)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150455_bV || type == Blocks.field_150441_bU) {
+            if (!(result instanceof TileEntityComparator)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150457_bL) {
+            if (!(result instanceof TileEntityFlowerPot)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_180393_cK || type == Blocks.field_180394_cL) {
+            if (!(result instanceof TileEntityBanner)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_185779_df) {
+            if (!(result instanceof TileEntityStructure)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_185775_db) {
+            if (!(result instanceof TileEntityEndGateway)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150483_bI) {
+            if (!(result instanceof TileEntityCommandBlock)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_185779_df) {
+            if (!(result instanceof TileEntityStructure)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.field_150324_C) {
+            if (!(result instanceof TileEntityBed)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        }
+        // Paper Start - add TE fix checks for shulkers, see nms.BlockShulkerBox
+        else if (type instanceof BlockShulkerBox) {
+            if (!(result instanceof TileEntityShulkerBox)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        }
+        // Paper end
+
+        return result;
+    }
+
+    private TileEntity fixTileEntity(BlockPos pos, Block type, TileEntity found) {
+        this.getServer().getLogger().log(Level.SEVERE, "Block at {0},{1},{2} is {3} but has {4}" + ". "
+                + "Bukkit will attempt to fix this, but there may be additional damage that we cannot recover.", new Object[]{pos.func_177958_n(), pos.func_177956_o(), pos.func_177952_p(), org.bukkit.Material.getBlockMaterial(Block.func_149682_b(type)).toString(), found});
+        if (type instanceof ITileEntityProvider) {
+            TileEntity replacement = ((ITileEntityProvider) type).func_149915_a(this, type.func_176201_c(this.func_180495_p(pos)));
+            replacement.field_145850_b = this;
+            this.func_175690_a(pos, replacement);
+            return replacement;
+        } else {
+            this.getServer().getLogger().severe("Don't know how to fix for this type... Can't do anything! :(");
+            return found;
+        }
+    }
+
+    private boolean canSpawn(int x, int z) {
+        if (this.generator != null) {
+            return this.generator.canSpawn(this.getWorld(), x, z);
+        } else {
+            return this.field_73011_w.func_76566_a(x, z);
+        }
+    }
+
     public void func_72835_b()
     {
         super.func_72835_b();
@@ -179,8 +382,8 @@
         {
             if (this.func_82736_K().func_82766_b("doDaylightCycle"))
             {
-                long i = this.field_72986_A.func_76073_f() + 24000L;
-                this.field_72986_A.func_76068_b(i - i % 24000L);
+                long i = this.func_72820_D() + 24000L;
+                this.func_72877_b(i - i % 24000L);
             }
 
             this.func_73053_d();
@@ -188,11 +391,17 @@
 
         this.field_72984_F.func_76320_a("mobSpawner");
 
-        if (this.func_82736_K().func_82766_b("doMobSpawning") && this.field_72986_A.func_76067_t() != WorldType.field_180272_g)
+        // CraftBukkit start - Only call spawner if we have players online and the world allows for mobs or animals
+        long time = this.field_72986_A.func_82573_f();
+        if (this.func_82736_K().func_82766_b("doMobSpawning") && this.field_72986_A.func_76067_t() != WorldType.field_180272_g && (this.field_72985_G || this.field_72992_H) && this.field_73010_i.size() > 0)
         {
-            this.field_175742_R.func_77192_a(this, this.field_72985_G, this.field_72992_H, this.field_72986_A.func_82573_f() % 400L == 0L);
+            timings.mobSpawn.startTiming(); // Spigot
+            this.field_175742_R.func_77192_a(this, this.field_72985_G && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.field_72992_H && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.field_72986_A.func_82573_f() % 400L == 0L);
+            timings.mobSpawn.stopTiming(); // Spigot
+            // CraftBukkit end
         }
 
+        timings.doChunkUnload.startTiming(); // Spigot
         this.field_72984_F.func_76318_c("chunkSource");
         this.field_73020_y.func_73156_b();
         int j = this.func_72967_a(1.0F);
@@ -202,38 +411,61 @@
             this.func_175692_b(j);
         }
 
-        this.field_72986_A.func_82572_b(this.field_72986_A.func_82573_f() + 1L);
+        this.field_72986_A.tick();
 
         if (this.func_82736_K().func_82766_b("doDaylightCycle"))
         {
-            this.field_72986_A.func_76068_b(this.field_72986_A.func_76073_f() + 1L);
+            this.func_72877_b(this.func_72820_D() + 1L);
         }
+        timings.doChunkUnload.stopTiming(); // Spigot
 
         this.field_72984_F.func_76318_c("tickPending");
+        timings.scheduledBlocks.startTiming(); // Paper
         this.func_72955_a(false);
+        timings.scheduledBlocks.stopTiming(); // Paper
         this.field_72984_F.func_76318_c("tickBlocks");
+        timings.chunkTicks.startTiming(); // Paper
         this.func_147456_g();
+        timings.chunkTicks.stopTiming(); // Paper
         this.field_72984_F.func_76318_c("chunkMap");
+        timings.doChunkMap.startTiming(); // Spigot
         this.field_73063_M.func_72693_b();
+        timings.doChunkMap.stopTiming(); // Spigot
         this.field_72984_F.func_76318_c("village");
+        timings.doVillages.startTiming(); // Spigot
         this.field_72982_D.func_75544_a();
         this.field_175740_d.func_75528_a();
+        timings.doVillages.stopTiming(); // Spigot
         this.field_72984_F.func_76318_c("portalForcer");
+        timings.doPortalForcer.startTiming(); // Spigot
         this.field_85177_Q.func_85189_a(this.func_82737_E());
+        for (Teleporter tele : customTeleporters)
+        {
+            tele.func_85189_a(func_82737_E());
+        }
+        timings.doPortalForcer.stopTiming(); // Spigot
         this.field_72984_F.func_76319_b();
+        timings.doSounds.startTiming(); // Spigot
         this.func_147488_Z();
+        timings.doSounds.stopTiming(); // Spigot
+
+        timings.doChunkGC.startTiming();// Spigot
+        this.getWorld().processChunkGC();
+        timings.doChunkGC.stopTiming(); // Spigot
     }
 
     @Nullable
     public Biome.SpawnListEntry func_175734_a(EnumCreatureType p_175734_1_, BlockPos p_175734_2_)
     {
         List<Biome.SpawnListEntry> list = this.func_72863_F().func_177458_a(p_175734_1_, p_175734_2_);
+        list = net.minecraftforge.event.ForgeEventFactory.getPotentialSpawns(this, p_175734_1_, p_175734_2_, list);
         return list != null && !list.isEmpty() ? (Biome.SpawnListEntry)WeightedRandom.func_76271_a(this.field_73012_v, list) : null;
     }
 
     public boolean func_175732_a(EnumCreatureType p_175732_1_, Biome.SpawnListEntry p_175732_2_, BlockPos p_175732_3_)
     {
         List<Biome.SpawnListEntry> list = this.func_72863_F().func_177458_a(p_175732_1_, p_175732_3_);
+        list = net.minecraftforge.event.ForgeEventFactory.getPotentialSpawns(this, p_175732_1_, p_175732_3_, list);
         return list != null && !list.isEmpty() ? list.contains(p_175732_2_) : false;
     }
 
@@ -252,7 +484,7 @@
                 {
                     ++i;
                 }
-                else if (entityplayer.func_70608_bn())
+                else if (entityplayer.func_70608_bn() || entityplayer.fauxSleeping)
                 {
                     ++j;
                 }
@@ -279,25 +511,33 @@
 
     private void func_73051_P()
     {
-        this.field_72986_A.func_76080_g(0);
-        this.field_72986_A.func_76084_b(false);
-        this.field_72986_A.func_76090_f(0);
-        this.field_72986_A.func_76069_a(false);
+        this.field_73011_w.resetRainAndThunder();
     }
 
     public boolean func_73056_e()
     {
         if (this.field_73068_P && !this.field_72995_K)
         {
+            // CraftBukkit - This allows us to assume that some people are in bed but not really, allowing time to pass in spite of AFKers
+            boolean foundActualSleepers = false;
+
             for (EntityPlayer entityplayer : this.field_73010_i)
             {
-                if (!entityplayer.func_175149_v() && !entityplayer.func_71026_bH())
+                if(entityplayer.func_71026_bH() || (entityplayer.fauxSleeping && entityplayer.func_71026_bH()))
                 {
+                    foundActualSleepers = true;
+                }
+                else if(entityplayer.func_175149_v() || entityplayer.fauxSleeping)
+                {
+                    continue;
+                }
+                else
+                    {
                     return false;
                 }
             }
 
-            return true;
+            return foundActualSleepers;
         }
         else
         {
@@ -333,7 +573,7 @@
         this.field_72986_A.func_76087_c(j);
     }
 
-    protected boolean func_175680_a(int p_175680_1_, int p_175680_2_, boolean p_175680_3_)
+    public boolean func_175680_a(int p_175680_1_, int p_175680_2_, boolean p_175680_3_)
     {
         return this.func_72863_F().func_73149_a(p_175680_1_, p_175680_2_);
     }
@@ -342,7 +582,7 @@
     {
         this.field_72984_F.func_76320_a("playerCheckLight");
 
-        if (!this.field_73010_i.isEmpty())
+        if (spigotConfig.randomLightUpdates && !this.field_73010_i.isEmpty()) // Spigot
         {
             int i = this.field_73012_v.nextInt(this.field_73010_i.size());
             EntityPlayer entityplayer = this.field_73010_i.get(i);
@@ -375,19 +615,21 @@
             boolean flag1 = this.func_72911_I();
             this.field_72984_F.func_76320_a("pollingChunks");
 
-            for (Iterator<Chunk> iterator = this.field_73063_M.func_187300_b(); iterator.hasNext(); this.field_72984_F.func_76319_b())
+            for (Iterator<Chunk> iterator = getPersistentChunkIterable(this.field_73063_M.func_187300_b()); iterator.hasNext(); this.field_72984_F.func_76319_b())
             {
                 this.field_72984_F.func_76320_a("getChunk");
                 Chunk chunk = iterator.next();
+                try {
                 int j = chunk.field_76635_g * 16;
                 int k = chunk.field_76647_h * 16;
                 this.field_72984_F.func_76318_c("checkNextLight");
                 chunk.func_76594_o();
                 this.field_72984_F.func_76318_c("tickChunk");
                 chunk.func_150804_b(false);
+//                    if (!chunk.areNeighborsLoaded(1)) continue; // Spigot
                 this.field_72984_F.func_76318_c("thunder");
 
-                if (flag && flag1 && this.field_73012_v.nextInt(100000) == 0)
+                if (this.field_73011_w.canDoLightning(chunk) && flag && flag1 && this.field_73012_v.nextInt(100000) == 0)
                 {
                     this.field_73005_l = this.field_73005_l * 3 + 1013904223;
                     int l = this.field_73005_l >> 2;
@@ -403,7 +645,7 @@
                             entityskeletonhorse.func_190691_p(true);
                             entityskeletonhorse.func_70873_a(0);
                             entityskeletonhorse.func_70107_b((double)blockpos.func_177958_n(), (double)blockpos.func_177956_o(), (double)blockpos.func_177952_p());
-                            this.func_72838_d(entityskeletonhorse);
+                            this.spawnEntity(entityskeletonhorse, CreatureSpawnEvent.SpawnReason.LIGHTNING);
                             this.func_72942_c(new EntityLightningBolt(this, (double)blockpos.func_177958_n(), (double)blockpos.func_177956_o(), (double)blockpos.func_177952_p(), true));
                         }
                         else
@@ -415,21 +657,24 @@
 
                 this.field_72984_F.func_76318_c("iceandsnow");
 
-                if (this.field_73012_v.nextInt(16) == 0)
+                if (this.field_73011_w.canDoRainSnowIce(chunk) && this.field_73012_v.nextInt(16) == 0)
                 {
                     this.field_73005_l = this.field_73005_l * 3 + 1013904223;
                     int j2 = this.field_73005_l >> 2;
                     BlockPos blockpos1 = this.func_175725_q(new BlockPos(j + (j2 & 15), 0, k + (j2 >> 8 & 15)));
                     BlockPos blockpos2 = blockpos1.func_177977_b();
 
+                    if (this.func_175697_a(blockpos2, 1)) // Forge: check area to avoid loading neighbors in unloaded chunks
                     if (this.func_175662_w(blockpos2))
                     {
-                        this.func_175656_a(blockpos2, Blocks.field_150432_aD.func_176223_P());
+                        // this.setBlockState(blockpos2, Blocks.ICE.getDefaultState());
+                        CraftEventFactory.handleBlockFormEvent(this, blockpos2, Blocks.field_150432_aD.func_176223_P(), null);
                     }
 
                     if (flag && this.func_175708_f(blockpos1, true))
                     {
-                        this.func_175656_a(blockpos1, Blocks.field_150431_aC.func_176223_P());
+                        // this.setBlockState(blockpos1, Blocks.SNOW_LAYER.getDefaultState());
+                        CraftEventFactory.handleBlockFormEvent(this, blockpos1, Blocks.field_150431_aC.func_176223_P(), null);
                     }
 
                     if (flag && this.func_180494_b(blockpos2).func_76738_d())
@@ -438,7 +683,7 @@
                     }
                 }
 
-                this.field_72984_F.func_76318_c("tickBlocks");
+                timings.chunkTicksBlocks.startTiming(); // Paper
 
                 if (i > 0)
                 {
@@ -467,8 +712,16 @@
                         }
                     }
                 }
+                } catch (Exception e) {
+                    try {
+                        this.func_72863_F().unloadChunk(chunk, true);
+                    } catch (Exception e2) {
+                        e.printStackTrace();
+                    }
+                    e.printStackTrace();
             }
-
+                timings.chunkTicksBlocks.stopTiming(); // Paper
+            }
             this.field_72984_F.func_76319_b();
         }
     }
@@ -525,7 +778,10 @@
         {
             if (p_175654_2_.func_149698_L())
             {
-                if (this.func_175707_a(p_175654_1_.func_177982_a(-8, -8, -8), p_175654_1_.func_177982_a(8, 8, 8)))
+                //Keeping here as a note for future when it may be restored.
+                boolean isForced = getPersistentChunks().containsKey(new ChunkPos(p_175654_1_));
+                int range = isForced ? 0 : 8;
+                if (this.func_175707_a(p_175654_1_.func_177982_a(-range, -range, -range), p_175654_1_.func_177982_a(range, range, range)))
                 {
                     IBlockState iblockstate = this.func_180495_p(p_175654_1_);
 
@@ -561,6 +817,7 @@
 
     public void func_180497_b(BlockPos p_180497_1_, Block p_180497_2_, int p_180497_3_, int p_180497_4_)
     {
+        if (p_180497_2_ == null) return; //Forge: Prevent null blocks from ticking, can happen if blocks are removed in old worlds. TODO: Fix real issue causing block to be null.
         NextTickListEntry nextticklistentry = new NextTickListEntry(p_180497_1_, p_180497_2_);
         nextticklistentry.func_82753_a(p_180497_4_);
         Material material = p_180497_2_.func_176223_P().func_185904_a();
@@ -579,7 +836,7 @@
 
     public void func_72939_s()
     {
-        if (this.field_73010_i.isEmpty())
+        if (this.field_73010_i.isEmpty() && getPersistentChunks().isEmpty())
         {
             if (this.field_80004_Q++ >= 300)
             {
@@ -593,6 +850,7 @@
 
         this.field_73011_w.func_186059_r();
         super.func_72939_s();
+        spigotConfig.currentPrimedTnt = 0; // Spigot
     }
 
     protected void func_184147_l()
@@ -668,17 +926,23 @@
         {
             int i = this.field_73065_O.size();
 
-            if (i != this.field_73064_N.size())
-            {
-                throw new IllegalStateException("TickNextTick list out of synch");
+            if (i != this.field_73064_N.size()) {
+                this.field_73064_N.clear();
+                this.field_73064_N.addAll(this.field_73065_O);
             }
-            else
-            {
                 if (i > 65536)
                 {
-                    i = 65536;
+                    // i = 65536;
+                    // CraftBukkit start - If the server has too much to process over time, try to alleviate that
+                    if (i > 20 * 65536) {
+                        i = i / 20;
+                    } else {
+                        i = 65536;
+                    }
+                    // CraftBukkit end
                 }
 
+                timings.scheduledBlocksCleanup.startTiming(); // Paper
                 this.field_72984_F.func_76320_a("cleaning");
 
                 for (int j = 0; j < i; ++j)
@@ -694,20 +958,27 @@
                     this.field_73064_N.remove(nextticklistentry);
                     this.field_94579_S.add(nextticklistentry);
                 }
+                 timings.scheduledBlocksCleanup.stopTiming(); // Paper
 
                 this.field_72984_F.func_76319_b();
                 this.field_72984_F.func_76320_a("ticking");
                 Iterator<NextTickListEntry> iterator = this.field_94579_S.iterator();
+                timings.scheduledBlocksTicking.startTiming(); // Paper
 
                 while (iterator.hasNext())
                 {
                     NextTickListEntry nextticklistentry1 = iterator.next();
                     iterator.remove();
+                    //Keeping here as a note for future when it may be restored.
+                    //boolean isForced = getPersistentChunks().containsKey(new ChunkPos(nextticklistentry.xCoord >> 4, nextticklistentry.zCoord >> 4));
+                    //byte b0 = isForced ? 0 : 8;
                     int k = 0;
 
                     if (this.func_175707_a(nextticklistentry1.field_180282_a.func_177982_a(0, 0, 0), nextticklistentry1.field_180282_a.func_177982_a(0, 0, 0)))
                     {
                         IBlockState iblockstate = this.func_180495_p(nextticklistentry1.field_180282_a);
+                        co.aikar.timings.Timing timing = iblockstate.func_177230_c().getTiming(); // Paper
+                        timing.startTiming(); // Paper
 
                         if (iblockstate.func_185904_a() != Material.field_151579_a && Block.func_149680_a(iblockstate.func_177230_c(), nextticklistentry1.func_151351_a()))
                         {
@@ -723,19 +994,20 @@
                                 throw new ReportedException(crashreport);
                             }
                         }
+                        timing.stopTiming(); // Paper
                     }
                     else
                     {
                         this.func_175684_a(nextticklistentry1.field_180282_a, nextticklistentry1.func_151351_a(), 0);
                     }
                 }
+                timings.scheduledBlocksTicking.stopTiming(); // Paper
 
                 this.field_72984_F.func_76319_b();
                 this.field_94579_S.clear();
                 return !this.field_73065_O.isEmpty();
             }
         }
-    }
 
     @Nullable
     public List<NextTickListEntry> func_72920_a(Chunk p_72920_1_, boolean p_72920_2_)
@@ -775,7 +1047,8 @@
                 {
                     if (p_175712_2_)
                     {
-                        if (i == 0)
+                        this.field_73064_N.remove(nextticklistentry);
+                        if (i != 0)
                         {
                             this.field_73064_N.remove(nextticklistentry);
                         }
@@ -785,7 +1058,7 @@
 
                     if (list == null)
                     {
-                        list = Lists.<NextTickListEntry>newArrayList();
+                        list = new ArrayList<NextTickListEntry>(30);
                     }
 
                     list.add(nextticklistentry);
@@ -796,21 +1069,6 @@
         return list;
     }
 
-    public void func_72866_a(Entity p_72866_1_, boolean p_72866_2_)
-    {
-        if (!this.func_175735_ai() && (p_72866_1_ instanceof EntityAnimal || p_72866_1_ instanceof EntityWaterMob))
-        {
-            p_72866_1_.func_70106_y();
-        }
-
-        if (!this.func_175738_ah() && p_72866_1_ instanceof INpc)
-        {
-            p_72866_1_.func_70106_y();
-        }
-
-        super.func_72866_a(p_72866_1_, p_72866_2_);
-    }
-
     private boolean func_175738_ah()
     {
         return this.field_73061_a.func_71220_V();
@@ -824,11 +1082,68 @@
     protected IChunkProvider func_72970_h()
     {
         IChunkLoader ichunkloader = this.field_73019_z.func_75763_a(this.field_73011_w);
-        return new ChunkProviderServer(this, ichunkloader, this.field_73011_w.func_186060_c());
+        // Magma - if provider is vanilla, proceed to create a bukkit compatible chunk generator
+        if (this.field_73011_w.getClass().toString().length() <= 3 || this.field_73011_w.getClass().toString().contains("net.minecraft")) {
+            // CraftBukkit start
+            InternalChunkGenerator gen;
+
+            if (this.generator != null) {
+                gen = new CustomChunkGenerator(this, this.func_72905_C(), this.generator);
+            } else if (this.field_73011_w instanceof WorldProviderHell) {
+                gen = new NetherChunkGenerator(this, this.func_72905_C());
+            } else if (this.field_73011_w instanceof WorldProviderEnd) {
+                gen = new SkyLandsChunkGenerator(this, this.func_72905_C());
+            } else {
+                gen = new NormalChunkGenerator(this, this.func_72905_C());
+            }
+
+            this.field_73020_y = new ChunkProviderServer(this, ichunkloader, gen);
+            // CraftBukkit end
+        } else { // custom provider, load normally for forge compatibility
+            this.field_73020_y = new ChunkProviderServer(this, ichunkloader, this.field_73011_w.func_186060_c());
+        }
+        return field_73020_y;
     }
 
+    public List<TileEntity> getTileEntities(int i, int j, int k, int l, int i1, int j1) {
+        ArrayList arraylist = Lists.newArrayList();
+
+        // CraftBukkit start - Get tile entities from chunks instead of world
+        for (int chunkX = (i >> 4); chunkX <= ((l - 1) >> 4); chunkX++) {
+            for (int chunkZ = (k >> 4); chunkZ <= ((j1 - 1) >> 4); chunkZ++) {
+                Chunk chunk = func_72964_e(chunkX, chunkZ);
+                if (chunk == null) {
+                    continue;
+                }
+                for (Object te : chunk.func_177434_r().values()) {
+                    TileEntity tileentity = (TileEntity) te;
+                    if ((tileentity.func_174877_v().func_177958_n() >= i) && (tileentity.func_174877_v().func_177956_o() >= j) && (tileentity.func_174877_v().func_177952_p() >= k) && (tileentity.func_174877_v().func_177958_n() < l) && (tileentity.func_174877_v().func_177956_o() < i1) && (tileentity.func_174877_v().func_177952_p() < j1)) {
+                        arraylist.add(tileentity);
+                    }
+                }
+            }
+        }
+        /*
+        for (int k1 = 0; k1 < this.tileEntityList.size(); ++k1) {
+            TileEntity tileentity = (TileEntity) this.tileEntityList.get(k1);
+            BlockPosition blockposition = tileentity.getPosition();
+
+            if (blockposition.getX() >= i && blockposition.getY() >= j && blockposition.getZ() >= k && blockposition.getX() < l && blockposition.getY() < i1 && blockposition.getZ() < j1) {
+                arraylist.add(tileentity);
+            }
+        }
+        */
+        // CraftBukkit end
+
+        return arraylist;
+    }
+
     public boolean func_175660_a(EntityPlayer p_175660_1_, BlockPos p_175660_2_)
     {
+        return super.func_175660_a(p_175660_1_, p_175660_2_);
+    }
+    public boolean canMineBlockBody(EntityPlayer p_175660_1_, BlockPos p_175660_2_)
+    {
         return !this.field_73061_a.func_175579_a(this, p_175660_2_, p_175660_1_) && this.func_175723_af().func_177746_a(p_175660_2_);
     }
 
@@ -894,7 +1209,24 @@
         }
         else
         {
+            if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(this, p_73052_1_)) return;
             this.field_72987_B = true;
+            // CraftBukkit start
+            if (this.generator != null) {
+                Random rand = new Random(this.func_72905_C());
+                org.bukkit.Location spawn = this.generator.getFixedSpawnLocation(((WorldServer) this).getWorld(), rand);
+
+                if (spawn != null) {
+                    if (spawn.getWorld() != ((WorldServer) this).getWorld()) {
+                        throw new IllegalStateException("Cannot set spawn point for " + this.field_72986_A.func_76065_j() + " to be in another world (" + spawn.getWorld().getName() + ")");
+                    } else {
+                        this.field_72986_A.func_176143_a(new BlockPos(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()));
+                        this.field_72987_B = false;
+                        return;
+                    }
+                }
+            }
+            // CraftBukkit end
             BiomeProvider biomeprovider = this.field_73011_w.func_177499_m();
             List<Biome> list = biomeprovider.func_76932_a();
             Random random = new Random(this.func_72905_C());
@@ -915,7 +1247,7 @@
 
             int l = 0;
 
-            while (!this.field_73011_w.func_76566_a(i, k))
+            while (!this.canSpawn(i, k)) // CraftBukkit - use our own canSpawn
             {
                 i += random.nextInt(64) - random.nextInt(64);
                 k += random.nextInt(64) - random.nextInt(64);
@@ -966,6 +1298,8 @@
 
         if (chunkproviderserver.func_73157_c())
         {
+            org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld()));
+            timings.worldSave.startTiming(); // Paper
             if (p_73044_2_ != null)
             {
                 p_73044_2_.func_73720_a("Saving level");
@@ -978,15 +1312,11 @@
                 p_73044_2_.func_73719_c("Saving chunks");
             }
 
+            timings.worldSaveChunks.startTiming(); // Paper
             chunkproviderserver.func_186027_a(p_73044_1_);
-
-            for (Chunk chunk : Lists.newArrayList(chunkproviderserver.func_189548_a()))
-            {
-                if (chunk != null && !this.field_73063_M.func_152621_a(chunk.field_76635_g, chunk.field_76647_h))
-                {
-                    chunkproviderserver.func_189549_a(chunk);
-                }
-            }
+            timings.worldSaveChunks.stopTiming(); // Paper
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Save(this));
+            timings.worldSave.stopTiming(); // Paper
         }
     }
 
@@ -1002,6 +1332,7 @@
 
     protected void func_73042_a() throws MinecraftException
     {
+        timings.worldSaveLevel.startTiming(); // Paper
         this.func_72906_B();
 
         for (WorldServer worldserver : this.field_73061_a.field_71305_c)
@@ -1012,6 +1343,12 @@
             }
         }
 
+        // CraftBukkit start - Save secondary data for nether/end
+        if (this instanceof WorldServerMulti) {
+            ((WorldServerMulti) this).func_184166_c();
+        }
+        // CraftBukkit end
+
         this.field_72986_A.func_176145_a(this.func_175723_af().func_177741_h());
         this.field_72986_A.func_176124_d(this.func_175723_af().func_177731_f());
         this.field_72986_A.func_176141_c(this.func_175723_af().func_177721_g());
@@ -1023,6 +1360,8 @@
         this.field_72986_A.func_176135_e(this.func_175723_af().func_177732_i());
         this.field_73019_z.func_75755_a(this.field_72986_A, this.field_73061_a.func_184103_al().func_72378_q());
         this.field_72988_C.func_75744_a();
+        this.perWorldStorage.func_75744_a();
+        timings.worldSaveLevel.stopTiming(); // Paper
     }
 
     public boolean func_72838_d(Entity p_72838_1_)
@@ -1030,11 +1369,17 @@
         return this.func_184165_i(p_72838_1_) ? super.func_72838_d(p_72838_1_) : false;
     }
 
+    public boolean spawnEntity(Entity entityIn, CreatureSpawnEvent.SpawnReason spawnReason) {
+        // World.spawnEntity(Entity) will call this, and we still want to perform
+        // existing entity checking when it's called with a SpawnReason
+        return this.func_184165_i(entityIn) ? super.spawnEntity(entityIn, spawnReason) : false;
+    }
+
     public void func_175650_b(Collection<Entity> p_175650_1_)
     {
         for (Entity entity : Lists.newArrayList(p_175650_1_))
         {
-            if (this.func_184165_i(entity))
+            if (this.func_184165_i(entity) && !net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entity, this)))
             {
                 this.field_72996_f.add(entity);
                 this.func_72923_a(entity);
@@ -1046,7 +1391,6 @@
     {
         if (p_184165_1_.field_70128_L)
         {
-            field_147491_a.warn("Tried to add entity {} but it was marked as removed already", (Object)EntityList.func_191301_a(p_184165_1_));
             return false;
         }
         else
@@ -1057,7 +1401,7 @@
             {
                 Entity entity = this.field_175741_N.get(uuid);
 
-                if (this.field_72997_g.contains(entity))
+                if (this.field_72997_g.contains(entity) || entity.field_70128_L) // Paper - if dupe is dead, overwrite
                 {
                     this.field_72997_g.remove(entity);
                 }
@@ -1065,7 +1409,6 @@
                 {
                     if (!(p_184165_1_ instanceof EntityPlayer))
                     {
-                        field_147491_a.warn("Keeping entity {} that already exists with UUID {}", EntityList.func_191301_a(entity), uuid.toString());
                         return false;
                     }
 
@@ -1113,9 +1456,17 @@
 
     public boolean func_72942_c(Entity p_72942_1_)
     {
+        if (p_72942_1_ instanceof net.minecraft.entity.effect.EntityLightningBolt) {
+        LightningStrikeEvent lightning = new LightningStrikeEvent(this.getWorld(), (org.bukkit.entity.LightningStrike) p_72942_1_.getBukkitEntity());
+        this.getServer().getPluginManager().callEvent(lightning);
+
+        if (lightning.isCancelled()) {
+            return false;
+        }
+        }
         if (super.func_72942_c(p_72942_1_))
         {
-            this.field_73061_a.func_184103_al().func_148543_a((EntityPlayer)null, p_72942_1_.field_70165_t, p_72942_1_.field_70163_u, p_72942_1_.field_70161_v, 512.0D, this.field_73011_w.func_186058_p().func_186068_a(), new SPacketSpawnGlobalEntity(p_72942_1_));
+            this.field_73061_a.func_184103_al().sendToAllNearExcept((EntityPlayer)null, p_72942_1_.field_70165_t, p_72942_1_.field_70163_u, p_72942_1_.field_70161_v, 512.0D, this, new SPacketSpawnGlobalEntity(p_72942_1_)); // CraftBukkit - Use dimension  // Paper - use world instead of dimension
             return true;
         }
         else
@@ -1136,10 +1487,14 @@
 
     public Explosion func_72885_a(@Nullable Entity p_72885_1_, double p_72885_2_, double p_72885_4_, double p_72885_6_, float p_72885_8_, boolean p_72885_9_, boolean p_72885_10_)
     {
-        Explosion explosion = new Explosion(this, p_72885_1_, p_72885_2_, p_72885_4_, p_72885_6_, p_72885_8_, p_72885_9_, p_72885_10_);
-        explosion.func_77278_a();
-        explosion.func_77279_a(false);
-
+        Explosion explosion = super.func_72885_a(p_72885_1_, p_72885_2_, p_72885_4_, p_72885_6_, p_72885_8_, p_72885_9_, p_72885_10_);
+        if(explosion == null) return null;
+        try{
+        if (explosion.wasCanceled) {
+            return explosion;
+        }
+        }catch(Exception e){return null;}
+        if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
         if (!p_72885_10_)
         {
             explosion.func_180342_d();
@@ -1182,7 +1537,8 @@
             {
                 if (this.func_147485_a(blockeventdata))
                 {
-                    this.field_73061_a.func_184103_al().func_148543_a((EntityPlayer)null, (double)blockeventdata.func_180328_a().func_177958_n(), (double)blockeventdata.func_180328_a().func_177956_o(), (double)blockeventdata.func_180328_a().func_177952_p(), 64.0D, this.field_73011_w.func_186058_p().func_186068_a(), new SPacketBlockAction(blockeventdata.func_180328_a(), blockeventdata.func_151337_f(), blockeventdata.func_151339_d(), blockeventdata.func_151338_e()));
+                    // CraftBukkit - this.provider.dimension -> this.dimension  // Paper - dimension -> world
+                    this.field_73061_a.func_184103_al().sendToAllNearExcept((EntityPlayer)null, (double)blockeventdata.func_180328_a().func_177958_n(), (double)blockeventdata.func_180328_a().func_177956_o(), (double)blockeventdata.func_180328_a().func_177952_p(), 64.0D, this, new SPacketBlockAction(blockeventdata.func_180328_a(), blockeventdata.func_151337_f(), blockeventdata.func_151339_d(), blockeventdata.func_151338_e()));
                 }
             }
 
@@ -1208,27 +1564,31 @@
 
         if (this.field_73003_n != this.field_73004_o)
         {
-            this.field_73061_a.func_184103_al().func_148537_a(new SPacketChangeGameState(7, this.field_73004_o), this.field_73011_w.func_186058_p().func_186068_a());
+            this.field_73061_a.func_184103_al().func_148537_a(new SPacketChangeGameState(7, this.field_73004_o), this.field_73011_w.getDimension());
         }
 
         if (this.field_73018_p != this.field_73017_q)
         {
-            this.field_73061_a.func_184103_al().func_148537_a(new SPacketChangeGameState(8, this.field_73017_q), this.field_73011_w.func_186058_p().func_186068_a());
+            this.field_73061_a.func_184103_al().func_148537_a(new SPacketChangeGameState(8, this.field_73017_q), this.field_73011_w.getDimension());
         }
 
+        /* The function in use here has been replaced in order to only send the weather info to players in the correct dimension,
+         * rather than to all players on the server. This is what causes the client-side rain, as the
+         * client believes that it has started raining locally, rather than in another dimension.
+         */
         if (flag != this.func_72896_J())
         {
             if (flag)
             {
-                this.field_73061_a.func_184103_al().func_148540_a(new SPacketChangeGameState(2, 0.0F));
+                this.field_73061_a.func_184103_al().func_148537_a(new SPacketChangeGameState(2, 0.0F), this.field_73011_w.getDimension());
             }
             else
             {
-                this.field_73061_a.func_184103_al().func_148540_a(new SPacketChangeGameState(1, 0.0F));
+                this.field_73061_a.func_184103_al().func_148537_a(new SPacketChangeGameState(1, 0.0F), this.field_73011_w.getDimension());
             }
 
-            this.field_73061_a.func_184103_al().func_148540_a(new SPacketChangeGameState(7, this.field_73004_o));
-            this.field_73061_a.func_184103_al().func_148540_a(new SPacketChangeGameState(8, this.field_73017_q));
+            this.field_73061_a.func_184103_al().func_148537_a(new SPacketChangeGameState(7, this.field_73004_o), this.field_73011_w.getDimension());
+            this.field_73061_a.func_184103_al().func_148537_a(new SPacketChangeGameState(8, this.field_73017_q), this.field_73011_w.getDimension());
         }
     }
 
@@ -1265,12 +1625,20 @@
 
     public void func_180505_a(EnumParticleTypes p_180505_1_, boolean p_180505_2_, double p_180505_3_, double p_180505_5_, double p_180505_7_, int p_180505_9_, double p_180505_10_, double p_180505_12_, double p_180505_14_, double p_180505_16_, int... p_180505_18_)
     {
-        SPacketParticles spacketparticles = new SPacketParticles(p_180505_1_, p_180505_2_, (float)p_180505_3_, (float)p_180505_5_, (float)p_180505_7_, (float)p_180505_10_, (float)p_180505_12_, (float)p_180505_14_, (float)p_180505_16_, p_180505_9_, p_180505_18_);
+        // CraftBukkit - visibility api support
+        sendParticles(null, p_180505_1_, p_180505_2_, p_180505_3_, p_180505_5_, p_180505_7_, p_180505_9_, p_180505_10_, p_180505_12_, p_180505_14_, p_180505_16_, p_180505_18_);
+    }
 
+    // Paper start - Particle API Expansion
+    public void sendParticles(@Nullable EntityPlayerMP sender, EnumParticleTypes particleType, boolean longDistance, double xCoord, double yCoord, double zCoord, int numberOfParticles, double xOffset, double yOffset, double zOffset, double particleSpeed, int... particleArguments) {
+        // CraftBukkit end
+        SPacketParticles spacketparticles = new SPacketParticles(particleType, longDistance, (float)xCoord, (float)yCoord, (float)zCoord, (float)xOffset, (float)yOffset, (float)zOffset, (float)particleSpeed, numberOfParticles, particleArguments);
+
         for (int i = 0; i < this.field_73010_i.size(); ++i)
         {
             EntityPlayerMP entityplayermp = (EntityPlayerMP)this.field_73010_i.get(i);
-            this.func_184159_a(entityplayermp, p_180505_2_, p_180505_3_, p_180505_5_, p_180505_7_, spacketparticles);
+            if (sender != null && !entityplayermp.getBukkitEntity().canSee(sender.getBukkitEntity())) continue;
+            this.func_184159_a(entityplayermp, longDistance, xCoord, yCoord, zCoord, spacketparticles);
         }
     }
 
@@ -1323,10 +1691,16 @@
         return this.field_193036_D;
     }
 
+    public java.io.File getChunkSaveLocation()
+    {
+        return ((net.minecraft.world.chunk.storage.AnvilChunkLoader)func_72863_F().field_73247_e).field_75825_d;
+    }
+
     static class ServerBlockEventList extends ArrayList<BlockEventData>
         {
             private ServerBlockEventList()
             {
             }
         }
+
\ No newline at end of file
 }
