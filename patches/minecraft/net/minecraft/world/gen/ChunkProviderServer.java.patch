--- ../src-base/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
+++ ../src-work/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.gen;
 
+import co.aikar.timings.Timing;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
@@ -24,17 +25,22 @@
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraft.world.chunk.storage.IChunkLoader;
+
+import net.minecraftforge.common.DimensionManager;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.world.ChunkUnloadEvent;
+import org.magmafoundation.magma.configuration.MagmaConfig;
 
 public class ChunkProviderServer implements IChunkProvider
 {
     private static final Logger field_147417_b = LogManager.getLogger();
-    private final Set<Long> field_73248_b = Sets.<Long>newHashSet();
+    public final Set<Long> field_73248_b = Sets.<Long>newHashSet();
     public final IChunkGenerator field_186029_c;
     public final IChunkLoader field_73247_e;
     public final Long2ObjectMap<Chunk> field_73244_f = new Long2ObjectOpenHashMap<Chunk>(8192);
     public final WorldServer field_73251_h;
+    private final Set<Long> loadingChunks = Sets.newHashSet();
 
     public ChunkProviderServer(WorldServer p_i46838_1_, IChunkLoader p_i46838_2_, IChunkGenerator p_i46838_3_)
     {
@@ -82,23 +88,62 @@
         return chunk;
     }
 
+    public Chunk getChunkIfLoaded(int x, int z) {
+        return field_73244_f.get(ChunkPos.func_77272_a(x, z));
+    }
+
     @Nullable
     public Chunk func_186028_c(int p_186028_1_, int p_186028_2_)
     {
-        Chunk chunk = this.func_186026_b(p_186028_1_, p_186028_2_);
+        return loadChunk(p_186028_1_, p_186028_2_, null);
+    }
 
+    @Nullable
+    public Chunk loadChunk(int p_186028_1_, int p_186028_2_, @Nullable Runnable runnable)
+    {
+        return getChunkAt(p_186028_1_, p_186028_2_, runnable, true);
+    }
+
+
+    public Chunk getChunkAt(int x, int z, Runnable runnable, boolean generate)
+    {
+        Chunk chunk = this.func_186026_b(x, z);
         if (chunk == null)
         {
-            chunk = this.func_73239_e(p_186028_1_, p_186028_2_);
+            long pos = ChunkPos.func_77272_a(x, z);
+            chunk = net.minecraftforge.common.ForgeChunkManager.fetchDormantChunk(pos, this.field_73251_h);
+            if (chunk != null || !(this.field_73247_e instanceof net.minecraft.world.chunk.storage.AnvilChunkLoader))
+            {
+                if (!loadingChunks.add(pos)) net.minecraftforge.fml.common.FMLLog.bigWarning("There is an attempt to load a chunk ({},{}) in dimension {} that is already being loaded. This will cause weird chunk breakages.", x, z, this.field_73251_h.field_73011_w.getDimension());
+                if (chunk == null) chunk = this.func_73239_e(x, z);
 
-            if (chunk != null)
+                if (chunk != null)
+                {
+                    this.field_73244_f.put(ChunkPos.func_77272_a(x, z), chunk);
+                    chunk.func_76631_c();
+                    chunk.populateCB(this, this.field_186029_c, false);
+                }
+
+                loadingChunks.remove(pos);
+            }
+            else
             {
-                this.field_73244_f.put(ChunkPos.func_77272_a(p_186028_1_, p_186028_2_), chunk);
-                chunk.func_76631_c();
-                chunk.func_186030_a(this, this.field_186029_c);
+                net.minecraft.world.chunk.storage.AnvilChunkLoader loader = (net.minecraft.world.chunk.storage.AnvilChunkLoader) this.field_73247_e;
+                if (runnable == null || !net.minecraftforge.common.ForgeChunkManager.asyncChunkLoading)
+                    chunk = net.minecraftforge.common.chunkio.ChunkIOExecutor.syncChunkLoad(this.field_73251_h, loader, this, x, z);
+                else if (loader.func_191063_a(x, z))
+                {
+                    // We can only use the async queue for already generated chunks
+                    net.minecraftforge.common.chunkio.ChunkIOExecutor.queueChunkLoad(this.field_73251_h, loader, this, x, z, runnable);
+                    return null;
+                }
             }
+        } else if (chunk == null && generate) {
+            chunk = func_186025_d(x, z);
         }
 
+        // If we didn't load the chunk async and have a callback run it now
+        if (runnable != null) runnable.run();
         return chunk;
     }
 
@@ -108,6 +153,7 @@
 
         if (chunk == null)
         {
+            field_73251_h.timings.syncChunkLoadTimer.startTiming();
             long i = ChunkPos.func_77272_a(p_186025_1_, p_186025_2_);
 
             try
@@ -126,7 +172,8 @@
 
             this.field_73244_f.put(i, chunk);
             chunk.func_76631_c();
-            chunk.func_186030_a(this, this.field_186029_c);
+            chunk.populateCB(this, this.field_186029_c, true);
+            field_73251_h.timings.syncChunkLoadTimer.stopTiming();
         }
 
         return chunk;
@@ -168,7 +215,7 @@
 
     private void func_73242_b(Chunk p_73242_1_)
     {
-        try
+        try (Timing timed = field_73251_h.timings.chunkSaveData.startTiming()) // Paper
         {
             p_73242_1_.func_177432_b(this.field_73251_h.func_82737_E());
             this.field_73247_e.func_75816_a(this.field_73251_h, p_73242_1_);
@@ -224,6 +271,11 @@
         {
             if (!this.field_73248_b.isEmpty())
             {
+                for (ChunkPos forced : this.field_73251_h.getPersistentChunks().keySet())
+                {
+                    this.field_73248_b.remove(ChunkPos.func_77272_a(forced.field_77276_a, forced.field_77275_b));
+                }
+
                 Iterator<Long> iterator = this.field_73248_b.iterator();
 
                 for (int i = 0; i < 100 && iterator.hasNext(); iterator.remove())
@@ -233,21 +285,56 @@
 
                     if (chunk != null && chunk.field_189550_d)
                     {
-                        chunk.func_76623_d();
-                        this.func_73242_b(chunk);
-                        this.func_73243_a(chunk);
-                        this.field_73244_f.remove(olong);
+                        if (!unloadChunk(chunk, true)) {
+                            continue;
+                        }
                         ++i;
                     }
                 }
             }
 
+            int dim = this.field_73251_h.field_73011_w.getDimension();
+            if (this.field_73244_f.isEmpty() && !DimensionManager.isBukkitDimension(dim)) DimensionManager.unloadWorld(dim);
+
             this.field_73247_e.func_75817_a();
         }
 
         return false;
     }
 
+    // CraftBukkit start
+    public boolean unloadChunk(Chunk chunk, boolean save) {
+        ChunkUnloadEvent event = new ChunkUnloadEvent(chunk.bukkitChunk, save);
+        this.field_73251_h.getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return false;
+        }
+        save = event.isSaveChunk();
+
+        // Update neighbor counts
+        for (int x = -2; x < 3; x++) {
+            for (int z = -2; z < 3; z++) {
+                if (x == 0 && z == 0) {
+                    continue;
+                }
+
+                Chunk neighbor = this.getChunkIfLoaded(chunk.field_76635_g + x, chunk.field_76647_h + z);
+                if (neighbor != null) {
+                    neighbor.setNeighborUnloaded(-x, -z);
+                    chunk.setNeighborUnloaded(x, z);
+                }
+            }
+        }
+        // Moved from unloadChunks above
+        chunk.func_76623_d();
+        net.minecraftforge.common.ForgeChunkManager.putDormantChunk(ChunkPos.func_77272_a(chunk.field_76635_g, chunk.field_76647_h), chunk);
+        this.func_73242_b(chunk);
+        this.func_73243_a(chunk);
+        this.field_73244_f.remove(chunk.chunkKey);
+        return true;
+    }
+    // CraftBukkit end
+
\ No newline at end of file
     public boolean func_73157_c()
     {
         return !this.field_73251_h.field_73058_d;
