--- ../src-base/minecraft/net/minecraft/world/chunk/storage/RegionFileCache.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/storage/RegionFileCache.java
@@ -1,15 +1,24 @@
 package net.minecraft.world.chunk.storage;
 
 import com.google.common.collect.Maps;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.Map.Entry;
+import net.minecraft.nbt.CompressedStreamTools;
+import net.minecraft.nbt.NBTBase;
+import net.minecraft.nbt.NBTTagCompound;
+
+import javax.annotation.Nullable;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
 import java.util.Map;
+import net.minecraft.nbt.NBTTagList;
 
 public class RegionFileCache
 {
-    private static final Map<File, RegionFile> field_76553_a = Maps.<File, RegionFile>newHashMap();
+    public static final Map<File, RegionFile> field_76553_a = new LinkedHashMap<>(256, 0.75f, true); // Spigot - private -> public, Paper - HashMap -> LinkedHashMap
 
     public static synchronized RegionFile func_76550_a(File p_76550_0_, int p_76550_1_, int p_76550_2_)
     {
@@ -30,7 +39,7 @@
 
             if (field_76553_a.size() >= 256)
             {
-                func_76551_a();
+			 	trimCache(); // Paper
             }
 
             RegionFile regionfile1 = new RegionFile(file2);
@@ -38,7 +47,153 @@
             return regionfile1;
         }
     }
+    // Paper Start
+    private static synchronized void trimCache() {
+        Iterator<Entry<File, RegionFile>> itr = RegionFileCache.field_76553_a.entrySet().iterator();
+        int count = RegionFileCache.field_76553_a.size() - 256;
+        while (count-- >= 0 && itr.hasNext()) {
+            try {
+                itr.next().getValue().func_76708_c();
+            } catch (IOException ioexception) {
+                ioexception.printStackTrace();
+            }
+            itr.remove();
+        }
+    }
 
+    private static void printOversizedLog(String msg, File file, int x, int z) {
+        org.apache.logging.log4j.LogManager.getLogger().fatal(msg + " (" + file.toString().replaceAll(".+[\\\\/]", "") + " - " + x + "," + z + ") Go clean it up to remove this message. /minecraft:tp " + (x<<4)+" 128 "+(z<<4) + " - DO NOT REPORT THIS TO PAPER - You may ask for help on Discord, but do not file an issue. These error messages can not be removed.");
+    }
+
+    private static final int DEFAULT_SIZE_THRESHOLD = 1024 * 8;
+    private static final int OVERZEALOUS_TOTAL_THRESHOLD = 1024 * 64;
+    private static final int OVERZEALOUS_THRESHOLD = 1024;
+    private static int SIZE_THRESHOLD = DEFAULT_SIZE_THRESHOLD;
+    private static void resetFilterThresholds() {
+        SIZE_THRESHOLD = Math.max(1024 * 4, Integer.getInteger("Paper.FilterThreshhold", DEFAULT_SIZE_THRESHOLD));
+    }
+    static {
+        resetFilterThresholds();
+    }
+
+    static boolean isOverzealous() {
+        return SIZE_THRESHOLD == OVERZEALOUS_THRESHOLD;
+    }
+
+    private static synchronized void writeRegion(File file, int x, int z, NBTTagCompound nbttagcompound) throws IOException {
+        RegionFile regionfile = func_76550_a(file, x, z);
+
+        DataOutputStream out = regionfile.func_76710_b(x & 31, z & 31);
+        try {
+            CompressedStreamTools.func_74800_a(nbttagcompound, out);
+            out.close();
+            regionfile.setOversized(x, z, false);
+        } catch (RegionFile.ChunkTooLargeException ignored) {
+            printOversizedLog("ChunkTooLarge! Someone is trying to duplicate.", file, x, z);
+            // Clone as we are now modifying it, don't want to corrupt the pending save state
+            nbttagcompound = (NBTTagCompound) nbttagcompound.func_74737_b();
+            // Filter out TileEntities and Entities
+            NBTTagCompound oversizedData = filterChunkData(nbttagcompound);
+            //noinspection SynchronizationOnLocalVariableOrMethodParameter
+                out = regionfile.func_76710_b(x & 31, z & 31);
+                CompressedStreamTools.func_74800_a(nbttagcompound, out);
+                try {
+                    out.close();
+                    // 2048 is below the min allowed, so it means we enter overzealous mode below
+                    if (SIZE_THRESHOLD == OVERZEALOUS_THRESHOLD) {
+                        resetFilterThresholds();
+                    }
+                } catch (RegionFile.ChunkTooLargeException e) {
+                    printOversizedLog("ChunkTooLarge even after reduction. Trying in overzealous mode.", file, x, z);
+                    // Eek, major fail. We have retry logic, so reduce threshholds and fall back
+                    SIZE_THRESHOLD = OVERZEALOUS_THRESHOLD;
+                    throw e;
+                }
+
+                regionfile.writeOversizedData(x, z, oversizedData);
+            
+        } catch (Exception e) {
+            e.printStackTrace();
+            throw e;
+        }
+
+    }
+
+    private static NBTTagCompound filterChunkData(NBTTagCompound chunk) {
+        NBTTagCompound oversizedLevel = new NBTTagCompound();
+        NBTTagCompound level = chunk.func_74775_l("Level");
+        filterChunkList(level, oversizedLevel, "Entities");
+        filterChunkList(level, oversizedLevel, "TileEntities");
+        NBTTagCompound oversized = new NBTTagCompound();
+        oversized.func_74782_a("Level", oversizedLevel);
+        return oversized;
+    }
+
+    private static void filterChunkList(NBTTagCompound level, NBTTagCompound extra, String key) {
+        NBTTagList list = level.func_150295_c(key, 10);
+        NBTTagList newList = extra.func_150295_c(key, 10);
+        int totalSize = 0;
+        for (Iterator<NBTBase> iterator = list.field_74747_a.iterator(); iterator.hasNext(); ) {
+            NBTBase object = iterator.next();
+            int nbtSize = getNBTSize(object);
+            if (nbtSize > SIZE_THRESHOLD || (SIZE_THRESHOLD == OVERZEALOUS_THRESHOLD && totalSize > OVERZEALOUS_TOTAL_THRESHOLD)) {
+                newList.func_74742_a(object);
+                iterator.remove();
+            } else  {
+                totalSize += nbtSize;
+            }
+        }
+        level.func_74782_a(key, list);
+        extra.func_74782_a(key, newList);
+    }
+
+
+    private static NBTTagCompound readOversizedChunk(RegionFile regionfile, int i, int j) throws IOException {
+        synchronized (regionfile) {
+            try (DataInputStream datainputstream = regionfile.func_76704_a(i & 31, j & 31)) {
+                NBTTagCompound oversizedData = regionfile.getOversizedData(i, j);
+                NBTTagCompound chunk = CompressedStreamTools.func_74794_a(datainputstream);
+                if (oversizedData == null) {
+                    return chunk;
+                }
+                NBTTagCompound oversizedLevel = oversizedData.func_74775_l("Level");
+                NBTTagCompound level = chunk.func_74775_l("Level");
+
+                mergeChunkList(level, oversizedLevel, "Entities");
+                mergeChunkList(level, oversizedLevel, "TileEntities");
+
+                chunk.func_74782_a("Level", level);
+
+                return chunk;
+            } catch (Throwable throwable) {
+                throwable.printStackTrace();
+                throw throwable;
+            }
+        }
+    }
+
+    private static void mergeChunkList(NBTTagCompound level, NBTTagCompound oversizedLevel, String key) {
+        NBTTagList levelList = level.func_150295_c(key, 10);
+        NBTTagList oversizedList = oversizedLevel.func_150295_c(key, 10);
+
+        if (!oversizedList.func_82582_d()) {
+            oversizedList.field_74747_a.forEach(levelList::func_74742_a);
+            level.func_74782_a(key, levelList);
+        }
+    }
+
+    private static int getNBTSize(NBTBase nbtBase) {
+        DataOutputStream test = new DataOutputStream(new org.apache.commons.io.output.NullOutputStream());
+        try {
+            nbtBase.func_74734_a(test);
+            return test.size();
+        } catch (IOException e) {
+            e.printStackTrace();
+            return 0;
+        }
+    }
+    // Paper End
+
     public static synchronized RegionFile func_191065_b(File p_191065_0_, int p_191065_1_, int p_191065_2_)
     {
         File file1 = new File(p_191065_0_, "region");
@@ -92,14 +247,38 @@
         return regionfile.func_76704_a(p_76549_1_ & 31, p_76549_2_ & 31);
     }
 
+    @Nullable
+    public static NBTTagCompound getChunkInputStreamCB(File worldDir, int chunkX, int chunkZ) throws IOException
+    {  // Paper - remove synchronization
+        RegionFile regionfile = func_76550_a(worldDir, chunkX, chunkZ);
+        // Paper start
+        if (regionfile.isOversized(chunkX, chunkZ)) {
+            printOversizedLog("Loading Oversized Chunk!", worldDir, chunkX, chunkZ);
+            return readOversizedChunk(regionfile, chunkX, chunkZ);
+        }
+        // Paper end
+        DataInputStream datainputstream = regionfile.func_76704_a(chunkX & 31, chunkZ & 31);
+
+        if (datainputstream == null) {
+            return null;
+        }
+
+        return CompressedStreamTools.func_74794_a(datainputstream);
+    }
+
     public static DataOutputStream func_76552_d(File p_76552_0_, int p_76552_1_, int p_76552_2_)
     {
         RegionFile regionfile = func_76550_a(p_76552_0_, p_76552_1_, p_76552_2_);
         return regionfile.func_76710_b(p_76552_1_ & 31, p_76552_2_ & 31);
     }
 
+    public static void getChunkOutputStream(File worldDir, int chunkX, int chunkZ, NBTTagCompound nbttagcompound) throws IOException
+    {   // Paper - remove synchronization
+        writeRegion(worldDir, chunkX, chunkZ, nbttagcompound); // Paper - moved to own method
+    }
+
     public static boolean func_191064_f(File p_191064_0_, int p_191064_1_, int p_191064_2_)
-    {
+    {   // Paper - remove synchronization
\ No newline at end of file
         RegionFile regionfile = func_191065_b(p_191064_0_, p_191064_1_, p_191064_2_);
         return regionfile != null ? regionfile.func_76709_c(p_191064_1_ & 31, p_191064_2_ & 31) : false;
     }
